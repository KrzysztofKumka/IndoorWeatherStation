
IndoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08009a48  08009a48  00019a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a03c  0800a03c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a044  0800a044  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a04c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200001e0  0800a22c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800a22c  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c2  00000000  00000000  0002f0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000322b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bab  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b20  00000000  00000000  0004a98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a788  00000000  00000000  0005b4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000424c  00000000  00000000  000e5c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a30 	.word	0x08009a30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009a30 	.word	0x08009a30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <GFX_SetFont+0x1c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200001fc 	.word	0x200001fc

08000f7c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b7e      	cmp	r3, #126	; 0x7e
 8000f96:	f200 80a3 	bhi.w	80010e0 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
 8000f9e:	e096      	b.n	80010ce <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <GFX_DrawChar+0x16c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	3b20      	subs	r3, #32
 8000fa8:	494f      	ldr	r1, [pc, #316]	; (80010e8 <GFX_DrawChar+0x16c>)
 8000faa:	6809      	ldr	r1, [r1, #0]
 8000fac:	3101      	adds	r1, #1
 8000fae:	7809      	ldrb	r1, [r1, #0]
 8000fb0:	fb03 f101 	mul.w	r1, r3, r1
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3302      	adds	r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	757b      	strb	r3, [r7, #21]
 8000fc4:	e078      	b.n	80010b8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000fc6:	7dbb      	ldrb	r3, [r7, #22]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d032      	beq.n	8001036 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <GFX_DrawChar+0x170>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d113      	bne.n	8001000 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b218      	sxth	r0, r3
 8000fe6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f000 f9d9 	bl	80013b0 <SSD1306_DrawPixel>
 8000ffe:	e052      	b.n	80010a6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <GFX_DrawChar+0x170>)
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	fb03 f202 	mul.w	r2, r3, r2
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	18d0      	adds	r0, r2, r3
 800100e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <GFX_DrawChar+0x170>)
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	18d1      	adds	r1, r2, r3
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <GFX_DrawChar+0x170>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b31      	ldr	r3, [pc, #196]	; (80010ec <GFX_DrawChar+0x170>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b29c      	uxth	r4, r3
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4623      	mov	r3, r4
 8001030:	f000 f960 	bl	80012f4 <GFX_DrawFillRectangle>
 8001034:	e037      	b.n	80010a6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800103a:	2b00      	cmp	r3, #0
 800103c:	d133      	bne.n	80010a6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <GFX_DrawChar+0x170>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d114      	bne.n	8001070 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	b218      	sxth	r0, r3
 8001054:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001058:	b29a      	uxth	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	b21b      	sxth	r3, r3
 8001064:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001068:	4619      	mov	r1, r3
 800106a:	f000 f9a1 	bl	80013b0 <SSD1306_DrawPixel>
 800106e:	e01a      	b.n	80010a6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <GFX_DrawChar+0x170>)
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	fb03 f202 	mul.w	r2, r3, r2
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	18d0      	adds	r0, r2, r3
 800107e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001082:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <GFX_DrawChar+0x170>)
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	fb03 f202 	mul.w	r2, r3, r2
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	18d1      	adds	r1, r2, r3
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <GFX_DrawChar+0x170>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <GFX_DrawChar+0x170>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b29c      	uxth	r4, r3
 800109a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4623      	mov	r3, r4
 80010a2:	f000 f927 	bl	80012f4 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	757b      	strb	r3, [r7, #21]
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	75bb      	strb	r3, [r7, #22]
 80010b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <GFX_DrawChar+0x16c>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f6ff af7f 	blt.w	8000fc6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	3301      	adds	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <GFX_DrawChar+0x16c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f4ff af61 	bcc.w	8000fa0 <GFX_DrawChar+0x24>
 80010de:	e000      	b.n	80010e2 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80010e0:	bf00      	nop
            }
        }
    }
}
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	200001fc 	.word	0x200001fc
 80010ec:	20000000 	.word	0x20000000

080010f0 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001108:	e03e      	b.n	8001188 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800110a:	78f9      	ldrb	r1, [r7, #3]
 800110c:	7cfa      	ldrb	r2, [r7, #19]
 800110e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	460b      	mov	r3, r1
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	6978      	ldr	r0, [r7, #20]
 800111a:	f7ff ff2f 	bl	8000f7c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <GFX_DrawString+0xb0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <GFX_DrawString+0xb4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	3301      	adds	r3, #1
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001138:	f897 3020 	ldrb.w	r3, [r7, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d120      	bne.n	8001182 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001140:	2300      	movs	r3, #0
 8001142:	74bb      	strb	r3, [r7, #18]
 8001144:	e012      	b.n	800116c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3b01      	subs	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	b218      	sxth	r0, r3
 8001150:	7cbb      	ldrb	r3, [r7, #18]
 8001152:	b29a      	uxth	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	b21b      	sxth	r3, r3
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f000 f925 	bl	80013b0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001166:	7cbb      	ldrb	r3, [r7, #18]
 8001168:	3301      	adds	r3, #1
 800116a:	74bb      	strb	r3, [r7, #18]
 800116c:	7cba      	ldrb	r2, [r7, #18]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <GFX_DrawString+0xb0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <GFX_DrawString+0xb4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	429a      	cmp	r2, r3
 8001180:	dbe1      	blt.n	8001146 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ba      	bne.n	800110a <GFX_DrawString+0x1a>
	}
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	20000000 	.word	0x20000000

080011a8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1acb      	subs	r3, r1, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfb8      	it	lt
 80011ce:	425b      	neglt	r3, r3
 80011d0:	429a      	cmp	r2, r3
 80011d2:	bfcc      	ite	gt
 80011d4:	2301      	movgt	r3, #1
 80011d6:	2300      	movle	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80011dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dd0b      	ble.n	800121c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	b29b      	uxth	r3, r3
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	bfb8      	it	lt
 8001234:	425b      	neglt	r3, r3
 8001236:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001238:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123c:	0fda      	lsrs	r2, r3, #31
 800123e:	4413      	add	r3, r2
 8001240:	105b      	asrs	r3, r3, #1
 8001242:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	da02      	bge.n	8001252 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001250:	e030      	b.n	80012b4 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001256:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001258:	e02c      	b.n	80012b4 <GFX_WriteLine+0x10c>
	        if (steep) {
 800125a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	b21b      	sxth	r3, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	b211      	sxth	r1, r2
 800126a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f89e 	bl	80013b0 <SSD1306_DrawPixel>
 8001274:	e008      	b.n	8001288 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b21b      	sxth	r3, r3
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	b211      	sxth	r1, r2
 800127e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f894 	bl	80013b0 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001288:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800128a:	8abb      	ldrh	r3, [r7, #20]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001292:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001296:	2b00      	cmp	r3, #0
 8001298:	da09      	bge.n	80012ae <GFX_WriteLine+0x106>
	            y_start += ystep;
 800129a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012a6:	8afb      	ldrh	r3, [r7, #22]
 80012a8:	4413      	add	r3, r2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	ddce      	ble.n	800125a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3730      	adds	r7, #48	; 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af02      	add	r7, sp, #8
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	1e5a      	subs	r2, r3, #1
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff ff5e 	bl	80011a8 <GFX_WriteLine>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	4613      	mov	r3, r2
 8001308:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e009      	b.n	8001324 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ffd4 	bl	80012c6 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbef      	blt.n	8001310 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af04      	add	r7, sp, #16
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <SSD1306_Command+0x30>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	2200      	movs	r2, #0
 800135c:	2178      	movs	r1, #120	; 0x78
 800135e:	f002 f841 	bl	80033e4 <HAL_I2C_Mem_Write>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000200 	.word	0x20000200

08001370 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_DMA_MODE
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY) { //if dma is ready -> write data
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <SSD1306_Data+0x3c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10a      	bne.n	80013a2 <SSD1306_Data+0x32>
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <SSD1306_Data+0x3c>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	2178      	movs	r1, #120	; 0x78
 800139e:	f002 fb41 	bl	8003a24 <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000200 	.word	0x20000200

080013b0 <SSD1306_DrawPixel>:

//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	460b      	mov	r3, r1
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	70fb      	strb	r3, [r7, #3]
	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT)) {
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db79      	blt.n	80014be <SSD1306_DrawPixel+0x10e>
 80013ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ce:	2b7f      	cmp	r3, #127	; 0x7f
 80013d0:	dc75      	bgt.n	80014be <SSD1306_DrawPixel+0x10e>
 80013d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db71      	blt.n	80014be <SSD1306_DrawPixel+0x10e>
 80013da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013de:	2b3f      	cmp	r3, #63	; 0x3f
 80013e0:	dc6d      	bgt.n	80014be <SSD1306_DrawPixel+0x10e>
		return;		// pixel is out of scale
	}

	else {
		switch (Color) {
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d049      	beq.n	800147c <SSD1306_DrawPixel+0xcc>
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dc69      	bgt.n	80014c0 <SSD1306_DrawPixel+0x110>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d022      	beq.n	8001436 <SSD1306_DrawPixel+0x86>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d165      	bne.n	80014c0 <SSD1306_DrawPixel+0x110>
			case SSD1306_WHITE:
			buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80013f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <SSD1306_DrawPixel+0x52>
 8001400:	3307      	adds	r3, #7
 8001402:	10db      	asrs	r3, r3, #3
 8001404:	b218      	sxth	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	01db      	lsls	r3, r3, #7
 800140a:	4413      	add	r3, r2
 800140c:	4a2f      	ldr	r2, [pc, #188]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	b25a      	sxtb	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	b25b      	sxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b259      	sxtb	r1, r3
 8001424:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001428:	4603      	mov	r3, r0
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4413      	add	r3, r2
 800142e:	b2c9      	uxtb	r1, r1
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 8001432:	54d1      	strb	r1, [r2, r3]
			break;
 8001434:	e044      	b.n	80014c0 <SSD1306_DrawPixel+0x110>
		case SSD1306_BLACK:
			buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001436:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800143a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da00      	bge.n	8001444 <SSD1306_DrawPixel+0x94>
 8001442:	3307      	adds	r3, #7
 8001444:	10db      	asrs	r3, r3, #3
 8001446:	b218      	sxth	r0, r3
 8001448:	4603      	mov	r3, r0
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4413      	add	r3, r2
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	b25a      	sxtb	r2, r3
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4013      	ands	r3, r2
 8001468:	b259      	sxtb	r1, r3
 800146a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 8001478:	54d1      	strb	r1, [r2, r3]
			break;
 800147a:	e021      	b.n	80014c0 <SSD1306_DrawPixel+0x110>
		case SSD1306_INVERSE:
			buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800147c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001480:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da00      	bge.n	800148a <SSD1306_DrawPixel+0xda>
 8001488:	3307      	adds	r3, #7
 800148a:	10db      	asrs	r3, r3, #3
 800148c:	b218      	sxth	r0, r3
 800148e:	4603      	mov	r3, r0
 8001490:	01db      	lsls	r3, r3, #7
 8001492:	4413      	add	r3, r2
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4053      	eors	r3, r2
 80014aa:	b259      	sxtb	r1, r3
 80014ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014b0:	4603      	mov	r3, r0
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	4413      	add	r3, r2
 80014b6:	b2c9      	uxtb	r1, r1
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <SSD1306_DrawPixel+0x11c>)
 80014ba:	54d1      	strb	r1, [r2, r3]
			break;
 80014bc:	e000      	b.n	80014c0 <SSD1306_DrawPixel+0x110>
		return;		// pixel is out of scale
 80014be:	bf00      	nop
		}
	}
}
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000204 	.word	0x20000204

080014d0 <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <SSD1306_Clear+0x22>
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10d      	bne.n	8001500 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80014e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e8:	21ff      	movs	r1, #255	; 0xff
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <SSD1306_Clear+0x38>)
 80014ec:	f005 fbb4 	bl	8006c58 <memset>
		break;
 80014f0:	e006      	b.n	8001500 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	2100      	movs	r1, #0
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <SSD1306_Clear+0x38>)
 80014fa:	f005 fbad 	bl	8006c58 <memset>
		break;
 80014fe:	bf00      	nop
	}
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000204 	.word	0x20000204

0800150c <SSD1306_Display>:

void SSD1306_Display(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001510:	2022      	movs	r0, #34	; 0x22
 8001512:	f7ff ff13 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0);                      	// Page start address
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff ff10 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0xFF);                   	// Page end
 800151c:	20ff      	movs	r0, #255	; 0xff
 800151e:	f7ff ff0d 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001522:	2021      	movs	r0, #33	; 0x21
 8001524:	f7ff ff0a 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0); 						// Column start address
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff07 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 800152e:	207f      	movs	r0, #127	; 0x7f
 8001530:	f7ff ff04 	bl	800133c <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <SSD1306_Display+0x38>)
 800153a:	f7ff ff19 	bl	8001370 <SSD1306_Data>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000204 	.word	0x20000204

08001548 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <SSD1306_Init+0xac>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001556:	20ae      	movs	r0, #174	; 0xae
 8001558:	f7ff fef0 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800155c:	20d5      	movs	r0, #213	; 0xd5
 800155e:	f7ff feed 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x80);
 8001562:	2080      	movs	r0, #128	; 0x80
 8001564:	f7ff feea 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001568:	203f      	movs	r0, #63	; 0x3f
 800156a:	f7ff fee7 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800156e:	20d3      	movs	r0, #211	; 0xd3
 8001570:	f7ff fee4 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fee1 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800157a:	2040      	movs	r0, #64	; 0x40
 800157c:	f7ff fede 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001580:	208d      	movs	r0, #141	; 0x8d
 8001582:	f7ff fedb 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x14);
 8001586:	2014      	movs	r0, #20
 8001588:	f7ff fed8 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800158c:	2020      	movs	r0, #32
 800158e:	f7ff fed5 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fed2 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001598:	20a1      	movs	r0, #161	; 0xa1
 800159a:	f7ff fecf 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800159e:	20c8      	movs	r0, #200	; 0xc8
 80015a0:	f7ff fecc 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80015a4:	20da      	movs	r0, #218	; 0xda
 80015a6:	f7ff fec9 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x12);
 80015aa:	2012      	movs	r0, #18
 80015ac:	f7ff fec6 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80015b0:	2081      	movs	r0, #129	; 0x81
 80015b2:	f7ff fec3 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0xFF);
 80015b6:	20ff      	movs	r0, #255	; 0xff
 80015b8:	f7ff fec0 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80015bc:	20d9      	movs	r0, #217	; 0xd9
 80015be:	f7ff febd 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0xF1);
 80015c2:	20f1      	movs	r0, #241	; 0xf1
 80015c4:	f7ff feba 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80015c8:	20db      	movs	r0, #219	; 0xdb
 80015ca:	f7ff feb7 	bl	800133c <SSD1306_Command>
	SSD1306_Command(0x40);
 80015ce:	2040      	movs	r0, #64	; 0x40
 80015d0:	f7ff feb4 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80015d4:	20a4      	movs	r0, #164	; 0xa4
 80015d6:	f7ff feb1 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80015da:	20a6      	movs	r0, #166	; 0xa6
 80015dc:	f7ff feae 	bl	800133c <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80015e0:	202e      	movs	r0, #46	; 0x2e
 80015e2:	f7ff feab 	bl	800133c <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80015e6:	20af      	movs	r0, #175	; 0xaf
 80015e8:	f7ff fea8 	bl	800133c <SSD1306_Command>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000200 	.word	0x20000200

080015f8 <Read8>:


#include "main.h"
#include "bmp280.h"

uint8_t Read8(BMP280_t *bmp, uint8_t Reg) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Reg, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	b299      	uxth	r1, r3
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	b29a      	uxth	r2, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	9302      	str	r3, [sp, #8]
 800161c:	2301      	movs	r3, #1
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	f107 030f 	add.w	r3, r7, #15
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	f001 ffd6 	bl	80035d8 <HAL_I2C_Mem_Read>

	return Value;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <Write8>:


void Write8(BMP280_t *bmp, uint8_t Reg, uint8_t Value) {
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af04      	add	r7, sp, #16
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
 8001642:	4613      	mov	r3, r2
 8001644:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Reg, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	b299      	uxth	r1, r3
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	b29a      	uxth	r2, r3
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2301      	movs	r3, #1
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	f001 febc 	bl	80033e4 <HAL_I2C_Mem_Write>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Read16>:


uint16_t Read16(BMP280_t *bmp, uint16_t Reg) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
	uint16_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Reg, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	791b      	ldrb	r3, [r3, #4]
 8001688:	b29b      	uxth	r3, r3
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b299      	uxth	r1, r3
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2302      	movs	r3, #2
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	f001 ff99 	bl	80035d8 <HAL_I2C_Mem_Read>

	return ((Value[1]<<8) | (Value[0]));
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	89bb      	ldrh	r3, [r7, #12]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	b29b      	uxth	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <Read24>:

uint32_t Read24(BMP280_t *bmp, uint8_t Register) {
 80016be:	b580      	push	{r7, lr}
 80016c0:	b088      	sub	sp, #32
 80016c2:	af04      	add	r7, sp, #16
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	b299      	uxth	r1, r3
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2303      	movs	r3, #3
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	f001 ff73 	bl	80035d8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	7bba      	ldrb	r2, [r7, #14]
 80016fe:	4313      	orrs	r3, r2
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <BMP280_SetMode>:
//				  ctrl_meas data frame				//
//		| osrs_t[2:0] | osrs_p[2:0] | mode[1:0] |	//
//////////////////////////////////////////////////////

// two last bits of ctrl_meas
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d901      	bls.n	800171e <BMP280_SetMode+0x16>
 800171a:	2303      	movs	r3, #3
 800171c:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800171e:	21f4      	movs	r1, #244	; 0xf4
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff69 	bl	80015f8 <Read8>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; 				// Tmp 	(xxxx xx00)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f023 0303 	bic.w	r3, r3, #3
 8001730:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;				//	   	(0000 0011)
 8001732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	b25a      	sxtb	r2, r3
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	4313      	orrs	r3, r2
 8001742:	b25b      	sxtb	r3, r3
 8001744:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	461a      	mov	r2, r3
 800174a:	21f4      	movs	r1, #244	; 0xf4
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff72 	bl	8001636 <Write8>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <BMP280_SetPressureOversampling>:

// 4,3,2 bits of ctrl_meas
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t P_Oversampling) {
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(P_Oversampling > 5) P_Oversampling = 5;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d901      	bls.n	8001770 <BMP280_SetPressureOversampling+0x16>
 800176c:	2305      	movs	r3, #5
 800176e:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001770:	21f4      	movs	r1, #244	; 0xf4
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff40 	bl	80015f8 <Read8>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; 						// Tmp 	(xxx0 00xx)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 031c 	bic.w	r3, r3, #28
 8001782:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((P_Oversampling<<2) & 0x1C); 	// 		(0001 1100)
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	f003 031c 	and.w	r3, r3, #28
 800178e:	b25a      	sxtb	r2, r3
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001794:	4313      	orrs	r3, r2
 8001796:	b25b      	sxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	461a      	mov	r2, r3
 800179e:	21f4      	movs	r1, #244	; 0xf4
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff48 	bl	8001636 <Write8>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <BMP280_SetTemperatureOversampling>:

// 7,6,5 bits of ctrl_meas
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t T_Oversampling) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(T_Oversampling > 5) T_Oversampling = 5;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d901      	bls.n	80017c4 <BMP280_SetTemperatureOversampling+0x16>
 80017c0:	2305      	movs	r3, #5
 80017c2:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017c4:	21f4      	movs	r1, #244	; 0xf4
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff16 	bl	80015f8 <Read8>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; 						// Tmp 	(000x xxxx)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((T_Oversampling <<5) & 0xE0);	//		(1110 0000)
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	b25a      	sxtb	r2, r3
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	461a      	mov	r2, r3
 80017ec:	21f4      	movs	r1, #244	; 0xf4
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff21 	bl	8001636 <Write8>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <BMP280_ReadTemperatureRaw>:

// return temperature
uint32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	uint32_t Tmp;

	Tmp = Read24(bmp, BMP280_TEMPDATA);
 8001804:	21fa      	movs	r1, #250	; 0xfa
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff59 	bl	80016be <Read24>
 800180c:	60f8      	str	r0, [r7, #12]

	Tmp >>= 4;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001814:	68fb      	ldr	r3, [r7, #12]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <BMP280_ReadPressureRaw>:

// return pressure
uint32_t BMP280_ReadPressureRaw(BMP280_t *bmp) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	uint32_t Tmp;

	Tmp = Read24(bmp, BMP280_PRESSUREDATA);
 8001826:	21f7      	movs	r1, #247	; 0xf7
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff48 	bl	80016be <Read24>
 800182e:	60f8      	str	r0, [r7, #12]

	Tmp >>= 4;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <BMP280_ReadTemperature>:


// Algorithm based on BOSH bmp280 datasheet
float BMP280_ReadTemperature(BMP280_t *bmp) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffd7 	bl	80017fc <BMP280_ReadTemperatureRaw>
 800184e:	4603      	mov	r3, r0
 8001850:	617b      	str	r3, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	10da      	asrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8b5b      	ldrh	r3, [r3, #26]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	12db      	asrs	r3, r3, #11
 800186a:	613b      	str	r3, [r7, #16]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	111b      	asrs	r3, r3, #4
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	8b52      	ldrh	r2, [r2, #26]
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	1112      	asrs	r2, r2, #4
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	8b49      	ldrh	r1, [r1, #26]
 800187e:	1a52      	subs	r2, r2, r1
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	139b      	asrs	r3, r3, #14
 8001892:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	441a      	add	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	621a      	str	r2, [r3, #32]
	T = ((bmp->t_fine) * 5 + 128) >> 8;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3380      	adds	r3, #128	; 0x80
 80018aa:	121b      	asrs	r3, r3, #8
 80018ac:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f7fe fe40 	bl	8000534 <__aeabi_i2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <BMP280_ReadTemperature+0x9c>)
 80018ba:	f7fe ffcf 	bl	800085c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f977 	bl	8000bb8 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	ee07 3a90 	vmov	s15, r3
}
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40590000 	.word	0x40590000

080018e0 <BMP280_ReadPressureAndTemperature>:

uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	*Temperature = BMP280_ReadTemperature(bmp);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff ffa7 	bl	8001840 <BMP280_ReadTemperature>
 80018f2:	eef0 7a40 	vmov.f32	s15, s0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff ff8e 	bl	800181e <BMP280_ReadPressureRaw>
 8001902:	4603      	mov	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]

	var1 = 	(((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	105b      	asrs	r3, r3, #1
 800190c:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001910:	617b      	str	r3, [r7, #20]
	var2 = 	(((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	109b      	asrs	r3, r3, #2
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	1092      	asrs	r2, r2, #2
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	12db      	asrs	r3, r3, #11
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	613b      	str	r3, [r7, #16]
	var2 = 	var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001932:	461a      	mov	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
	var2 = 	(var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	109a      	asrs	r2, r3, #2
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	4413      	add	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
	var1 = 	((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001958:	4619      	mov	r1, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	109b      	asrs	r3, r3, #2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	1092      	asrs	r2, r2, #2
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	135b      	asrs	r3, r3, #13
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	10da      	asrs	r2, r3, #3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001974:	4619      	mov	r1, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	105b      	asrs	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	149b      	asrs	r3, r3, #18
 8001982:	617b      	str	r3, [r7, #20]
	var1 =	((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	8b92      	ldrh	r2, [r2, #28]
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	13db      	asrs	r3, r3, #15
 8001994:	617b      	str	r3, [r7, #20]

	if (var1 == 0) {
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <BMP280_ReadPressureAndTemperature+0xc0>
		return 1; // avoid exception caused by division by zero
 800199c:	2301      	movs	r3, #1
 800199e:	e052      	b.n	8001a46 <BMP280_ReadPressureAndTemperature+0x166>
	}

	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	131b      	asrs	r3, r3, #12
 80019a4:	461a      	mov	r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <BMP280_ReadPressureAndTemperature+0x170>)
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80019b4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80019b8:	61fb      	str	r3, [r7, #28]

	if (p < 0x80000000) {
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db06      	blt.n	80019ce <BMP280_ReadPressureAndTemperature+0xee>
		p = (p << 1) / ((uint32_t)var1);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005a      	lsls	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e005      	b.n	80019da <BMP280_ReadPressureAndTemperature+0xfa>
	}

	else {
		p = (p / (uint32_t)var1) * 2;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
	}

	var1 = 	(((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019e0:	4619      	mov	r1, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	08d2      	lsrs	r2, r2, #3
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	131b      	asrs	r3, r3, #12
 80019f6:	617b      	str	r3, [r7, #20]
	var2 = 	(((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	135b      	asrs	r3, r3, #13
 8001a0a:	613b      	str	r3, [r7, #16]
	p = 	(uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a18:	4413      	add	r3, r2
 8001a1a:	111a      	asrs	r2, r3, #4
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	61fb      	str	r3, [r7, #28]

	*Pressure = (float)(p/100.0);
 8001a22:	69f8      	ldr	r0, [r7, #28]
 8001a24:	f7fe fd76 	bl	8000514 <__aeabi_ui2d>
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <BMP280_ReadPressureAndTemperature+0x174>)
 8001a2e:	f7fe ff15 	bl	800085c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8bd 	bl	8000bb8 <__aeabi_d2f>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	601a      	str	r2, [r3, #0]

	return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	fffff3cb 	.word	0xfffff3cb
 8001a54:	40590000 	.word	0x40590000

08001a58 <BMP280_Init>:




uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t addr) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;
	bmp->bmp_i2c = i2c;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	601a      	str	r2, [r3, #0]
	bmp->Address = addr;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	711a      	strb	r2, [r3, #4]
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001a72:	21d0      	movs	r1, #208	; 0xd0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fdbf 	bl	80015f8 <Read8>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75fb      	strb	r3, [r7, #23]

	if (ChipID != 0x58) {
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b58      	cmp	r3, #88	; 0x58
 8001a82:	d001      	beq.n	8001a88 <BMP280_Init+0x30>
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e06c      	b.n	8001b62 <BMP280_Init+0x10a>
	}

	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001a88:	2188      	movs	r1, #136	; 0x88
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fdf2 	bl	8001674 <Read16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001a98:	218a      	movs	r1, #138	; 0x8a
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fdea 	bl	8001674 <Read16>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001aa8:	218c      	movs	r1, #140	; 0x8c
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fde2 	bl	8001674 <Read16>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001ab8:	218e      	movs	r1, #142	; 0x8e
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fdda 	bl	8001674 <Read16>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001ac8:	2190      	movs	r1, #144	; 0x90
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fdd2 	bl	8001674 <Read16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001ad8:	2192      	movs	r1, #146	; 0x92
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fdca 	bl	8001674 <Read16>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001ae8:	2194      	movs	r1, #148	; 0x94
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fdc2 	bl	8001674 <Read16>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001af8:	2196      	movs	r1, #150	; 0x96
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fdba 	bl	8001674 <Read16>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001b08:	2198      	movs	r1, #152	; 0x98
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fdb2 	bl	8001674 <Read16>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001b18:	219a      	movs	r1, #154	; 0x9a
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fdaa 	bl	8001674 <Read16>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001b28:	219c      	movs	r1, #156	; 0x9c
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fda2 	bl	8001674 <Read16>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001b38:	219e      	movs	r1, #158	; 0x9e
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fd9a 	bl	8001674 <Read16>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	831a      	strh	r2, [r3, #24]


	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001b48:	2105      	movs	r1, #5
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe2f 	bl	80017ae <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001b50:	2105      	movs	r1, #5
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fe01 	bl	800175a <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001b58:	2103      	movs	r1, #3
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fdd4 	bl	8001708 <BMP280_SetMode>

	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_DMA_Init+0x3c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <MX_DMA_Init+0x3c>)
 8001b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_DMA_Init+0x3c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	200c      	movs	r0, #12
 8001b94:	f000 fd61 	bl	800265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b98:	200c      	movs	r0, #12
 8001b9a:	f000 fd7a 	bl	8002692 <HAL_NVIC_EnableIRQ>

}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2120      	movs	r1, #32
 8001c36:	4812      	ldr	r0, [pc, #72]	; (8001c80 <MX_GPIO_Init+0xd4>)
 8001c38:	f001 fa76 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_GPIO_Init+0xd8>)
 8001c54:	f001 f8e4 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_GPIO_Init+0xd4>)
 8001c70:	f001 f8d6 	bl	8002e20 <HAL_GPIO_Init>

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020800 	.word	0x40020800

08001c88 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <MX_I2C1_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc6:	f001 fa49 	bl	800315c <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 f996 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000604 	.word	0x20000604
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	000186a0 	.word	0x000186a0

08001ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <HAL_I2C_MspInit+0xe0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d159      	bne.n	8001dba <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d34:	2304      	movs	r3, #4
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4823      	ldr	r0, [pc, #140]	; (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d40:	f001 f86e 	bl	8002e20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_I2C_MspInit+0xf0>)
 8001d64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001da0:	f000 fc92 	bl	80026c8 <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001daa:	f000 f929 	bl	8002000 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40005400 	.word	0x40005400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	20000658 	.word	0x20000658
 8001dd4:	40026028 	.word	0x40026028

08001dd8 <DataDisplay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DataDisplay() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af02      	add	r7, sp, #8
	if((HAL_GetTick() - SoftTimerBMP) > 10) {
 8001dde:	f000 fb55 	bl	800248c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <DataDisplay+0xac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d910      	bls.n	8001e10 <DataDisplay+0x38>
		  SoftTimerBMP = HAL_GetTick();
 8001dee:	f000 fb4d 	bl	800248c <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <DataDisplay+0xac>)
 8001df6:	6013      	str	r3, [r2, #0]

		  if(Bmp280.bmp_i2c->State == HAL_I2C_STATE_READY) {
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <DataDisplay+0xb0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d104      	bne.n	8001e10 <DataDisplay+0x38>
			  BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temperature);
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <DataDisplay+0xb4>)
 8001e08:	4921      	ldr	r1, [pc, #132]	; (8001e90 <DataDisplay+0xb8>)
 8001e0a:	481f      	ldr	r0, [pc, #124]	; (8001e88 <DataDisplay+0xb0>)
 8001e0c:	f7ff fd68 	bl	80018e0 <BMP280_ReadPressureAndTemperature>
		  }
	}

	if((HAL_GetTick() - SoftTimerSSD) > 1000) {
 8001e10:	f000 fb3c 	bl	800248c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <DataDisplay+0xbc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e20:	d92c      	bls.n	8001e7c <DataDisplay+0xa4>
		  SoftTimerSSD = HAL_GetTick();
 8001e22:	f000 fb33 	bl	800248c <HAL_GetTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <DataDisplay+0xbc>)
 8001e2a:	6013      	str	r3, [r2, #0]

		  sprintf(Message, "Press: %.2f", Pressure);
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <DataDisplay+0xb8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb91 	bl	8000558 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4917      	ldr	r1, [pc, #92]	; (8001e98 <DataDisplay+0xc0>)
 8001e3c:	4817      	ldr	r0, [pc, #92]	; (8001e9c <DataDisplay+0xc4>)
 8001e3e:	f005 fb7d 	bl	800753c <siprintf>
		  GFX_DrawString(1, 1, Message, WHITE, 0);
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <DataDisplay+0xc4>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff f94f 	bl	80010f0 <GFX_DrawString>

		  sprintf(Message, "Temp: %.2f", Temperature);
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <DataDisplay+0xb4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb7e 	bl	8000558 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	490f      	ldr	r1, [pc, #60]	; (8001ea0 <DataDisplay+0xc8>)
 8001e62:	480e      	ldr	r0, [pc, #56]	; (8001e9c <DataDisplay+0xc4>)
 8001e64:	f005 fb6a 	bl	800753c <siprintf>
		  GFX_DrawString(1, 12, Message, WHITE, 0);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <DataDisplay+0xc4>)
 8001e70:	210c      	movs	r1, #12
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff f93c 	bl	80010f0 <GFX_DrawString>

		  SSD1306_Display();
 8001e78:	f7ff fb48 	bl	800150c <SSD1306_Display>
	}
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200006dc 	.word	0x200006dc
 8001e88:	200006b8 	.word	0x200006b8
 8001e8c:	200006e8 	.word	0x200006e8
 8001e90:	200006e4 	.word	0x200006e4
 8001e94:	200006e0 	.word	0x200006e0
 8001e98:	08009a48 	.word	0x08009a48
 8001e9c:	200006ec 	.word	0x200006ec
 8001ea0:	08009a54 	.word	0x08009a54

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea8:	f000 fa8a 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f000 f832 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f7ff fe7c 	bl	8001bac <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb4:	f7ff fe5a 	bl	8001b6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eb8:	f000 f9e6 	bl	8002288 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ebc:	f7ff fee4 	bl	8001c88 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ec0:	f000 f892 	bl	8001fe8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&Bmp280, &hi2c1, 0x76);
 8001ec4:	2276      	movs	r2, #118	; 0x76
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <main+0x5c>)
 8001ec8:	480e      	ldr	r0, [pc, #56]	; (8001f04 <main+0x60>)
 8001eca:	f7ff fdc5 	bl	8001a58 <BMP280_Init>
  SSD1306_Init(&hi2c1);
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <main+0x5c>)
 8001ed0:	f7ff fb3a 	bl	8001548 <SSD1306_Init>
  GFX_SetFont(font_8x5);
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <main+0x64>)
 8001ed6:	f7ff f841 	bl	8000f5c <GFX_SetFont>
  SSD1306_Clear(BLACK);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff faf8 	bl	80014d0 <SSD1306_Clear>

  SSD1306_Display();
 8001ee0:	f7ff fb14 	bl	800150c <SSD1306_Display>

  SoftTimerBMP = HAL_GetTick();
 8001ee4:	f000 fad2 	bl	800248c <HAL_GetTick>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <main+0x68>)
 8001eec:	6013      	str	r3, [r2, #0]
  SoftTimerSSD = HAL_GetTick();
 8001eee:	f000 facd 	bl	800248c <HAL_GetTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <main+0x6c>)
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DataDisplay();
 8001ef8:	f7ff ff6e 	bl	8001dd8 <DataDisplay>
 8001efc:	e7fc      	b.n	8001ef8 <main+0x54>
 8001efe:	bf00      	nop
 8001f00:	20000604 	.word	0x20000604
 8001f04:	200006b8 	.word	0x200006b8
 8001f08:	08009a60 	.word	0x08009a60
 8001f0c:	200006dc 	.word	0x200006dc
 8001f10:	200006e0 	.word	0x200006e0

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fe98 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <SystemClock_Config+0xd0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <SystemClock_Config+0xd0>)
 8001f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <SystemClock_Config+0xd0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f84:	2310      	movs	r3, #16
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f92:	2304      	movs	r3, #4
 8001f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fed8 	bl	8005d50 <HAL_RCC_OscConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fa6:	f000 f82b 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001faa:	230f      	movs	r3, #15
 8001fac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 f93a 	bl	8006240 <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fd2:	f000 f815 	bl	8002000 <Error_Handler>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3750      	adds	r7, #80	; 0x50
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	201f      	movs	r0, #31
 8001ff2:	f000 fb32 	bl	800265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ff6:	201f      	movs	r0, #31
 8001ff8:	f000 fb4b 	bl	8002692 <HAL_NVIC_EnableIRQ>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	e7fe      	b.n	8002008 <Error_Handler+0x8>
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800204a:	2007      	movs	r0, #7
 800204c:	f000 fafa 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a8:	f000 f9dc 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <DMA1_Stream1_IRQHandler+0x10>)
 80020b6:	f000 fc2f 	bl	8002918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000658 	.word	0x20000658

080020c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <I2C1_EV_IRQHandler+0x10>)
 80020ca:	f001 fe0f 	bl	8003cec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000604 	.word	0x20000604

080020d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_kill>:

int _kill(int pid, int sig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020f2:	f004 fd87 	bl	8006c04 <__errno>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2216      	movs	r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
	return -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_exit>:

void _exit (int status)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffe7 	bl	80020e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800211a:	e7fe      	b.n	800211a <_exit+0x12>

0800211c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e00a      	b.n	8002144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800212e:	f3af 8000 	nop.w
 8002132:	4601      	mov	r1, r0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf0      	blt.n	800212e <_read+0x12>
	}

return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e009      	b.n	800217c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf1      	blt.n	8002168 <_write+0x12>
	}
	return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_close>:

int _close(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b6:	605a      	str	r2, [r3, #4]
	return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_isatty>:

int _isatty(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f004 fcec 	bl	8006c04 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20020000 	.word	0x20020000
 8002258:	00000400 	.word	0x00000400
 800225c:	2000070c 	.word	0x2000070c
 8002260:	20000768 	.word	0x20000768

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <MX_USART2_UART_Init+0x50>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022c0:	f004 f9de 	bl	8006680 <HAL_UART_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ca:	f7ff fe99 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000710 	.word	0x20000710
 80022d8:	40004400 	.word	0x40004400

080022dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_UART_MspInit+0x84>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d12b      	bne.n	8002356 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_UART_MspInit+0x88>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002336:	230c      	movs	r3, #12
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002346:	2307      	movs	r3, #7
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_UART_MspInit+0x8c>)
 8002352:	f000 fd65 	bl	8002e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40004400 	.word	0x40004400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002372:	490e      	ldr	r1, [pc, #56]	; (80023ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002388:	4c0b      	ldr	r4, [pc, #44]	; (80023b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002396:	f7ff ff65 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f004 fc39 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7ff fd81 	bl	8001ea4 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023b0:	0800a04c 	.word	0x0800a04c
  ldr r2, =_sbss
 80023b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023b8:	20000768 	.word	0x20000768

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_Init+0x40>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_Init+0x40>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_Init+0x40>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 f92b 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fe0a 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f943 	bl	80026ae <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f90b 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000004 	.word	0x20000004
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000008 	.word	0x20000008

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	2000000c 	.word	0x2000000c
 8002488:	20000754 	.word	0x20000754

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000754 	.word	0x20000754

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff8e 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff29 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff3e 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff8e 	bl	8002598 <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5d 	bl	8002544 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff31 	bl	8002508 <__NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa2 	bl	8002600 <SysTick_Config>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff feda 	bl	800248c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e099      	b.n	8002818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002704:	e00f      	b.n	8002726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002706:	f7ff fec1 	bl	800248c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d908      	bls.n	8002726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e078      	b.n	8002818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e8      	bne.n	8002706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_DMA_Init+0x158>)
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b04      	cmp	r3, #4
 800277e:	d107      	bne.n	8002790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4313      	orrs	r3, r2
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0307 	bic.w	r3, r3, #7
 80027a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d117      	bne.n	80027ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 faab 	bl	8002d28 <DMA_CheckFifoParam>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027e6:	2301      	movs	r3, #1
 80027e8:	e016      	b.n	8002818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa62 	bl	8002cbc <DMA_CalcBaseAndBitshift>
 80027f8:	4603      	mov	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	f010803f 	.word	0xf010803f

08002824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_DMA_Start_IT+0x26>
 8002846:	2302      	movs	r3, #2
 8002848:	e040      	b.n	80028cc <HAL_DMA_Start_IT+0xa8>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12f      	bne.n	80028be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f9f4 	bl	8002c60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	223f      	movs	r2, #63	; 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0216 	orr.w	r2, r2, #22
 8002892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0208 	orr.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e005      	b.n	80028ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00c      	b.n	800290c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2205      	movs	r2, #5
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_DMA_IRQHandler+0x248>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a8e      	ldr	r2, [pc, #568]	; (8002b64 <HAL_DMA_IRQHandler+0x24c>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2208      	movs	r2, #8
 8002944:	409a      	lsls	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01a      	beq.n	8002984 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2208      	movs	r2, #8
 8002972:	409a      	lsls	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2201      	movs	r2, #1
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2204      	movs	r2, #4
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	2204      	movs	r2, #4
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2210      	movs	r2, #16
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d043      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03c      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2210      	movs	r2, #16
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d024      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
 8002a46:	e01f      	b.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e016      	b.n	8002a88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0208 	bic.w	r2, r2, #8
 8002a76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 808f 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8087 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2220      	movs	r2, #32
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d136      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0216 	bic.w	r2, r2, #22
 8002ad0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <HAL_DMA_IRQHandler+0x1da>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0208 	bic.w	r2, r2, #8
 8002b00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	223f      	movs	r2, #63	; 0x3f
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d07e      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
        }
        return;
 8002b2e:	e079      	b.n	8002c24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10d      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e02c      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004
 8002b64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e01e      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0210 	bic.w	r2, r2, #16
 8002b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d032      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2205      	movs	r2, #5
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d307      	bcc.n	8002c00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f2      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x2cc>
 8002bfe:	e000      	b.n	8002c02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
 8002c22:	e000      	b.n	8002c26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c24:	bf00      	nop
    }
  }
}
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3a:	b2db      	uxtb	r3, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d108      	bne.n	8002ca0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c9e:	e007      	b.n	8002cb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3b10      	subs	r3, #16
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <DMA_CalcBaseAndBitshift+0x64>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <DMA_CalcBaseAndBitshift+0x68>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d909      	bls.n	8002cfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8002cfc:	e007      	b.n	8002d0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	aaaaaaab 	.word	0xaaaaaaab
 8002d24:	08009c58 	.word	0x08009c58

08002d28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11f      	bne.n	8002d82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d856      	bhi.n	8002df6 <DMA_CheckFifoParam+0xce>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <DMA_CheckFifoParam+0x28>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d73 	.word	0x08002d73
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	08002df7 	.word	0x08002df7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d046      	beq.n	8002dfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e043      	b.n	8002dfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7a:	d140      	bne.n	8002dfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d80:	e03d      	b.n	8002dfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	d121      	bne.n	8002dd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d837      	bhi.n	8002e02 <DMA_CheckFifoParam+0xda>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <DMA_CheckFifoParam+0x70>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002daf 	.word	0x08002daf
 8002da0:	08002da9 	.word	0x08002da9
 8002da4:	08002dc1 	.word	0x08002dc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e030      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d025      	beq.n	8002e06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dbe:	e022      	b.n	8002e06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dc8:	d11f      	bne.n	8002e0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dce:	e01c      	b.n	8002e0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d903      	bls.n	8002dde <DMA_CheckFifoParam+0xb6>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d003      	beq.n	8002de4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ddc:	e018      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      break;
 8002de2:	e015      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	e00b      	b.n	8002e0e <DMA_CheckFifoParam+0xe6>
      break;
 8002df6:	bf00      	nop
 8002df8:	e00a      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e008      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e006      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e004      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e002      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e159      	b.n	80030f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8148 	bne.w	80030ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d005      	beq.n	8002e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d130      	bne.n	8002ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 0201 	and.w	r2, r3, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d017      	beq.n	8002f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d123      	bne.n	8002f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a2 	beq.w	80030ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b54      	ldr	r3, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x202>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x1fe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_GPIO_Init+0x2f8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x1fa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a46      	ldr	r2, [pc, #280]	; (800311c <HAL_GPIO_Init+0x2fc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x1f6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a45      	ldr	r2, [pc, #276]	; (8003120 <HAL_GPIO_Init+0x300>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x1f2>
 800300e:	2304      	movs	r3, #4
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003012:	2307      	movs	r3, #7
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003034:	4935      	ldr	r1, [pc, #212]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003066:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_GPIO_Init+0x304>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f aea2 	bls.w	8002e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40013800 	.word	0x40013800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e12b      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fdae 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c0:	f003 fa36 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 80031c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a81      	ldr	r2, [pc, #516]	; (80033d0 <HAL_I2C_Init+0x274>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d807      	bhi.n	80031e0 <HAL_I2C_Init+0x84>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_I2C_Init+0x278>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	bf94      	ite	ls
 80031d8:	2301      	movls	r3, #1
 80031da:	2300      	movhi	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e006      	b.n	80031ee <HAL_I2C_Init+0x92>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_I2C_Init+0x27c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bf94      	ite	ls
 80031e8:	2301      	movls	r3, #1
 80031ea:	2300      	movhi	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0e7      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a78      	ldr	r2, [pc, #480]	; (80033dc <HAL_I2C_Init+0x280>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d802      	bhi.n	8003230 <HAL_I2C_Init+0xd4>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3301      	adds	r3, #1
 800322e:	e009      	b.n	8003244 <HAL_I2C_Init+0xe8>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	4a69      	ldr	r2, [pc, #420]	; (80033e0 <HAL_I2C_Init+0x284>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	3301      	adds	r3, #1
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	495c      	ldr	r1, [pc, #368]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003260:	428b      	cmp	r3, r1
 8003262:	d819      	bhi.n	8003298 <HAL_I2C_Init+0x13c>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e59      	subs	r1, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003278:	400b      	ands	r3, r1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_I2C_Init+0x138>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e59      	subs	r1, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fbb1 f3f3 	udiv	r3, r1, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	e051      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003294:	2304      	movs	r3, #4
 8003296:	e04f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <HAL_I2C_Init+0x168>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e012      	b.n	80032ea <HAL_I2C_Init+0x18e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	0099      	lsls	r1, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x196>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10e      	bne.n	8003318 <HAL_I2C_Init+0x1bc>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e58      	subs	r0, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	440b      	add	r3, r1
 8003308:	fbb0 f3f3 	udiv	r3, r0, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	e00f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	6809      	ldr	r1, [r1, #0]
 800333c:	4313      	orrs	r3, r2
 800333e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6911      	ldr	r1, [r2, #16]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68d2      	ldr	r2, [r2, #12]
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	000186a0 	.word	0x000186a0
 80033d4:	001e847f 	.word	0x001e847f
 80033d8:	003d08ff 	.word	0x003d08ff
 80033dc:	431bde83 	.word	0x431bde83
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fe:	f7ff f845 	bl	800248c <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	f040 80d9 	bne.w	80035c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2319      	movs	r3, #25
 8003418:	2201      	movs	r2, #1
 800341a:	496d      	ldr	r1, [pc, #436]	; (80035d0 <HAL_I2C_Mem_Write+0x1ec>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f002 fa6d 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
 800342a:	e0cc      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Write+0x56>
 8003436:	2302      	movs	r3, #2
 8003438:	e0c5      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d007      	beq.n	8003460 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2221      	movs	r2, #33	; 0x21
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a4d      	ldr	r2, [pc, #308]	; (80035d4 <HAL_I2C_Mem_Write+0x1f0>)
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a2:	88f8      	ldrh	r0, [r7, #6]
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4603      	mov	r3, r0
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 feea 	bl	800528c <I2C_RequestMemoryWrite>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d052      	beq.n	8003564 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e081      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f002 faee 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <HAL_I2C_Mem_Write+0x180>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d017      	beq.n	8003564 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1aa      	bne.n	80034c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f002 fada 	bl	8005b2a <I2C_WaitOnBTFFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b04      	cmp	r3, #4
 8003582:	d107      	bne.n	8003594 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e016      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	817b      	strh	r3, [r7, #10]
 80035ea:	460b      	mov	r3, r1
 80035ec:	813b      	strh	r3, [r7, #8]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f2:	f7fe ff4b 	bl	800248c <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b20      	cmp	r3, #32
 8003602:	f040 8208 	bne.w	8003a16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2319      	movs	r3, #25
 800360c:	2201      	movs	r2, #1
 800360e:	497b      	ldr	r1, [pc, #492]	; (80037fc <HAL_I2C_Mem_Read+0x224>)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f002 f973 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	e1fb      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2C_Mem_Read+0x56>
 800362a:	2302      	movs	r3, #2
 800362c:	e1f4      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d007      	beq.n	8003654 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2222      	movs	r2, #34	; 0x22
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a5b      	ldr	r2, [pc, #364]	; (8003800 <HAL_I2C_Mem_Read+0x228>)
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003696:	88f8      	ldrh	r0, [r7, #6]
 8003698:	893a      	ldrh	r2, [r7, #8]
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4603      	mov	r3, r0
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f001 fe86 	bl	80053b8 <I2C_RequestMemoryRead>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1b0      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	623b      	str	r3, [r7, #32]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e184      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11b      	bne.n	8003726 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e164      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	2b02      	cmp	r3, #2
 800372c:	d11b      	bne.n	8003766 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	e144      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800377c:	e138      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	2b03      	cmp	r3, #3
 8003784:	f200 80f1 	bhi.w	800396a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	2b01      	cmp	r3, #1
 800378e:	d123      	bne.n	80037d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f002 fa3b 	bl	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e139      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d6:	e10b      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d14e      	bne.n	800387e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2200      	movs	r2, #0
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <HAL_I2C_Mem_Read+0x22c>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f002 f886 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e10e      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
 80037fa:	bf00      	nop
 80037fc:	00100002 	.word	0x00100002
 8003800:	ffff0000 	.word	0xffff0000
 8003804:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800387c:	e0b8      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	4966      	ldr	r1, [pc, #408]	; (8003a20 <HAL_I2C_Mem_Read+0x448>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f002 f837 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0bf      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	2200      	movs	r2, #0
 80038e2:	494f      	ldr	r1, [pc, #316]	; (8003a20 <HAL_I2C_Mem_Read+0x448>)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f002 f809 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e091      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003968:	e042      	b.n	80039f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f002 f94e 	bl	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e04c      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d118      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f aec2 	bne.w	800377e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	00010004 	.word	0x00010004

08003a24 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	461a      	mov	r2, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	460b      	mov	r3, r1
 8003a38:	813b      	strh	r3, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a42:	f7fe fd23 	bl	800248c <HAL_GetTick>
 8003a46:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	f040 8145 	bne.w	8003ce0 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a56:	4b9d      	ldr	r3, [pc, #628]	; (8003ccc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	4a9c      	ldr	r2, [pc, #624]	; (8003cd0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0a1a      	lsrs	r2, r3, #8
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e11b      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d0db      	beq.n	8003a70 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Mem_Write_DMA+0xa2>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e10d      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d007      	beq.n	8003aec <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2221      	movs	r2, #33	; 0x21
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b2e:	897a      	ldrh	r2, [r7, #10]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003b34:	893a      	ldrh	r2, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a9 	beq.w	8003ca2 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02a      	beq.n	8003bae <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2200      	movs	r2, #0
 8003b86:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	4619      	mov	r1, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3310      	adds	r3, #16
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	f7fe fe41 	bl	8002824 <HAL_DMA_Start_IT>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003ba6:	7efb      	ldrb	r3, [r7, #27]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d166      	bne.n	8003c7a <HAL_I2C_Mem_Write_DMA+0x256>
 8003bac:	e013      	b.n	8003bd6 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e085      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003bd6:	88f8      	ldrh	r0, [r7, #6]
 8003bd8:	893a      	ldrh	r2, [r7, #8]
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2323      	movs	r3, #35	; 0x23
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f001 fb50 	bl	800528c <I2C_RequestMemoryWrite>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d022      	beq.n	8003c38 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fe6c 	bl	80028d4 <HAL_DMA_Abort_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c16:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e054      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c74:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e033      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e01f      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00b      	b.n	8003ce2 <HAL_I2C_Mem_Write_DMA+0x2be>
 8003cca:	bf00      	nop
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	14f8b589 	.word	0x14f8b589
 8003cd4:	ffff0000 	.word	0xffff0000
 8003cd8:	08005589 	.word	0x08005589
 8003cdc:	08005733 	.word	0x08005733
    }
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop

08003cec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d003      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x38>
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	f040 80c1 	bne.w	8003ea6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <HAL_I2C_EV_IRQHandler+0x6e>
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d44:	d003      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x62>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_EV_IRQHandler+0x66>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_I2C_EV_IRQHandler+0x68>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f000 8132 	beq.w	8003fbe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_I2C_EV_IRQHandler+0x92>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	0a5b      	lsrs	r3, r3, #9
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f001 ffd2 	bl	8005d1a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fcdc 	bl	8004734 <I2C_Master_SB>
 8003d7c:	e092      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	08db      	lsrs	r3, r3, #3
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0xb2>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	0a5b      	lsrs	r3, r3, #9
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fd52 	bl	8004840 <I2C_Master_ADD10>
 8003d9c:	e082      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0xd2>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fd6c 	bl	8004894 <I2C_Master_ADDR>
 8003dbc:	e072      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03b      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd8:	f000 80f3 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	09db      	lsrs	r3, r3, #7
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00f      	beq.n	8003e08 <HAL_I2C_EV_IRQHandler+0x11c>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_I2C_EV_IRQHandler+0x11c>
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f94c 	bl	800409e <I2C_MasterTransmit_TXE>
 8003e06:	e04d      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80d6 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	0a5b      	lsrs	r3, r3, #9
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80cf 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b21      	cmp	r3, #33	; 0x21
 8003e28:	d103      	bne.n	8003e32 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9d3 	bl	80041d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e30:	e0c7      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	f040 80c4 	bne.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa41 	bl	80042c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e40:	e0bf      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e50:	f000 80b7 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00f      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x194>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x194>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fab6 	bl	80043ea <I2C_MasterReceive_RXNE>
 8003e7e:	e011      	b.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 809a 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	0a5b      	lsrs	r3, r3, #9
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8093 	beq.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb5f 	bl	8004560 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea2:	e08e      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ea4:	e08d      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e007      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d012      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0x20e>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	0a5b      	lsrs	r3, r3, #9
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00c      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ef0:	69b9      	ldr	r1, [r7, #24]
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ff1d 	bl	8004d32 <I2C_Slave_ADDR>
 8003ef8:	e066      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x22e>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	0a5b      	lsrs	r3, r3, #9
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 ff58 	bl	8004dc8 <I2C_Slave_STOPF>
 8003f18:	e056      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f1a:	7bbb      	ldrb	r3, [r7, #14]
 8003f1c:	2b21      	cmp	r3, #33	; 0x21
 8003f1e:	d002      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x23a>
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	2b29      	cmp	r3, #41	; 0x29
 8003f24:	d125      	bne.n	8003f72 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	09db      	lsrs	r3, r3, #7
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00f      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x266>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	0a9b      	lsrs	r3, r3, #10
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x266>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fe33 	bl	8004bb6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f50:	e039      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d033      	beq.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	0a5b      	lsrs	r3, r3, #9
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02d      	beq.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fe60 	bl	8004c30 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f70:	e029      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00f      	beq.n	8003f9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	0a9b      	lsrs	r3, r3, #10
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fe6b 	bl	8004c72 <I2C_SlaveReceive_RXNE>
 8003f9c:	e014      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	0a5b      	lsrs	r3, r3, #9
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fe99 	bl	8004cee <I2C_SlaveReceive_BTF>
 8003fbc:	e004      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fc6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	70fb      	strb	r3, [r7, #3]
 800402a:	4613      	mov	r3, r2
 800402c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d150      	bne.n	8004166 <I2C_MasterTransmit_TXE+0xc8>
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b21      	cmp	r3, #33	; 0x21
 80040c8:	d14d      	bne.n	8004166 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d01d      	beq.n	800410c <I2C_MasterTransmit_TXE+0x6e>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d01a      	beq.n	800410c <I2C_MasterTransmit_TXE+0x6e>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040dc:	d016      	beq.n	800410c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2211      	movs	r2, #17
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff62 	bl	8003fce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800410a:	e060      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800411a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d107      	bne.n	8004156 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ff7d 	bl	800404e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004154:	e03b      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff35 	bl	8003fce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004164:	e033      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b21      	cmp	r3, #33	; 0x21
 800416a:	d005      	beq.n	8004178 <I2C_MasterTransmit_TXE+0xda>
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d12d      	bne.n	80041ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b22      	cmp	r3, #34	; 0x22
 8004176:	d12a      	bne.n	80041ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d108      	bne.n	8004194 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004190:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004192:	e01c      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d103      	bne.n	80041a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f88e 	bl	80042c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80041a6:	e012      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041cc:	e7ff      	b.n	80041ce <I2C_MasterTransmit_TXE+0x130>
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	d164      	bne.n	80042ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d012      	beq.n	8004220 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800421e:	e04c      	b.n	80042ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d01d      	beq.n	8004262 <I2C_MasterTransmit_BTF+0x8c>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b20      	cmp	r3, #32
 800422a:	d01a      	beq.n	8004262 <I2C_MasterTransmit_BTF+0x8c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004232:	d016      	beq.n	8004262 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004242:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2211      	movs	r2, #17
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff feb7 	bl	8003fce <HAL_I2C_MasterTxCpltCallback>
}
 8004260:	e02b      	b.n	80042ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004270:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004280:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d107      	bne.n	80042ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fed2 	bl	800404e <HAL_I2C_MemTxCpltCallback>
}
 80042aa:	e006      	b.n	80042ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fe8a 	bl	8003fce <HAL_I2C_MasterTxCpltCallback>
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11d      	bne.n	8004316 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10b      	bne.n	80042fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042f8:	e073      	b.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fe:	b29b      	uxth	r3, r3
 8004300:	121b      	asrs	r3, r3, #8
 8004302:	b2da      	uxtb	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004314:	e065      	b.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10b      	bne.n	8004336 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	b2da      	uxtb	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004334:	e055      	b.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433a:	2b02      	cmp	r3, #2
 800433c:	d151      	bne.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b22      	cmp	r3, #34	; 0x22
 8004342:	d10d      	bne.n	8004360 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004352:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800435e:	e040      	b.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d015      	beq.n	8004396 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b21      	cmp	r3, #33	; 0x21
 800436e:	d112      	bne.n	8004396 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004394:	e025      	b.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d120      	bne.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b21      	cmp	r3, #33	; 0x21
 80043a4:	d11d      	bne.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fe36 	bl	800404e <HAL_I2C_MemTxCpltCallback>
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b22      	cmp	r3, #34	; 0x22
 80043fc:	f040 80ac 	bne.w	8004558 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d921      	bls.n	8004452 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b03      	cmp	r3, #3
 800443c:	f040 808c 	bne.w	8004558 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004450:	e082      	b.n	8004558 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	2b02      	cmp	r3, #2
 8004458:	d075      	beq.n	8004546 <I2C_MasterReceive_RXNE+0x15c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <I2C_MasterReceive_RXNE+0x7c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d16f      	bne.n	8004546 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 fba0 	bl	8005bac <I2C_WaitOnSTOPRequestThroughIT>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d142      	bne.n	80044f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004480:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004490:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d10a      	bne.n	80044e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fdc1 	bl	8004062 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044e0:	e03a      	b.n	8004558 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2212      	movs	r2, #18
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fd76 	bl	8003fe2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044f6:	e02f      	b.n	8004558 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004506:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fd99 	bl	8004076 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004544:	e008      	b.n	8004558 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	605a      	str	r2, [r3, #4]
}
 8004556:	e7ff      	b.n	8004558 <I2C_MasterReceive_RXNE+0x16e>
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b04      	cmp	r3, #4
 8004576:	d11b      	bne.n	80045b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80045ae:	e0bd      	b.n	800472c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d129      	bne.n	800460e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d00a      	beq.n	80045e6 <I2C_MasterReceive_BTF+0x86>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800460c:	e08e      	b.n	800472c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d176      	bne.n	8004706 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d002      	beq.n	8004624 <I2C_MasterReceive_BTF+0xc4>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b10      	cmp	r3, #16
 8004622:	d108      	bne.n	8004636 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e019      	b.n	800466a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d002      	beq.n	8004642 <I2C_MasterReceive_BTF+0xe2>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d108      	bne.n	8004654 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00a      	b.n	800466a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b10      	cmp	r3, #16
 8004658:	d007      	beq.n	800466a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004668:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d10a      	bne.n	80046f0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fcba 	bl	8004062 <HAL_I2C_MemRxCpltCallback>
}
 80046ee:	e01d      	b.n	800472c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2212      	movs	r2, #18
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fc6f 	bl	8003fe2 <HAL_I2C_MasterRxCpltCallback>
}
 8004704:	e012      	b.n	800472c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d117      	bne.n	8004778 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004760:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004762:	e067      	b.n	8004834 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]
}
 8004776:	e05d      	b.n	8004834 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004780:	d133      	bne.n	80047ea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d109      	bne.n	80047a2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800479e:	611a      	str	r2, [r3, #16]
 80047a0:	e008      	b.n	80047b4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <I2C_Master_SB+0x92>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d108      	bne.n	80047d8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d032      	beq.n	8004834 <I2C_Master_SB+0x100>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02d      	beq.n	8004834 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e6:	605a      	str	r2, [r3, #4]
}
 80047e8:	e024      	b.n	8004834 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10e      	bne.n	8004810 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	11db      	asrs	r3, r3, #7
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 0306 	and.w	r3, r3, #6
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f063 030f 	orn	r3, r3, #15
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]
}
 800480e:	e011      	b.n	8004834 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10d      	bne.n	8004834 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	b29b      	uxth	r3, r3
 800481e:	11db      	asrs	r3, r3, #7
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f063 030e 	orn	r3, r3, #14
 800482c:	b2da      	uxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	b2da      	uxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <I2C_Master_ADD10+0x26>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <I2C_Master_ADD10+0x48>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004886:	605a      	str	r2, [r3, #4]
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004894:	b480      	push	{r7}
 8004896:	b091      	sub	sp, #68	; 0x44
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b22      	cmp	r3, #34	; 0x22
 80048bc:	f040 8169 	bne.w	8004b92 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <I2C_Master_ADDR+0x54>
 80048c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d10b      	bne.n	80048e8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d0:	2300      	movs	r3, #0
 80048d2:	633b      	str	r3, [r7, #48]	; 0x30
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	e160      	b.n	8004baa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11d      	bne.n	800492c <I2C_Master_ADDR+0x98>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048f8:	d118      	bne.n	800492c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
 800492a:	e13e      	b.n	8004baa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d113      	bne.n	800495e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e115      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 808a 	bne.w	8004a7e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004970:	d137      	bne.n	80049e2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004990:	d113      	bne.n	80049ba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	e0e7      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e0d3      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d02e      	beq.n	8004a46 <I2C_Master_ADDR+0x1b2>
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d02b      	beq.n	8004a46 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	2b12      	cmp	r3, #18
 80049f2:	d102      	bne.n	80049fa <I2C_Master_ADDR+0x166>
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d125      	bne.n	8004a46 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d00e      	beq.n	8004a1e <I2C_Master_ADDR+0x18a>
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d00b      	beq.n	8004a1e <I2C_Master_ADDR+0x18a>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d008      	beq.n	8004a1e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e007      	b.n	8004a2e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	e0a1      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e085      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d14d      	bne.n	8004b24 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d016      	beq.n	8004abc <I2C_Master_ADDR+0x228>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d013      	beq.n	8004abc <I2C_Master_ADDR+0x228>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d010      	beq.n	8004abc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e007      	b.n	8004acc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d117      	bne.n	8004b0c <I2C_Master_ADDR+0x278>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae2:	d00b      	beq.n	8004afc <I2C_Master_ADDR+0x268>
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d008      	beq.n	8004afc <I2C_Master_ADDR+0x268>
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d005      	beq.n	8004afc <I2C_Master_ADDR+0x268>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d002      	beq.n	8004afc <I2C_Master_ADDR+0x268>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d107      	bne.n	8004b0c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	e032      	b.n	8004b8a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b32:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d117      	bne.n	8004b74 <I2C_Master_ADDR+0x2e0>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4a:	d00b      	beq.n	8004b64 <I2C_Master_ADDR+0x2d0>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d008      	beq.n	8004b64 <I2C_Master_ADDR+0x2d0>
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d005      	beq.n	8004b64 <I2C_Master_ADDR+0x2d0>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d002      	beq.n	8004b64 <I2C_Master_ADDR+0x2d0>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d107      	bne.n	8004b74 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b90:	e00b      	b.n	8004baa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	e7ff      	b.n	8004baa <I2C_Master_ADDR+0x316>
 8004baa:	bf00      	nop
 8004bac:	3744      	adds	r7, #68	; 0x44
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02b      	beq.n	8004c28 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d114      	bne.n	8004c28 <I2C_SlaveTransmit_TXE+0x72>
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b29      	cmp	r3, #41	; 0x29
 8004c02:	d111      	bne.n	8004c28 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2221      	movs	r2, #33	; 0x21
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2228      	movs	r2, #40	; 0x28
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f9e7 	bl	8003ff6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d011      	beq.n	8004c66 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02c      	beq.n	8004ce6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d114      	bne.n	8004ce6 <I2C_SlaveReceive_RXNE+0x74>
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc0:	d111      	bne.n	8004ce6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2222      	movs	r2, #34	; 0x22
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2228      	movs	r2, #40	; 0x28
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff f992 	bl	800400a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d4c:	2b28      	cmp	r3, #40	; 0x28
 8004d4e:	d127      	bne.n	8004da0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	81bb      	strh	r3, [r7, #12]
 8004d82:	e002      	b.n	8004d8a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d92:	89ba      	ldrh	r2, [r7, #12]
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff f940 	bl	800401e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d9e:	e00e      	b.n	8004dbe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e24:	d172      	bne.n	8004f0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b22      	cmp	r3, #34	; 0x22
 8004e2a:	d002      	beq.n	8004e32 <I2C_Slave_STOPF+0x6a>
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e30:	d135      	bne.n	8004e9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd fede 	bl	8002c2c <HAL_DMA_GetState>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d049      	beq.n	8004f0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	4a69      	ldr	r2, [pc, #420]	; (8005020 <I2C_Slave_STOPF+0x258>)
 8004e7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd fd26 	bl	80028d4 <HAL_DMA_Abort_IT>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d03d      	beq.n	8004f0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e9c:	e035      	b.n	8004f0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fd fea8 	bl	8002c2c <HAL_DMA_GetState>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d014      	beq.n	8004f0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	4a4e      	ldr	r2, [pc, #312]	; (8005020 <I2C_Slave_STOPF+0x258>)
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd fcf0 	bl	80028d4 <HAL_DMA_Abort_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
 8004f08:	e000      	b.n	8004f0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03e      	beq.n	8004f94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d112      	bne.n	8004f4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d112      	bne.n	8004f7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f843 	bl	8005028 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004fa2:	e039      	b.n	8005018 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d109      	bne.n	8004fbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2228      	movs	r2, #40	; 0x28
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff f826 	bl	800400a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b28      	cmp	r3, #40	; 0x28
 8004fc8:	d111      	bne.n	8004fee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <I2C_Slave_STOPF+0x25c>)
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff f827 	bl	800403a <HAL_I2C_ListenCpltCallback>
}
 8004fec:	e014      	b.n	8005018 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	2b22      	cmp	r3, #34	; 0x22
 8004ff4:	d002      	beq.n	8004ffc <I2C_Slave_STOPF+0x234>
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b22      	cmp	r3, #34	; 0x22
 8004ffa:	d10d      	bne.n	8005018 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fe fff9 	bl	800400a <HAL_I2C_SlaveRxCpltCallback>
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	080057ad 	.word	0x080057ad
 8005024:	ffff0000 	.word	0xffff0000

08005028 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	2b10      	cmp	r3, #16
 8005044:	d002      	beq.n	800504c <I2C_ITError+0x24>
 8005046:	7bbb      	ldrb	r3, [r7, #14]
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d10a      	bne.n	8005062 <I2C_ITError+0x3a>
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b22      	cmp	r3, #34	; 0x22
 8005050:	d107      	bne.n	8005062 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005060:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005068:	2b28      	cmp	r3, #40	; 0x28
 800506a:	d107      	bne.n	800507c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2228      	movs	r2, #40	; 0x28
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800507a:	e015      	b.n	80050a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508a:	d00a      	beq.n	80050a2 <I2C_ITError+0x7a>
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b60      	cmp	r3, #96	; 0x60
 8005090:	d007      	beq.n	80050a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d162      	bne.n	800517e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d020      	beq.n	8005118 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <I2C_ITError+0x25c>)
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fbf6 	bl	80028d4 <HAL_DMA_Abort_IT>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8089 	beq.w	8005202 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005112:	4610      	mov	r0, r2
 8005114:	4798      	blx	r3
 8005116:	e074      	b.n	8005202 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	4a59      	ldr	r2, [pc, #356]	; (8005284 <I2C_ITError+0x25c>)
 800511e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd fbd5 	bl	80028d4 <HAL_DMA_Abort_IT>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d068      	beq.n	8005202 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d10b      	bne.n	8005156 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
 800517c:	e041      	b.n	8005202 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b60      	cmp	r3, #96	; 0x60
 8005188:	d125      	bne.n	80051d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d10b      	bne.n	80051be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fe ff5b 	bl	800408a <HAL_I2C_AbortCpltCallback>
 80051d4:	e015      	b.n	8005202 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d10b      	bne.n	80051fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fe ff3a 	bl	8004076 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10e      	bne.n	8005230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d113      	bne.n	800527c <I2C_ITError+0x254>
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b28      	cmp	r3, #40	; 0x28
 8005258:	d110      	bne.n	800527c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <I2C_ITError+0x260>)
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fe fedf 	bl	800403a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	080057ad 	.word	0x080057ad
 8005288:	ffff0000 	.word	0xffff0000

0800528c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	4608      	mov	r0, r1
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	4603      	mov	r3, r0
 800529c:	817b      	strh	r3, [r7, #10]
 800529e:	460b      	mov	r3, r1
 80052a0:	813b      	strh	r3, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2200      	movs	r2, #0
 80052be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fb1a 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052dc:	d103      	bne.n	80052e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e05f      	b.n	80053aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	492d      	ldr	r1, [pc, #180]	; (80053b4 <I2C_RequestMemoryWrite+0x128>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fb52 	bl	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e04c      	b.n	80053aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	6a39      	ldr	r1, [r7, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fbbc 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b04      	cmp	r3, #4
 800533c:	d107      	bne.n	800534e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e02b      	b.n	80053aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005358:	893b      	ldrh	r3, [r7, #8]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	611a      	str	r2, [r3, #16]
 8005362:	e021      	b.n	80053a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	b29b      	uxth	r3, r3
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	6a39      	ldr	r1, [r7, #32]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fb96 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b04      	cmp	r3, #4
 8005388:	d107      	bne.n	800539a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e005      	b.n	80053aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800539e:	893b      	ldrh	r3, [r7, #8]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	00010002 	.word	0x00010002

080053b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fa7c 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005418:	d103      	bne.n	8005422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0aa      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	4952      	ldr	r1, [pc, #328]	; (8005584 <I2C_RequestMemoryRead+0x1cc>)
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fab4 	bl	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e097      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	6a39      	ldr	r1, [r7, #32]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fb1e 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2b04      	cmp	r3, #4
 8005478:	d107      	bne.n	800548a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e076      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d105      	bne.n	80054a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005494:	893b      	ldrh	r3, [r7, #8]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]
 800549e:	e021      	b.n	80054e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054a0:	893b      	ldrh	r3, [r7, #8]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b0:	6a39      	ldr	r1, [r7, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 faf8 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d107      	bne.n	80054d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e050      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054da:	893b      	ldrh	r3, [r7, #8]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e6:	6a39      	ldr	r1, [r7, #32]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fadd 	bl	8005aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00d      	beq.n	8005510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d107      	bne.n	800550c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e035      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2200      	movs	r2, #0
 8005528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f9e5 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d103      	bne.n	8005550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e013      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	4906      	ldr	r1, [pc, #24]	; (8005584 <I2C_RequestMemoryRead+0x1cc>)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fa1d 	bl	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	00010002 	.word	0x00010002

08005588 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	2200      	movs	r2, #0
 80055ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	2200      	movs	r2, #0
 80055da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80055e2:	2b21      	cmp	r3, #33	; 0x21
 80055e4:	d007      	beq.n	80055f6 <I2C_DMAXferCplt+0x6e>
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80055ec:	2b22      	cmp	r3, #34	; 0x22
 80055ee:	d131      	bne.n	8005654 <I2C_DMAXferCplt+0xcc>
 80055f0:	7cbb      	ldrb	r3, [r7, #18]
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d12e      	bne.n	8005654 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005604:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b29      	cmp	r3, #41	; 0x29
 8005610:	d10a      	bne.n	8005628 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2221      	movs	r2, #33	; 0x21
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2228      	movs	r2, #40	; 0x28
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7fe fce8 	bl	8003ff6 <HAL_I2C_SlaveTxCpltCallback>
 8005626:	e00c      	b.n	8005642 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b2a      	cmp	r3, #42	; 0x2a
 800562c:	d109      	bne.n	8005642 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2222      	movs	r2, #34	; 0x22
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2228      	movs	r2, #40	; 0x28
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800563c:	6978      	ldr	r0, [r7, #20]
 800563e:	f7fe fce4 	bl	800400a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005650:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005652:	e06a      	b.n	800572a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d064      	beq.n	800572a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d107      	bne.n	800567a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005678:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005688:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005690:	d009      	beq.n	80056a6 <I2C_DMAXferCplt+0x11e>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d006      	beq.n	80056a6 <I2C_DMAXferCplt+0x11e>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800569e:	d002      	beq.n	80056a6 <I2C_DMAXferCplt+0x11e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d107      	bne.n	80056b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80056e4:	6978      	ldr	r0, [r7, #20]
 80056e6:	f7fe fcc6 	bl	8004076 <HAL_I2C_ErrorCallback>
}
 80056ea:	e01e      	b.n	800572a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d10a      	bne.n	8005716 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f7fe fca7 	bl	8004062 <HAL_I2C_MemRxCpltCallback>
}
 8005714:	e009      	b.n	800572a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2212      	movs	r2, #18
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f7fe fc5c 	bl	8003fe2 <HAL_I2C_MasterRxCpltCallback>
}
 800572a:	bf00      	nop
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	2200      	movs	r2, #0
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	2200      	movs	r2, #0
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fd fa71 	bl	8002c48 <HAL_DMA_GetError>
 8005766:	4603      	mov	r3, r0
 8005768:	2b02      	cmp	r3, #2
 800576a:	d01b      	beq.n	80057a4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0210 	orr.w	r2, r3, #16
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7fe fc69 	bl	8004076 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057c6:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <I2C_DMAAbort+0x148>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	08db      	lsrs	r3, r3, #3
 80057cc:	4a4a      	ldr	r2, [pc, #296]	; (80058f8 <I2C_DMAAbort+0x14c>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	0a1a      	lsrs	r2, r3, #8
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00da      	lsls	r2, r3, #3
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80057f2:	e00a      	b.n	800580a <I2C_DMAAbort+0x5e>
    }
    count--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005808:	d0ea      	beq.n	80057e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	2200      	movs	r2, #0
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	2200      	movs	r2, #0
 8005828:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	2200      	movs	r2, #0
 800584e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b60      	cmp	r3, #96	; 0x60
 800587a:	d10e      	bne.n	800589a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f7fe fbf9 	bl	800408a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005898:	e027      	b.n	80058ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058a0:	2b28      	cmp	r3, #40	; 0x28
 80058a2:	d117      	bne.n	80058d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2228      	movs	r2, #40	; 0x28
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058d2:	e007      	b.n	80058e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80058e4:	6978      	ldr	r0, [r7, #20]
 80058e6:	f7fe fbc6 	bl	8004076 <HAL_I2C_ErrorCallback>
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000004 	.word	0x20000004
 80058f8:	14f8b589 	.word	0x14f8b589

080058fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800590c:	e025      	b.n	800595a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d021      	beq.n	800595a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fc fdb9 	bl	800248c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d116      	bne.n	800595a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e023      	b.n	80059a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10d      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	43da      	mvns	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4013      	ands	r3, r2
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	e00c      	b.n	800599a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	43da      	mvns	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4013      	ands	r3, r2
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	429a      	cmp	r2, r3
 800599e:	d0b6      	beq.n	800590e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059b8:	e051      	b.n	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c8:	d123      	bne.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0204 	orr.w	r2, r3, #4
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e046      	b.n	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d021      	beq.n	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fc fd37 	bl	800248c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d116      	bne.n	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e020      	b.n	8005aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10c      	bne.n	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	43da      	mvns	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4013      	ands	r3, r2
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bf14      	ite	ne
 8005a7a:	2301      	movne	r3, #1
 8005a7c:	2300      	moveq	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	e00b      	b.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d18d      	bne.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab4:	e02d      	b.n	8005b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f900 	bl	8005cbc <I2C_IsAcknowledgeFailed>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e02d      	b.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d021      	beq.n	8005b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fc fcdd 	bl	800248c <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d116      	bne.n	8005b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e007      	b.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1c:	2b80      	cmp	r3, #128	; 0x80
 8005b1e:	d1ca      	bne.n	8005ab6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b36:	e02d      	b.n	8005b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8bf 	bl	8005cbc <I2C_IsAcknowledgeFailed>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e02d      	b.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d021      	beq.n	8005b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b50:	f7fc fc9c 	bl	800248c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e007      	b.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d1ca      	bne.n	8005b38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	0a1a      	lsrs	r2, r3, #8
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d107      	bne.n	8005bea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e008      	b.n	8005bfc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf8:	d0e9      	beq.n	8005bce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000004 	.word	0x20000004
 8005c0c:	14f8b589 	.word	0x14f8b589

08005c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c1c:	e042      	b.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d119      	bne.n	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0210 	mvn.w	r2, #16
 8005c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e029      	b.n	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fc fc14 	bl	800248c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e007      	b.n	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d1b5      	bne.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d11b      	bne.n	8005d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005d2a:	d103      	bne.n	8005d34 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d32:	e007      	b.n	8005d44 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d3c:	d102      	bne.n	8005d44 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2208      	movs	r2, #8
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e267      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d075      	beq.n	8005e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d6e:	4b88      	ldr	r3, [pc, #544]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d00c      	beq.n	8005d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7a:	4b85      	ldr	r3, [pc, #532]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d112      	bne.n	8005dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d86:	4b82      	ldr	r3, [pc, #520]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d92:	d10b      	bne.n	8005dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d94:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d05b      	beq.n	8005e58 <HAL_RCC_OscConfig+0x108>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d157      	bne.n	8005e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e242      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x74>
 8005db6:	4b76      	ldr	r3, [pc, #472]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a75      	ldr	r2, [pc, #468]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e01d      	b.n	8005e00 <HAL_RCC_OscConfig+0xb0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x98>
 8005dce:	4b70      	ldr	r3, [pc, #448]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6f      	ldr	r2, [pc, #444]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6c      	ldr	r2, [pc, #432]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e00b      	b.n	8005e00 <HAL_RCC_OscConfig+0xb0>
 8005de8:	4b69      	ldr	r3, [pc, #420]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a68      	ldr	r2, [pc, #416]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4b66      	ldr	r3, [pc, #408]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a65      	ldr	r2, [pc, #404]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fc fb40 	bl	800248c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fc fb3c 	bl	800248c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e207      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	4b5b      	ldr	r3, [pc, #364]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0xc0>
 8005e2e:	e014      	b.n	8005e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fc fb2c 	bl	800248c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fc fb28 	bl	800248c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1f3      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4a:	4b51      	ldr	r3, [pc, #324]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0xe8>
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d063      	beq.n	8005f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e66:	4b4a      	ldr	r3, [pc, #296]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e72:	4b47      	ldr	r3, [pc, #284]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d11c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e7e:	4b44      	ldr	r3, [pc, #272]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d116      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8a:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x152>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e1c7      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea2:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4937      	ldr	r1, [pc, #220]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb6:	e03a      	b.n	8005f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d020      	beq.n	8005f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ec0:	4b34      	ldr	r3, [pc, #208]	; (8005f94 <HAL_RCC_OscConfig+0x244>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fae1 	bl	800248c <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ece:	f7fc fadd 	bl	800248c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1a8      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eec:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4925      	ldr	r1, [pc, #148]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
 8005f00:	e015      	b.n	8005f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_OscConfig+0x244>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc fac0 	bl	800248c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f10:	f7fc fabc 	bl	800248c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e187      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d036      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <HAL_RCC_OscConfig+0x248>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f48:	f7fc faa0 	bl	800248c <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f50:	f7fc fa9c 	bl	800248c <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e167      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_OscConfig+0x240>)
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x200>
 8005f6e:	e01b      	b.n	8005fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <HAL_RCC_OscConfig+0x248>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f76:	f7fc fa89 	bl	800248c <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f7c:	e00e      	b.n	8005f9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f7e:	f7fc fa85 	bl	800248c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d907      	bls.n	8005f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e150      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
 8005f90:	40023800 	.word	0x40023800
 8005f94:	42470000 	.word	0x42470000
 8005f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f9c:	4b88      	ldr	r3, [pc, #544]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ea      	bne.n	8005f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8097 	beq.w	80060e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fba:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10f      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	4b7d      	ldr	r3, [pc, #500]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	4a7c      	ldr	r2, [pc, #496]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd6:	4b7a      	ldr	r3, [pc, #488]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe6:	4b77      	ldr	r3, [pc, #476]	; (80061c4 <HAL_RCC_OscConfig+0x474>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d118      	bne.n	8006024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff2:	4b74      	ldr	r3, [pc, #464]	; (80061c4 <HAL_RCC_OscConfig+0x474>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a73      	ldr	r2, [pc, #460]	; (80061c4 <HAL_RCC_OscConfig+0x474>)
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffe:	f7fc fa45 	bl	800248c <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006006:	f7fc fa41 	bl	800248c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e10c      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006018:	4b6a      	ldr	r3, [pc, #424]	; (80061c4 <HAL_RCC_OscConfig+0x474>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0f0      	beq.n	8006006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d106      	bne.n	800603a <HAL_RCC_OscConfig+0x2ea>
 800602c:	4b64      	ldr	r3, [pc, #400]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	6713      	str	r3, [r2, #112]	; 0x70
 8006038:	e01c      	b.n	8006074 <HAL_RCC_OscConfig+0x324>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b05      	cmp	r3, #5
 8006040:	d10c      	bne.n	800605c <HAL_RCC_OscConfig+0x30c>
 8006042:	4b5f      	ldr	r3, [pc, #380]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	4a5e      	ldr	r2, [pc, #376]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006048:	f043 0304 	orr.w	r3, r3, #4
 800604c:	6713      	str	r3, [r2, #112]	; 0x70
 800604e:	4b5c      	ldr	r3, [pc, #368]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4a5b      	ldr	r2, [pc, #364]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6713      	str	r3, [r2, #112]	; 0x70
 800605a:	e00b      	b.n	8006074 <HAL_RCC_OscConfig+0x324>
 800605c:	4b58      	ldr	r3, [pc, #352]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4a57      	ldr	r2, [pc, #348]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	6713      	str	r3, [r2, #112]	; 0x70
 8006068:	4b55      	ldr	r3, [pc, #340]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	4a54      	ldr	r2, [pc, #336]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800606e:	f023 0304 	bic.w	r3, r3, #4
 8006072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607c:	f7fc fa06 	bl	800248c <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006082:	e00a      	b.n	800609a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006084:	f7fc fa02 	bl	800248c <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e0cb      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609a:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ee      	beq.n	8006084 <HAL_RCC_OscConfig+0x334>
 80060a6:	e014      	b.n	80060d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a8:	f7fc f9f0 	bl	800248c <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ae:	e00a      	b.n	80060c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b0:	f7fc f9ec 	bl	800248c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e0b5      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 80060c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ee      	bne.n	80060b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	4a38      	ldr	r2, [pc, #224]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 80060de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80a1 	beq.w	8006230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ee:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d05c      	beq.n	80061b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d141      	bne.n	8006186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006102:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <HAL_RCC_OscConfig+0x478>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fc f9c0 	bl	800248c <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fc f9bc 	bl	800248c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e087      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006122:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	019b      	lsls	r3, r3, #6
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	3b01      	subs	r3, #1
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	491b      	ldr	r1, [pc, #108]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCC_OscConfig+0x478>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fc f995 	bl	800248c <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006166:	f7fc f991 	bl	800248c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e05c      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x416>
 8006184:	e054      	b.n	8006230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <HAL_RCC_OscConfig+0x478>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fc f97e 	bl	800248c <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006194:	f7fc f97a 	bl	800248c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e045      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCC_OscConfig+0x470>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x444>
 80061b2:	e03d      	b.n	8006230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e038      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
 80061c0:	40023800 	.word	0x40023800
 80061c4:	40007000 	.word	0x40007000
 80061c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061cc:	4b1b      	ldr	r3, [pc, #108]	; (800623c <HAL_RCC_OscConfig+0x4ec>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d028      	beq.n	800622c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d121      	bne.n	800622c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d11a      	bne.n	800622c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006204:	4293      	cmp	r3, r2
 8006206:	d111      	bne.n	800622c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	3b01      	subs	r3, #1
 8006216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006218:	429a      	cmp	r2, r3
 800621a:	d107      	bne.n	800622c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40023800 	.word	0x40023800

08006240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0cc      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006254:	4b68      	ldr	r3, [pc, #416]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d90c      	bls.n	800627c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006262:	4b65      	ldr	r3, [pc, #404]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b63      	ldr	r3, [pc, #396]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0b8      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d020      	beq.n	80062ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006294:	4b59      	ldr	r3, [pc, #356]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4a58      	ldr	r2, [pc, #352]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800629e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ac:	4b53      	ldr	r3, [pc, #332]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a52      	ldr	r2, [pc, #328]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b8:	4b50      	ldr	r3, [pc, #320]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	494d      	ldr	r1, [pc, #308]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d044      	beq.n	8006360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062de:	4b47      	ldr	r3, [pc, #284]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d119      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e07f      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d003      	beq.n	80062fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fe:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e06f      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630e:	4b3b      	ldr	r3, [pc, #236]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e067      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4934      	ldr	r1, [pc, #208]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	4313      	orrs	r3, r2
 800632e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006330:	f7fc f8ac 	bl	800248c <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006336:	e00a      	b.n	800634e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fc f8a8 	bl	800248c <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	; 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e04f      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	4b2b      	ldr	r3, [pc, #172]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 020c 	and.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	429a      	cmp	r2, r3
 800635e:	d1eb      	bne.n	8006338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d20c      	bcs.n	8006388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d001      	beq.n	8006388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e032      	b.n	80063ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006394:	4b19      	ldr	r3, [pc, #100]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4916      	ldr	r1, [pc, #88]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	490e      	ldr	r1, [pc, #56]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063c6:	f000 f821 	bl	800640c <HAL_RCC_GetSysClockFreq>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	490a      	ldr	r1, [pc, #40]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 80063d8:	5ccb      	ldrb	r3, [r1, r3]
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80063e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <HAL_RCC_ClockConfig+0x1c8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fc f80c 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40023c00 	.word	0x40023c00
 80063fc:	40023800 	.word	0x40023800
 8006400:	08009c40 	.word	0x08009c40
 8006404:	20000004 	.word	0x20000004
 8006408:	20000008 	.word	0x20000008

0800640c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800640c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006410:	b094      	sub	sp, #80	; 0x50
 8006412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	647b      	str	r3, [r7, #68]	; 0x44
 8006418:	2300      	movs	r3, #0
 800641a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800641c:	2300      	movs	r3, #0
 800641e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006424:	4b79      	ldr	r3, [pc, #484]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d00d      	beq.n	800644c <HAL_RCC_GetSysClockFreq+0x40>
 8006430:	2b08      	cmp	r3, #8
 8006432:	f200 80e1 	bhi.w	80065f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_RCC_GetSysClockFreq+0x34>
 800643a:	2b04      	cmp	r3, #4
 800643c:	d003      	beq.n	8006446 <HAL_RCC_GetSysClockFreq+0x3a>
 800643e:	e0db      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4b73      	ldr	r3, [pc, #460]	; (8006610 <HAL_RCC_GetSysClockFreq+0x204>)
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006444:	e0db      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006446:	4b73      	ldr	r3, [pc, #460]	; (8006614 <HAL_RCC_GetSysClockFreq+0x208>)
 8006448:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800644a:	e0d8      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800644c:	4b6f      	ldr	r3, [pc, #444]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006456:	4b6d      	ldr	r3, [pc, #436]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d063      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006462:	4b6a      	ldr	r3, [pc, #424]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	2200      	movs	r2, #0
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
 800646c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006474:	633b      	str	r3, [r7, #48]	; 0x30
 8006476:	2300      	movs	r3, #0
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
 800647a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	0159      	lsls	r1, r3, #5
 800648c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006490:	0150      	lsls	r0, r2, #5
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4621      	mov	r1, r4
 8006498:	1a51      	subs	r1, r2, r1
 800649a:	6139      	str	r1, [r7, #16]
 800649c:	4629      	mov	r1, r5
 800649e:	eb63 0301 	sbc.w	r3, r3, r1
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b0:	4659      	mov	r1, fp
 80064b2:	018b      	lsls	r3, r1, #6
 80064b4:	4651      	mov	r1, sl
 80064b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ba:	4651      	mov	r1, sl
 80064bc:	018a      	lsls	r2, r1, #6
 80064be:	4651      	mov	r1, sl
 80064c0:	ebb2 0801 	subs.w	r8, r2, r1
 80064c4:	4659      	mov	r1, fp
 80064c6:	eb63 0901 	sbc.w	r9, r3, r1
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064de:	4690      	mov	r8, r2
 80064e0:	4699      	mov	r9, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	eb18 0303 	adds.w	r3, r8, r3
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	462b      	mov	r3, r5
 80064ec:	eb49 0303 	adc.w	r3, r9, r3
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064fe:	4629      	mov	r1, r5
 8006500:	024b      	lsls	r3, r1, #9
 8006502:	4621      	mov	r1, r4
 8006504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006508:	4621      	mov	r1, r4
 800650a:	024a      	lsls	r2, r1, #9
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006512:	2200      	movs	r2, #0
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
 8006516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800651c:	f7fa fb9c 	bl	8000c58 <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4613      	mov	r3, r2
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006528:	e058      	b.n	80065dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b38      	ldr	r3, [pc, #224]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	2200      	movs	r2, #0
 8006532:	4618      	mov	r0, r3
 8006534:	4611      	mov	r1, r2
 8006536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800653a:	623b      	str	r3, [r7, #32]
 800653c:	2300      	movs	r3, #0
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
 8006540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	0159      	lsls	r1, r3, #5
 8006552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006556:	0150      	lsls	r0, r2, #5
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4641      	mov	r1, r8
 800655e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006562:	4649      	mov	r1, r9
 8006564:	eb63 0b01 	sbc.w	fp, r3, r1
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800657c:	ebb2 040a 	subs.w	r4, r2, sl
 8006580:	eb63 050b 	sbc.w	r5, r3, fp
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	00eb      	lsls	r3, r5, #3
 800658e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006592:	00e2      	lsls	r2, r4, #3
 8006594:	4614      	mov	r4, r2
 8006596:	461d      	mov	r5, r3
 8006598:	4643      	mov	r3, r8
 800659a:	18e3      	adds	r3, r4, r3
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	464b      	mov	r3, r9
 80065a0:	eb45 0303 	adc.w	r3, r5, r3
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065b2:	4629      	mov	r1, r5
 80065b4:	028b      	lsls	r3, r1, #10
 80065b6:	4621      	mov	r1, r4
 80065b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065bc:	4621      	mov	r1, r4
 80065be:	028a      	lsls	r2, r1, #10
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c6:	2200      	movs	r2, #0
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	61fa      	str	r2, [r7, #28]
 80065cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d0:	f7fa fb42 	bl	8000c58 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4613      	mov	r3, r2
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_RCC_GetSysClockFreq+0x200>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	3301      	adds	r3, #1
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065f6:	e002      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <HAL_RCC_GetSysClockFreq+0x204>)
 80065fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006600:	4618      	mov	r0, r3
 8006602:	3750      	adds	r7, #80	; 0x50
 8006604:	46bd      	mov	sp, r7
 8006606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800660a:	bf00      	nop
 800660c:	40023800 	.word	0x40023800
 8006610:	00f42400 	.word	0x00f42400
 8006614:	007a1200 	.word	0x007a1200

08006618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <HAL_RCC_GetHCLKFreq+0x14>)
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000004 	.word	0x20000004

08006630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006634:	f7ff fff0 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0a9b      	lsrs	r3, r3, #10
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4903      	ldr	r1, [pc, #12]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	08009c50 	.word	0x08009c50

08006658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800665c:	f7ff ffdc 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006660:	4602      	mov	r2, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0b5b      	lsrs	r3, r3, #13
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCC_GetPCLK2Freq+0x24>)
 800666e:	5ccb      	ldrb	r3, [r1, r3]
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	08009c50 	.word	0x08009c50

08006680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e03f      	b.n	8006712 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb fe18 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2224      	movs	r2, #36	; 0x24
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f829 	bl	800671c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800671c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006720:	b0c0      	sub	sp, #256	; 0x100
 8006722:	af00      	add	r7, sp, #0
 8006724:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	68d9      	ldr	r1, [r3, #12]
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	ea40 0301 	orr.w	r3, r0, r1
 8006744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	431a      	orrs	r2, r3
 8006754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	431a      	orrs	r2, r3
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006774:	f021 010c 	bic.w	r1, r1, #12
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006782:	430b      	orrs	r3, r1
 8006784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006796:	6999      	ldr	r1, [r3, #24]
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	ea40 0301 	orr.w	r3, r0, r1
 80067a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b8f      	ldr	r3, [pc, #572]	; (80069e8 <UART_SetConfig+0x2cc>)
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d005      	beq.n	80067bc <UART_SetConfig+0xa0>
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b8d      	ldr	r3, [pc, #564]	; (80069ec <UART_SetConfig+0x2d0>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d104      	bne.n	80067c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7ff ff4c 	bl	8006658 <HAL_RCC_GetPCLK2Freq>
 80067c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067c4:	e003      	b.n	80067ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067c6:	f7ff ff33 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 80067ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	f040 810c 	bne.w	80069f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	1891      	adds	r1, r2, r2
 80067f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80067f6:	415b      	adcs	r3, r3
 80067f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067fe:	4621      	mov	r1, r4
 8006800:	eb12 0801 	adds.w	r8, r2, r1
 8006804:	4629      	mov	r1, r5
 8006806:	eb43 0901 	adc.w	r9, r3, r1
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800681a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800681e:	4690      	mov	r8, r2
 8006820:	4699      	mov	r9, r3
 8006822:	4623      	mov	r3, r4
 8006824:	eb18 0303 	adds.w	r3, r8, r3
 8006828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800682c:	462b      	mov	r3, r5
 800682e:	eb49 0303 	adc.w	r3, r9, r3
 8006832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006842:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800684a:	460b      	mov	r3, r1
 800684c:	18db      	adds	r3, r3, r3
 800684e:	653b      	str	r3, [r7, #80]	; 0x50
 8006850:	4613      	mov	r3, r2
 8006852:	eb42 0303 	adc.w	r3, r2, r3
 8006856:	657b      	str	r3, [r7, #84]	; 0x54
 8006858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800685c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006860:	f7fa f9fa 	bl	8000c58 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4b61      	ldr	r3, [pc, #388]	; (80069f0 <UART_SetConfig+0x2d4>)
 800686a:	fba3 2302 	umull	r2, r3, r3, r2
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	011c      	lsls	r4, r3, #4
 8006872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800687c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	64b9      	str	r1, [r7, #72]	; 0x48
 800688c:	415b      	adcs	r3, r3
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006894:	4641      	mov	r1, r8
 8006896:	eb12 0a01 	adds.w	sl, r2, r1
 800689a:	4649      	mov	r1, r9
 800689c:	eb43 0b01 	adc.w	fp, r3, r1
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b4:	4692      	mov	sl, r2
 80068b6:	469b      	mov	fp, r3
 80068b8:	4643      	mov	r3, r8
 80068ba:	eb1a 0303 	adds.w	r3, sl, r3
 80068be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c2:	464b      	mov	r3, r9
 80068c4:	eb4b 0303 	adc.w	r3, fp, r3
 80068c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068e0:	460b      	mov	r3, r1
 80068e2:	18db      	adds	r3, r3, r3
 80068e4:	643b      	str	r3, [r7, #64]	; 0x40
 80068e6:	4613      	mov	r3, r2
 80068e8:	eb42 0303 	adc.w	r3, r2, r3
 80068ec:	647b      	str	r3, [r7, #68]	; 0x44
 80068ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068f6:	f7fa f9af 	bl	8000c58 <__aeabi_uldivmod>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	4611      	mov	r1, r2
 8006900:	4b3b      	ldr	r3, [pc, #236]	; (80069f0 <UART_SetConfig+0x2d4>)
 8006902:	fba3 2301 	umull	r2, r3, r3, r1
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	2264      	movs	r2, #100	; 0x64
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	1acb      	subs	r3, r1, r3
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006916:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <UART_SetConfig+0x2d4>)
 8006918:	fba3 2302 	umull	r2, r3, r3, r2
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006924:	441c      	add	r4, r3
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006930:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006940:	415b      	adcs	r3, r3
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006948:	4641      	mov	r1, r8
 800694a:	1851      	adds	r1, r2, r1
 800694c:	6339      	str	r1, [r7, #48]	; 0x30
 800694e:	4649      	mov	r1, r9
 8006950:	414b      	adcs	r3, r1
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006960:	4659      	mov	r1, fp
 8006962:	00cb      	lsls	r3, r1, #3
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800696a:	4651      	mov	r1, sl
 800696c:	00ca      	lsls	r2, r1, #3
 800696e:	4610      	mov	r0, r2
 8006970:	4619      	mov	r1, r3
 8006972:	4603      	mov	r3, r0
 8006974:	4642      	mov	r2, r8
 8006976:	189b      	adds	r3, r3, r2
 8006978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800697c:	464b      	mov	r3, r9
 800697e:	460a      	mov	r2, r1
 8006980:	eb42 0303 	adc.w	r3, r2, r3
 8006984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006994:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800699c:	460b      	mov	r3, r1
 800699e:	18db      	adds	r3, r3, r3
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a2:	4613      	mov	r3, r2
 80069a4:	eb42 0303 	adc.w	r3, r2, r3
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069b2:	f7fa f951 	bl	8000c58 <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <UART_SetConfig+0x2d4>)
 80069bc:	fba3 1302 	umull	r1, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	2164      	movs	r1, #100	; 0x64
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	3332      	adds	r3, #50	; 0x32
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <UART_SetConfig+0x2d4>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f003 0207 	and.w	r2, r3, #7
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4422      	add	r2, r4
 80069e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069e4:	e105      	b.n	8006bf2 <UART_SetConfig+0x4d6>
 80069e6:	bf00      	nop
 80069e8:	40011000 	.word	0x40011000
 80069ec:	40011400 	.word	0x40011400
 80069f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a06:	4642      	mov	r2, r8
 8006a08:	464b      	mov	r3, r9
 8006a0a:	1891      	adds	r1, r2, r2
 8006a0c:	6239      	str	r1, [r7, #32]
 8006a0e:	415b      	adcs	r3, r3
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a16:	4641      	mov	r1, r8
 8006a18:	1854      	adds	r4, r2, r1
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb43 0501 	adc.w	r5, r3, r1
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	00eb      	lsls	r3, r5, #3
 8006a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a2e:	00e2      	lsls	r2, r4, #3
 8006a30:	4614      	mov	r4, r2
 8006a32:	461d      	mov	r5, r3
 8006a34:	4643      	mov	r3, r8
 8006a36:	18e3      	adds	r3, r4, r3
 8006a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a3c:	464b      	mov	r3, r9
 8006a3e:	eb45 0303 	adc.w	r3, r5, r3
 8006a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a62:	4629      	mov	r1, r5
 8006a64:	008b      	lsls	r3, r1, #2
 8006a66:	4621      	mov	r1, r4
 8006a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	008a      	lsls	r2, r1, #2
 8006a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a74:	f7fa f8f0 	bl	8000c58 <__aeabi_uldivmod>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4b60      	ldr	r3, [pc, #384]	; (8006c00 <UART_SetConfig+0x4e4>)
 8006a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	011c      	lsls	r4, r3, #4
 8006a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	1891      	adds	r1, r2, r2
 8006a9e:	61b9      	str	r1, [r7, #24]
 8006aa0:	415b      	adcs	r3, r3
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	1851      	adds	r1, r2, r1
 8006aac:	6139      	str	r1, [r7, #16]
 8006aae:	4649      	mov	r1, r9
 8006ab0:	414b      	adcs	r3, r1
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	00cb      	lsls	r3, r1, #3
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aca:	4651      	mov	r1, sl
 8006acc:	00ca      	lsls	r2, r1, #3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	189b      	adds	r3, r3, r2
 8006ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006adc:	464b      	mov	r3, r9
 8006ade:	460a      	mov	r2, r1
 8006ae0:	eb42 0303 	adc.w	r3, r2, r3
 8006ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b00:	4649      	mov	r1, r9
 8006b02:	008b      	lsls	r3, r1, #2
 8006b04:	4641      	mov	r1, r8
 8006b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	008a      	lsls	r2, r1, #2
 8006b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b12:	f7fa f8a1 	bl	8000c58 <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <UART_SetConfig+0x4e4>)
 8006b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	2164      	movs	r1, #100	; 0x64
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	3332      	adds	r3, #50	; 0x32
 8006b2e:	4a34      	ldr	r2, [pc, #208]	; (8006c00 <UART_SetConfig+0x4e4>)
 8006b30:	fba2 2303 	umull	r2, r3, r2, r3
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b3a:	441c      	add	r4, r3
 8006b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b40:	2200      	movs	r2, #0
 8006b42:	673b      	str	r3, [r7, #112]	; 0x70
 8006b44:	677a      	str	r2, [r7, #116]	; 0x74
 8006b46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	1891      	adds	r1, r2, r2
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	415b      	adcs	r3, r3
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	1851      	adds	r1, r2, r1
 8006b5e:	6039      	str	r1, [r7, #0]
 8006b60:	4649      	mov	r1, r9
 8006b62:	414b      	adcs	r3, r1
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b72:	4659      	mov	r1, fp
 8006b74:	00cb      	lsls	r3, r1, #3
 8006b76:	4651      	mov	r1, sl
 8006b78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	00ca      	lsls	r2, r1, #3
 8006b80:	4610      	mov	r0, r2
 8006b82:	4619      	mov	r1, r3
 8006b84:	4603      	mov	r3, r0
 8006b86:	4642      	mov	r2, r8
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	460a      	mov	r2, r1
 8006b90:	eb42 0303 	adc.w	r3, r2, r3
 8006b94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bae:	4649      	mov	r1, r9
 8006bb0:	008b      	lsls	r3, r1, #2
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb8:	4641      	mov	r1, r8
 8006bba:	008a      	lsls	r2, r1, #2
 8006bbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bc0:	f7fa f84a 	bl	8000c58 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <UART_SetConfig+0x4e4>)
 8006bca:	fba3 1302 	umull	r1, r3, r3, r2
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	2164      	movs	r1, #100	; 0x64
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	3332      	adds	r3, #50	; 0x32
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <UART_SetConfig+0x4e4>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4422      	add	r2, r4
 8006bf0:	609a      	str	r2, [r3, #8]
}
 8006bf2:	bf00      	nop
 8006bf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	51eb851f 	.word	0x51eb851f

08006c04 <__errno>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <__errno+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000010 	.word	0x20000010

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f002 ff04 	bl	8009a30 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	0800a044 	.word	0x0800a044
 8006c4c:	0800a044 	.word	0x0800a044
 8006c50:	0800a044 	.word	0x0800a044
 8006c54:	0800a048 	.word	0x0800a048

08006c58 <memset>:
 8006c58:	4402      	add	r2, r0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <__cvt>:
 8006c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	ec55 4b10 	vmov	r4, r5, d0
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	460e      	mov	r6, r1
 8006c74:	4619      	mov	r1, r3
 8006c76:	462b      	mov	r3, r5
 8006c78:	bfbb      	ittet	lt
 8006c7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c7e:	461d      	movlt	r5, r3
 8006c80:	2300      	movge	r3, #0
 8006c82:	232d      	movlt	r3, #45	; 0x2d
 8006c84:	700b      	strb	r3, [r1, #0]
 8006c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c8c:	4691      	mov	r9, r2
 8006c8e:	f023 0820 	bic.w	r8, r3, #32
 8006c92:	bfbc      	itt	lt
 8006c94:	4622      	movlt	r2, r4
 8006c96:	4614      	movlt	r4, r2
 8006c98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c9c:	d005      	beq.n	8006caa <__cvt+0x42>
 8006c9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ca2:	d100      	bne.n	8006ca6 <__cvt+0x3e>
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	e000      	b.n	8006cac <__cvt+0x44>
 8006caa:	2103      	movs	r1, #3
 8006cac:	ab03      	add	r3, sp, #12
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	ab02      	add	r3, sp, #8
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	ec45 4b10 	vmov	d0, r4, r5
 8006cb8:	4653      	mov	r3, sl
 8006cba:	4632      	mov	r2, r6
 8006cbc:	f000 fcec 	bl	8007698 <_dtoa_r>
 8006cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	d102      	bne.n	8006cce <__cvt+0x66>
 8006cc8:	f019 0f01 	tst.w	r9, #1
 8006ccc:	d022      	beq.n	8006d14 <__cvt+0xac>
 8006cce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd2:	eb07 0906 	add.w	r9, r7, r6
 8006cd6:	d110      	bne.n	8006cfa <__cvt+0x92>
 8006cd8:	783b      	ldrb	r3, [r7, #0]
 8006cda:	2b30      	cmp	r3, #48	; 0x30
 8006cdc:	d10a      	bne.n	8006cf4 <__cvt+0x8c>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7f9 fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cea:	b918      	cbnz	r0, 8006cf4 <__cvt+0x8c>
 8006cec:	f1c6 0601 	rsb	r6, r6, #1
 8006cf0:	f8ca 6000 	str.w	r6, [sl]
 8006cf4:	f8da 3000 	ldr.w	r3, [sl]
 8006cf8:	4499      	add	r9, r3
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d06:	b108      	cbz	r0, 8006d0c <__cvt+0xa4>
 8006d08:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d0c:	2230      	movs	r2, #48	; 0x30
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	454b      	cmp	r3, r9
 8006d12:	d307      	bcc.n	8006d24 <__cvt+0xbc>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d18:	1bdb      	subs	r3, r3, r7
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	b004      	add	sp, #16
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	9103      	str	r1, [sp, #12]
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	e7f0      	b.n	8006d0e <__cvt+0xa6>

08006d2c <__exponent>:
 8006d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2900      	cmp	r1, #0
 8006d32:	bfb8      	it	lt
 8006d34:	4249      	neglt	r1, r1
 8006d36:	f803 2b02 	strb.w	r2, [r3], #2
 8006d3a:	bfb4      	ite	lt
 8006d3c:	222d      	movlt	r2, #45	; 0x2d
 8006d3e:	222b      	movge	r2, #43	; 0x2b
 8006d40:	2909      	cmp	r1, #9
 8006d42:	7042      	strb	r2, [r0, #1]
 8006d44:	dd2a      	ble.n	8006d9c <__exponent+0x70>
 8006d46:	f10d 0407 	add.w	r4, sp, #7
 8006d4a:	46a4      	mov	ip, r4
 8006d4c:	270a      	movs	r7, #10
 8006d4e:	46a6      	mov	lr, r4
 8006d50:	460a      	mov	r2, r1
 8006d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d56:	fb07 1516 	mls	r5, r7, r6, r1
 8006d5a:	3530      	adds	r5, #48	; 0x30
 8006d5c:	2a63      	cmp	r2, #99	; 0x63
 8006d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d66:	4631      	mov	r1, r6
 8006d68:	dcf1      	bgt.n	8006d4e <__exponent+0x22>
 8006d6a:	3130      	adds	r1, #48	; 0x30
 8006d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8006d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d74:	1c44      	adds	r4, r0, #1
 8006d76:	4629      	mov	r1, r5
 8006d78:	4561      	cmp	r1, ip
 8006d7a:	d30a      	bcc.n	8006d92 <__exponent+0x66>
 8006d7c:	f10d 0209 	add.w	r2, sp, #9
 8006d80:	eba2 020e 	sub.w	r2, r2, lr
 8006d84:	4565      	cmp	r5, ip
 8006d86:	bf88      	it	hi
 8006d88:	2200      	movhi	r2, #0
 8006d8a:	4413      	add	r3, r2
 8006d8c:	1a18      	subs	r0, r3, r0
 8006d8e:	b003      	add	sp, #12
 8006d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d9a:	e7ed      	b.n	8006d78 <__exponent+0x4c>
 8006d9c:	2330      	movs	r3, #48	; 0x30
 8006d9e:	3130      	adds	r1, #48	; 0x30
 8006da0:	7083      	strb	r3, [r0, #2]
 8006da2:	70c1      	strb	r1, [r0, #3]
 8006da4:	1d03      	adds	r3, r0, #4
 8006da6:	e7f1      	b.n	8006d8c <__exponent+0x60>

08006da8 <_printf_float>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	ed2d 8b02 	vpush	{d8}
 8006db0:	b08d      	sub	sp, #52	; 0x34
 8006db2:	460c      	mov	r4, r1
 8006db4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006db8:	4616      	mov	r6, r2
 8006dba:	461f      	mov	r7, r3
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	f001 fa59 	bl	8008274 <_localeconv_r>
 8006dc2:	f8d0 a000 	ldr.w	sl, [r0]
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	f7f9 fa0a 	bl	80001e0 <strlen>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ddc:	3307      	adds	r3, #7
 8006dde:	f023 0307 	bic.w	r3, r3, #7
 8006de2:	f103 0208 	add.w	r2, r3, #8
 8006de6:	f8c8 2000 	str.w	r2, [r8]
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006df2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e00:	ee08 0a10 	vmov	s16, r0
 8006e04:	4b9f      	ldr	r3, [pc, #636]	; (8007084 <_printf_float+0x2dc>)
 8006e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0e:	f7f9 fe95 	bl	8000b3c <__aeabi_dcmpun>
 8006e12:	bb88      	cbnz	r0, 8006e78 <_printf_float+0xd0>
 8006e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e18:	4b9a      	ldr	r3, [pc, #616]	; (8007084 <_printf_float+0x2dc>)
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	f7f9 fe6f 	bl	8000b00 <__aeabi_dcmple>
 8006e22:	bb48      	cbnz	r0, 8006e78 <_printf_float+0xd0>
 8006e24:	2200      	movs	r2, #0
 8006e26:	2300      	movs	r3, #0
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f7f9 fe5e 	bl	8000aec <__aeabi_dcmplt>
 8006e30:	b110      	cbz	r0, 8006e38 <_printf_float+0x90>
 8006e32:	232d      	movs	r3, #45	; 0x2d
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e38:	4b93      	ldr	r3, [pc, #588]	; (8007088 <_printf_float+0x2e0>)
 8006e3a:	4894      	ldr	r0, [pc, #592]	; (800708c <_printf_float+0x2e4>)
 8006e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e40:	bf94      	ite	ls
 8006e42:	4698      	movls	r8, r3
 8006e44:	4680      	movhi	r8, r0
 8006e46:	2303      	movs	r3, #3
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	f023 0204 	bic.w	r2, r3, #4
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	9700      	str	r7, [sp, #0]
 8006e58:	4633      	mov	r3, r6
 8006e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f000 f9d8 	bl	8007214 <_printf_common>
 8006e64:	3001      	adds	r0, #1
 8006e66:	f040 8090 	bne.w	8006f8a <_printf_float+0x1e2>
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	b00d      	add	sp, #52	; 0x34
 8006e70:	ecbd 8b02 	vpop	{d8}
 8006e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fe5c 	bl	8000b3c <__aeabi_dcmpun>
 8006e84:	b140      	cbz	r0, 8006e98 <_printf_float+0xf0>
 8006e86:	464b      	mov	r3, r9
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bfbc      	itt	lt
 8006e8c:	232d      	movlt	r3, #45	; 0x2d
 8006e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e92:	487f      	ldr	r0, [pc, #508]	; (8007090 <_printf_float+0x2e8>)
 8006e94:	4b7f      	ldr	r3, [pc, #508]	; (8007094 <_printf_float+0x2ec>)
 8006e96:	e7d1      	b.n	8006e3c <_printf_float+0x94>
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e9e:	9206      	str	r2, [sp, #24]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	d13f      	bne.n	8006f24 <_printf_float+0x17c>
 8006ea4:	2306      	movs	r3, #6
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	9b05      	ldr	r3, [sp, #20]
 8006eaa:	6861      	ldr	r1, [r4, #4]
 8006eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8006eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eba:	ab09      	add	r3, sp, #36	; 0x24
 8006ebc:	ec49 8b10 	vmov	d0, r8, r9
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6022      	str	r2, [r4, #0]
 8006ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f7ff fecd 	bl	8006c68 <__cvt>
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed2:	2b47      	cmp	r3, #71	; 0x47
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	d108      	bne.n	8006eea <_printf_float+0x142>
 8006ed8:	1cc8      	adds	r0, r1, #3
 8006eda:	db02      	blt.n	8006ee2 <_printf_float+0x13a>
 8006edc:	6863      	ldr	r3, [r4, #4]
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	dd41      	ble.n	8006f66 <_printf_float+0x1be>
 8006ee2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8006eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006eee:	d820      	bhi.n	8006f32 <_printf_float+0x18a>
 8006ef0:	3901      	subs	r1, #1
 8006ef2:	465a      	mov	r2, fp
 8006ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8006efa:	f7ff ff17 	bl	8006d2c <__exponent>
 8006efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f00:	1813      	adds	r3, r2, r0
 8006f02:	2a01      	cmp	r2, #1
 8006f04:	4681      	mov	r9, r0
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	dc02      	bgt.n	8006f10 <_printf_float+0x168>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	07d2      	lsls	r2, r2, #31
 8006f0e:	d501      	bpl.n	8006f14 <_printf_float+0x16c>
 8006f10:	3301      	adds	r3, #1
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d09c      	beq.n	8006e56 <_printf_float+0xae>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f22:	e798      	b.n	8006e56 <_printf_float+0xae>
 8006f24:	9a06      	ldr	r2, [sp, #24]
 8006f26:	2a47      	cmp	r2, #71	; 0x47
 8006f28:	d1be      	bne.n	8006ea8 <_printf_float+0x100>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1bc      	bne.n	8006ea8 <_printf_float+0x100>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e7b9      	b.n	8006ea6 <_printf_float+0xfe>
 8006f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f36:	d118      	bne.n	8006f6a <_printf_float+0x1c2>
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	6863      	ldr	r3, [r4, #4]
 8006f3c:	dd0b      	ble.n	8006f56 <_printf_float+0x1ae>
 8006f3e:	6121      	str	r1, [r4, #16]
 8006f40:	b913      	cbnz	r3, 8006f48 <_printf_float+0x1a0>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	07d0      	lsls	r0, r2, #31
 8006f46:	d502      	bpl.n	8006f4e <_printf_float+0x1a6>
 8006f48:	3301      	adds	r3, #1
 8006f4a:	440b      	add	r3, r1
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f50:	f04f 0900 	mov.w	r9, #0
 8006f54:	e7de      	b.n	8006f14 <_printf_float+0x16c>
 8006f56:	b913      	cbnz	r3, 8006f5e <_printf_float+0x1b6>
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	07d2      	lsls	r2, r2, #31
 8006f5c:	d501      	bpl.n	8006f62 <_printf_float+0x1ba>
 8006f5e:	3302      	adds	r3, #2
 8006f60:	e7f4      	b.n	8006f4c <_printf_float+0x1a4>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7f2      	b.n	8006f4c <_printf_float+0x1a4>
 8006f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	db05      	blt.n	8006f7c <_printf_float+0x1d4>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	6121      	str	r1, [r4, #16]
 8006f74:	07d8      	lsls	r0, r3, #31
 8006f76:	d5ea      	bpl.n	8006f4e <_printf_float+0x1a6>
 8006f78:	1c4b      	adds	r3, r1, #1
 8006f7a:	e7e7      	b.n	8006f4c <_printf_float+0x1a4>
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	bfd4      	ite	le
 8006f80:	f1c1 0202 	rsble	r2, r1, #2
 8006f84:	2201      	movgt	r2, #1
 8006f86:	4413      	add	r3, r2
 8006f88:	e7e0      	b.n	8006f4c <_printf_float+0x1a4>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	055a      	lsls	r2, r3, #21
 8006f8e:	d407      	bmi.n	8006fa0 <_printf_float+0x1f8>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	4642      	mov	r2, r8
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d12c      	bne.n	8006ff8 <_printf_float+0x250>
 8006f9e:	e764      	b.n	8006e6a <_printf_float+0xc2>
 8006fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fa4:	f240 80e0 	bls.w	8007168 <_printf_float+0x3c0>
 8006fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f7f9 fd92 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d034      	beq.n	8007022 <_printf_float+0x27a>
 8006fb8:	4a37      	ldr	r2, [pc, #220]	; (8007098 <_printf_float+0x2f0>)
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af51 	beq.w	8006e6a <_printf_float+0xc2>
 8006fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	db02      	blt.n	8006fd6 <_printf_float+0x22e>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	07d8      	lsls	r0, r3, #31
 8006fd4:	d510      	bpl.n	8006ff8 <_printf_float+0x250>
 8006fd6:	ee18 3a10 	vmov	r3, s16
 8006fda:	4652      	mov	r2, sl
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f af41 	beq.w	8006e6a <_printf_float+0xc2>
 8006fe8:	f04f 0800 	mov.w	r8, #0
 8006fec:	f104 091a 	add.w	r9, r4, #26
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	dc09      	bgt.n	800700c <_printf_float+0x264>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	079b      	lsls	r3, r3, #30
 8006ffc:	f100 8105 	bmi.w	800720a <_printf_float+0x462>
 8007000:	68e0      	ldr	r0, [r4, #12]
 8007002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007004:	4298      	cmp	r0, r3
 8007006:	bfb8      	it	lt
 8007008:	4618      	movlt	r0, r3
 800700a:	e730      	b.n	8006e6e <_printf_float+0xc6>
 800700c:	2301      	movs	r3, #1
 800700e:	464a      	mov	r2, r9
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f af27 	beq.w	8006e6a <_printf_float+0xc2>
 800701c:	f108 0801 	add.w	r8, r8, #1
 8007020:	e7e6      	b.n	8006ff0 <_printf_float+0x248>
 8007022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007024:	2b00      	cmp	r3, #0
 8007026:	dc39      	bgt.n	800709c <_printf_float+0x2f4>
 8007028:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <_printf_float+0x2f0>)
 800702a:	2301      	movs	r3, #1
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f af19 	beq.w	8006e6a <_printf_float+0xc2>
 8007038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800703c:	4313      	orrs	r3, r2
 800703e:	d102      	bne.n	8007046 <_printf_float+0x29e>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	07d9      	lsls	r1, r3, #31
 8007044:	d5d8      	bpl.n	8006ff8 <_printf_float+0x250>
 8007046:	ee18 3a10 	vmov	r3, s16
 800704a:	4652      	mov	r2, sl
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af09 	beq.w	8006e6a <_printf_float+0xc2>
 8007058:	f04f 0900 	mov.w	r9, #0
 800705c:	f104 0a1a 	add.w	sl, r4, #26
 8007060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007062:	425b      	negs	r3, r3
 8007064:	454b      	cmp	r3, r9
 8007066:	dc01      	bgt.n	800706c <_printf_float+0x2c4>
 8007068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706a:	e792      	b.n	8006f92 <_printf_float+0x1ea>
 800706c:	2301      	movs	r3, #1
 800706e:	4652      	mov	r2, sl
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f aef7 	beq.w	8006e6a <_printf_float+0xc2>
 800707c:	f109 0901 	add.w	r9, r9, #1
 8007080:	e7ee      	b.n	8007060 <_printf_float+0x2b8>
 8007082:	bf00      	nop
 8007084:	7fefffff 	.word	0x7fefffff
 8007088:	08009c64 	.word	0x08009c64
 800708c:	08009c68 	.word	0x08009c68
 8007090:	08009c70 	.word	0x08009c70
 8007094:	08009c6c 	.word	0x08009c6c
 8007098:	08009c74 	.word	0x08009c74
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070a0:	429a      	cmp	r2, r3
 80070a2:	bfa8      	it	ge
 80070a4:	461a      	movge	r2, r3
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	4691      	mov	r9, r2
 80070aa:	dc37      	bgt.n	800711c <_printf_float+0x374>
 80070ac:	f04f 0b00 	mov.w	fp, #0
 80070b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070b4:	f104 021a 	add.w	r2, r4, #26
 80070b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	eba3 0309 	sub.w	r3, r3, r9
 80070c0:	455b      	cmp	r3, fp
 80070c2:	dc33      	bgt.n	800712c <_printf_float+0x384>
 80070c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c8:	429a      	cmp	r2, r3
 80070ca:	db3b      	blt.n	8007144 <_printf_float+0x39c>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	07da      	lsls	r2, r3, #31
 80070d0:	d438      	bmi.n	8007144 <_printf_float+0x39c>
 80070d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d4:	9a05      	ldr	r2, [sp, #20]
 80070d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d8:	1a9a      	subs	r2, r3, r2
 80070da:	eba3 0901 	sub.w	r9, r3, r1
 80070de:	4591      	cmp	r9, r2
 80070e0:	bfa8      	it	ge
 80070e2:	4691      	movge	r9, r2
 80070e4:	f1b9 0f00 	cmp.w	r9, #0
 80070e8:	dc35      	bgt.n	8007156 <_printf_float+0x3ae>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f2:	f104 0a1a 	add.w	sl, r4, #26
 80070f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	eba3 0309 	sub.w	r3, r3, r9
 8007100:	4543      	cmp	r3, r8
 8007102:	f77f af79 	ble.w	8006ff8 <_printf_float+0x250>
 8007106:	2301      	movs	r3, #1
 8007108:	4652      	mov	r2, sl
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	f43f aeaa 	beq.w	8006e6a <_printf_float+0xc2>
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	e7ec      	b.n	80070f6 <_printf_float+0x34e>
 800711c:	4613      	mov	r3, r2
 800711e:	4631      	mov	r1, r6
 8007120:	4642      	mov	r2, r8
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	d1c0      	bne.n	80070ac <_printf_float+0x304>
 800712a:	e69e      	b.n	8006e6a <_printf_float+0xc2>
 800712c:	2301      	movs	r3, #1
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	9205      	str	r2, [sp, #20]
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f ae97 	beq.w	8006e6a <_printf_float+0xc2>
 800713c:	9a05      	ldr	r2, [sp, #20]
 800713e:	f10b 0b01 	add.w	fp, fp, #1
 8007142:	e7b9      	b.n	80070b8 <_printf_float+0x310>
 8007144:	ee18 3a10 	vmov	r3, s16
 8007148:	4652      	mov	r2, sl
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	d1be      	bne.n	80070d2 <_printf_float+0x32a>
 8007154:	e689      	b.n	8006e6a <_printf_float+0xc2>
 8007156:	9a05      	ldr	r2, [sp, #20]
 8007158:	464b      	mov	r3, r9
 800715a:	4442      	add	r2, r8
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c1      	bne.n	80070ea <_printf_float+0x342>
 8007166:	e680      	b.n	8006e6a <_printf_float+0xc2>
 8007168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800716a:	2a01      	cmp	r2, #1
 800716c:	dc01      	bgt.n	8007172 <_printf_float+0x3ca>
 800716e:	07db      	lsls	r3, r3, #31
 8007170:	d538      	bpl.n	80071e4 <_printf_float+0x43c>
 8007172:	2301      	movs	r3, #1
 8007174:	4642      	mov	r2, r8
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae74 	beq.w	8006e6a <_printf_float+0xc2>
 8007182:	ee18 3a10 	vmov	r3, s16
 8007186:	4652      	mov	r2, sl
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f ae6b 	beq.w	8006e6a <_printf_float+0xc2>
 8007194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007198:	2200      	movs	r2, #0
 800719a:	2300      	movs	r3, #0
 800719c:	f7f9 fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80071a0:	b9d8      	cbnz	r0, 80071da <_printf_float+0x432>
 80071a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a4:	f108 0201 	add.w	r2, r8, #1
 80071a8:	3b01      	subs	r3, #1
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	d10e      	bne.n	80071d2 <_printf_float+0x42a>
 80071b4:	e659      	b.n	8006e6a <_printf_float+0xc2>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4652      	mov	r2, sl
 80071ba:	4631      	mov	r1, r6
 80071bc:	4628      	mov	r0, r5
 80071be:	47b8      	blx	r7
 80071c0:	3001      	adds	r0, #1
 80071c2:	f43f ae52 	beq.w	8006e6a <_printf_float+0xc2>
 80071c6:	f108 0801 	add.w	r8, r8, #1
 80071ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4543      	cmp	r3, r8
 80071d0:	dcf1      	bgt.n	80071b6 <_printf_float+0x40e>
 80071d2:	464b      	mov	r3, r9
 80071d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071d8:	e6dc      	b.n	8006f94 <_printf_float+0x1ec>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	f104 0a1a 	add.w	sl, r4, #26
 80071e2:	e7f2      	b.n	80071ca <_printf_float+0x422>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4642      	mov	r2, r8
 80071e8:	e7df      	b.n	80071aa <_printf_float+0x402>
 80071ea:	2301      	movs	r3, #1
 80071ec:	464a      	mov	r2, r9
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f ae38 	beq.w	8006e6a <_printf_float+0xc2>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007202:	1a5b      	subs	r3, r3, r1
 8007204:	4543      	cmp	r3, r8
 8007206:	dcf0      	bgt.n	80071ea <_printf_float+0x442>
 8007208:	e6fa      	b.n	8007000 <_printf_float+0x258>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	f104 0919 	add.w	r9, r4, #25
 8007212:	e7f4      	b.n	80071fe <_printf_float+0x456>

08007214 <_printf_common>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	4616      	mov	r6, r2
 800721a:	4699      	mov	r9, r3
 800721c:	688a      	ldr	r2, [r1, #8]
 800721e:	690b      	ldr	r3, [r1, #16]
 8007220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007224:	4293      	cmp	r3, r2
 8007226:	bfb8      	it	lt
 8007228:	4613      	movlt	r3, r2
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007230:	4607      	mov	r7, r0
 8007232:	460c      	mov	r4, r1
 8007234:	b10a      	cbz	r2, 800723a <_printf_common+0x26>
 8007236:	3301      	adds	r3, #1
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	0699      	lsls	r1, r3, #26
 800723e:	bf42      	ittt	mi
 8007240:	6833      	ldrmi	r3, [r6, #0]
 8007242:	3302      	addmi	r3, #2
 8007244:	6033      	strmi	r3, [r6, #0]
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	f015 0506 	ands.w	r5, r5, #6
 800724c:	d106      	bne.n	800725c <_printf_common+0x48>
 800724e:	f104 0a19 	add.w	sl, r4, #25
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	6832      	ldr	r2, [r6, #0]
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc26      	bgt.n	80072aa <_printf_common+0x96>
 800725c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007260:	1e13      	subs	r3, r2, #0
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	bf18      	it	ne
 8007266:	2301      	movne	r3, #1
 8007268:	0692      	lsls	r2, r2, #26
 800726a:	d42b      	bmi.n	80072c4 <_printf_common+0xb0>
 800726c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007270:	4649      	mov	r1, r9
 8007272:	4638      	mov	r0, r7
 8007274:	47c0      	blx	r8
 8007276:	3001      	adds	r0, #1
 8007278:	d01e      	beq.n	80072b8 <_printf_common+0xa4>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	68e5      	ldr	r5, [r4, #12]
 800727e:	6832      	ldr	r2, [r6, #0]
 8007280:	f003 0306 	and.w	r3, r3, #6
 8007284:	2b04      	cmp	r3, #4
 8007286:	bf08      	it	eq
 8007288:	1aad      	subeq	r5, r5, r2
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	bf0c      	ite	eq
 8007290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007294:	2500      	movne	r5, #0
 8007296:	4293      	cmp	r3, r2
 8007298:	bfc4      	itt	gt
 800729a:	1a9b      	subgt	r3, r3, r2
 800729c:	18ed      	addgt	r5, r5, r3
 800729e:	2600      	movs	r6, #0
 80072a0:	341a      	adds	r4, #26
 80072a2:	42b5      	cmp	r5, r6
 80072a4:	d11a      	bne.n	80072dc <_printf_common+0xc8>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e008      	b.n	80072bc <_printf_common+0xa8>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	4649      	mov	r1, r9
 80072b0:	4638      	mov	r0, r7
 80072b2:	47c0      	blx	r8
 80072b4:	3001      	adds	r0, #1
 80072b6:	d103      	bne.n	80072c0 <_printf_common+0xac>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	3501      	adds	r5, #1
 80072c2:	e7c6      	b.n	8007252 <_printf_common+0x3e>
 80072c4:	18e1      	adds	r1, r4, r3
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	2030      	movs	r0, #48	; 0x30
 80072ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ce:	4422      	add	r2, r4
 80072d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072d8:	3302      	adds	r3, #2
 80072da:	e7c7      	b.n	800726c <_printf_common+0x58>
 80072dc:	2301      	movs	r3, #1
 80072de:	4622      	mov	r2, r4
 80072e0:	4649      	mov	r1, r9
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c0      	blx	r8
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0e6      	beq.n	80072b8 <_printf_common+0xa4>
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7d9      	b.n	80072a2 <_printf_common+0x8e>
	...

080072f0 <_printf_i>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	7e0f      	ldrb	r7, [r1, #24]
 80072f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f8:	2f78      	cmp	r7, #120	; 0x78
 80072fa:	4691      	mov	r9, r2
 80072fc:	4680      	mov	r8, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	469a      	mov	sl, r3
 8007302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007306:	d807      	bhi.n	8007318 <_printf_i+0x28>
 8007308:	2f62      	cmp	r7, #98	; 0x62
 800730a:	d80a      	bhi.n	8007322 <_printf_i+0x32>
 800730c:	2f00      	cmp	r7, #0
 800730e:	f000 80d8 	beq.w	80074c2 <_printf_i+0x1d2>
 8007312:	2f58      	cmp	r7, #88	; 0x58
 8007314:	f000 80a3 	beq.w	800745e <_printf_i+0x16e>
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007320:	e03a      	b.n	8007398 <_printf_i+0xa8>
 8007322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007326:	2b15      	cmp	r3, #21
 8007328:	d8f6      	bhi.n	8007318 <_printf_i+0x28>
 800732a:	a101      	add	r1, pc, #4	; (adr r1, 8007330 <_printf_i+0x40>)
 800732c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007330:	08007389 	.word	0x08007389
 8007334:	0800739d 	.word	0x0800739d
 8007338:	08007319 	.word	0x08007319
 800733c:	08007319 	.word	0x08007319
 8007340:	08007319 	.word	0x08007319
 8007344:	08007319 	.word	0x08007319
 8007348:	0800739d 	.word	0x0800739d
 800734c:	08007319 	.word	0x08007319
 8007350:	08007319 	.word	0x08007319
 8007354:	08007319 	.word	0x08007319
 8007358:	08007319 	.word	0x08007319
 800735c:	080074a9 	.word	0x080074a9
 8007360:	080073cd 	.word	0x080073cd
 8007364:	0800748b 	.word	0x0800748b
 8007368:	08007319 	.word	0x08007319
 800736c:	08007319 	.word	0x08007319
 8007370:	080074cb 	.word	0x080074cb
 8007374:	08007319 	.word	0x08007319
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007319 	.word	0x08007319
 8007380:	08007319 	.word	0x08007319
 8007384:	08007493 	.word	0x08007493
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	1d1a      	adds	r2, r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	602a      	str	r2, [r5, #0]
 8007390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007398:	2301      	movs	r3, #1
 800739a:	e0a3      	b.n	80074e4 <_printf_i+0x1f4>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	6829      	ldr	r1, [r5, #0]
 80073a0:	0606      	lsls	r6, r0, #24
 80073a2:	f101 0304 	add.w	r3, r1, #4
 80073a6:	d50a      	bpl.n	80073be <_printf_i+0xce>
 80073a8:	680e      	ldr	r6, [r1, #0]
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	da03      	bge.n	80073b8 <_printf_i+0xc8>
 80073b0:	232d      	movs	r3, #45	; 0x2d
 80073b2:	4276      	negs	r6, r6
 80073b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b8:	485e      	ldr	r0, [pc, #376]	; (8007534 <_printf_i+0x244>)
 80073ba:	230a      	movs	r3, #10
 80073bc:	e019      	b.n	80073f2 <_printf_i+0x102>
 80073be:	680e      	ldr	r6, [r1, #0]
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073c6:	bf18      	it	ne
 80073c8:	b236      	sxthne	r6, r6
 80073ca:	e7ef      	b.n	80073ac <_printf_i+0xbc>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	1d19      	adds	r1, r3, #4
 80073d2:	6029      	str	r1, [r5, #0]
 80073d4:	0601      	lsls	r1, r0, #24
 80073d6:	d501      	bpl.n	80073dc <_printf_i+0xec>
 80073d8:	681e      	ldr	r6, [r3, #0]
 80073da:	e002      	b.n	80073e2 <_printf_i+0xf2>
 80073dc:	0646      	lsls	r6, r0, #25
 80073de:	d5fb      	bpl.n	80073d8 <_printf_i+0xe8>
 80073e0:	881e      	ldrh	r6, [r3, #0]
 80073e2:	4854      	ldr	r0, [pc, #336]	; (8007534 <_printf_i+0x244>)
 80073e4:	2f6f      	cmp	r7, #111	; 0x6f
 80073e6:	bf0c      	ite	eq
 80073e8:	2308      	moveq	r3, #8
 80073ea:	230a      	movne	r3, #10
 80073ec:	2100      	movs	r1, #0
 80073ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073f2:	6865      	ldr	r5, [r4, #4]
 80073f4:	60a5      	str	r5, [r4, #8]
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	bfa2      	ittt	ge
 80073fa:	6821      	ldrge	r1, [r4, #0]
 80073fc:	f021 0104 	bicge.w	r1, r1, #4
 8007400:	6021      	strge	r1, [r4, #0]
 8007402:	b90e      	cbnz	r6, 8007408 <_printf_i+0x118>
 8007404:	2d00      	cmp	r5, #0
 8007406:	d04d      	beq.n	80074a4 <_printf_i+0x1b4>
 8007408:	4615      	mov	r5, r2
 800740a:	fbb6 f1f3 	udiv	r1, r6, r3
 800740e:	fb03 6711 	mls	r7, r3, r1, r6
 8007412:	5dc7      	ldrb	r7, [r0, r7]
 8007414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007418:	4637      	mov	r7, r6
 800741a:	42bb      	cmp	r3, r7
 800741c:	460e      	mov	r6, r1
 800741e:	d9f4      	bls.n	800740a <_printf_i+0x11a>
 8007420:	2b08      	cmp	r3, #8
 8007422:	d10b      	bne.n	800743c <_printf_i+0x14c>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	07de      	lsls	r6, r3, #31
 8007428:	d508      	bpl.n	800743c <_printf_i+0x14c>
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	6861      	ldr	r1, [r4, #4]
 800742e:	4299      	cmp	r1, r3
 8007430:	bfde      	ittt	le
 8007432:	2330      	movle	r3, #48	; 0x30
 8007434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800743c:	1b52      	subs	r2, r2, r5
 800743e:	6122      	str	r2, [r4, #16]
 8007440:	f8cd a000 	str.w	sl, [sp]
 8007444:	464b      	mov	r3, r9
 8007446:	aa03      	add	r2, sp, #12
 8007448:	4621      	mov	r1, r4
 800744a:	4640      	mov	r0, r8
 800744c:	f7ff fee2 	bl	8007214 <_printf_common>
 8007450:	3001      	adds	r0, #1
 8007452:	d14c      	bne.n	80074ee <_printf_i+0x1fe>
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	b004      	add	sp, #16
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	4835      	ldr	r0, [pc, #212]	; (8007534 <_printf_i+0x244>)
 8007460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007464:	6829      	ldr	r1, [r5, #0]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f851 6b04 	ldr.w	r6, [r1], #4
 800746c:	6029      	str	r1, [r5, #0]
 800746e:	061d      	lsls	r5, r3, #24
 8007470:	d514      	bpl.n	800749c <_printf_i+0x1ac>
 8007472:	07df      	lsls	r7, r3, #31
 8007474:	bf44      	itt	mi
 8007476:	f043 0320 	orrmi.w	r3, r3, #32
 800747a:	6023      	strmi	r3, [r4, #0]
 800747c:	b91e      	cbnz	r6, 8007486 <_printf_i+0x196>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	f023 0320 	bic.w	r3, r3, #32
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	2310      	movs	r3, #16
 8007488:	e7b0      	b.n	80073ec <_printf_i+0xfc>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	f043 0320 	orr.w	r3, r3, #32
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	2378      	movs	r3, #120	; 0x78
 8007494:	4828      	ldr	r0, [pc, #160]	; (8007538 <_printf_i+0x248>)
 8007496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800749a:	e7e3      	b.n	8007464 <_printf_i+0x174>
 800749c:	0659      	lsls	r1, r3, #25
 800749e:	bf48      	it	mi
 80074a0:	b2b6      	uxthmi	r6, r6
 80074a2:	e7e6      	b.n	8007472 <_printf_i+0x182>
 80074a4:	4615      	mov	r5, r2
 80074a6:	e7bb      	b.n	8007420 <_printf_i+0x130>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	6826      	ldr	r6, [r4, #0]
 80074ac:	6961      	ldr	r1, [r4, #20]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6028      	str	r0, [r5, #0]
 80074b2:	0635      	lsls	r5, r6, #24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	d501      	bpl.n	80074bc <_printf_i+0x1cc>
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <_printf_i+0x1d2>
 80074bc:	0670      	lsls	r0, r6, #25
 80074be:	d5fb      	bpl.n	80074b8 <_printf_i+0x1c8>
 80074c0:	8019      	strh	r1, [r3, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	4615      	mov	r5, r2
 80074c8:	e7ba      	b.n	8007440 <_printf_i+0x150>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	1d1a      	adds	r2, r3, #4
 80074ce:	602a      	str	r2, [r5, #0]
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7f8 fe8a 	bl	80001f0 <memchr>
 80074dc:	b108      	cbz	r0, 80074e2 <_printf_i+0x1f2>
 80074de:	1b40      	subs	r0, r0, r5
 80074e0:	6060      	str	r0, [r4, #4]
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	e7a8      	b.n	8007440 <_printf_i+0x150>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	462a      	mov	r2, r5
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d0ab      	beq.n	8007454 <_printf_i+0x164>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	d413      	bmi.n	800752a <_printf_i+0x23a>
 8007502:	68e0      	ldr	r0, [r4, #12]
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	4298      	cmp	r0, r3
 8007508:	bfb8      	it	lt
 800750a:	4618      	movlt	r0, r3
 800750c:	e7a4      	b.n	8007458 <_printf_i+0x168>
 800750e:	2301      	movs	r3, #1
 8007510:	4632      	mov	r2, r6
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d09b      	beq.n	8007454 <_printf_i+0x164>
 800751c:	3501      	adds	r5, #1
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	9903      	ldr	r1, [sp, #12]
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	42ab      	cmp	r3, r5
 8007526:	dcf2      	bgt.n	800750e <_printf_i+0x21e>
 8007528:	e7eb      	b.n	8007502 <_printf_i+0x212>
 800752a:	2500      	movs	r5, #0
 800752c:	f104 0619 	add.w	r6, r4, #25
 8007530:	e7f5      	b.n	800751e <_printf_i+0x22e>
 8007532:	bf00      	nop
 8007534:	08009c76 	.word	0x08009c76
 8007538:	08009c87 	.word	0x08009c87

0800753c <siprintf>:
 800753c:	b40e      	push	{r1, r2, r3}
 800753e:	b500      	push	{lr}
 8007540:	b09c      	sub	sp, #112	; 0x70
 8007542:	ab1d      	add	r3, sp, #116	; 0x74
 8007544:	9002      	str	r0, [sp, #8]
 8007546:	9006      	str	r0, [sp, #24]
 8007548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800754c:	4809      	ldr	r0, [pc, #36]	; (8007574 <siprintf+0x38>)
 800754e:	9107      	str	r1, [sp, #28]
 8007550:	9104      	str	r1, [sp, #16]
 8007552:	4909      	ldr	r1, [pc, #36]	; (8007578 <siprintf+0x3c>)
 8007554:	f853 2b04 	ldr.w	r2, [r3], #4
 8007558:	9105      	str	r1, [sp, #20]
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	a902      	add	r1, sp, #8
 8007560:	f001 fb78 	bl	8008c54 <_svfiprintf_r>
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	b01c      	add	sp, #112	; 0x70
 800756c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007570:	b003      	add	sp, #12
 8007572:	4770      	bx	lr
 8007574:	20000010 	.word	0x20000010
 8007578:	ffff0208 	.word	0xffff0208

0800757c <quorem>:
 800757c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	6903      	ldr	r3, [r0, #16]
 8007582:	690c      	ldr	r4, [r1, #16]
 8007584:	42a3      	cmp	r3, r4
 8007586:	4607      	mov	r7, r0
 8007588:	f2c0 8081 	blt.w	800768e <quorem+0x112>
 800758c:	3c01      	subs	r4, #1
 800758e:	f101 0814 	add.w	r8, r1, #20
 8007592:	f100 0514 	add.w	r5, r0, #20
 8007596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a4:	3301      	adds	r3, #1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b4:	d331      	bcc.n	800761a <quorem+0x9e>
 80075b6:	f04f 0e00 	mov.w	lr, #0
 80075ba:	4640      	mov	r0, r8
 80075bc:	46ac      	mov	ip, r5
 80075be:	46f2      	mov	sl, lr
 80075c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c4:	b293      	uxth	r3, r2
 80075c6:	fb06 e303 	mla	r3, r6, r3, lr
 80075ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ebaa 0303 	sub.w	r3, sl, r3
 80075d4:	f8dc a000 	ldr.w	sl, [ip]
 80075d8:	0c12      	lsrs	r2, r2, #16
 80075da:	fa13 f38a 	uxtah	r3, r3, sl
 80075de:	fb06 e202 	mla	r2, r6, r2, lr
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075ea:	b292      	uxth	r2, r2
 80075ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80075f8:	4581      	cmp	r9, r0
 80075fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007606:	d2db      	bcs.n	80075c0 <quorem+0x44>
 8007608:	f855 300b 	ldr.w	r3, [r5, fp]
 800760c:	b92b      	cbnz	r3, 800761a <quorem+0x9e>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3b04      	subs	r3, #4
 8007612:	429d      	cmp	r5, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d32e      	bcc.n	8007676 <quorem+0xfa>
 8007618:	613c      	str	r4, [r7, #16]
 800761a:	4638      	mov	r0, r7
 800761c:	f001 f8c6 	bl	80087ac <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	db24      	blt.n	800766e <quorem+0xf2>
 8007624:	3601      	adds	r6, #1
 8007626:	4628      	mov	r0, r5
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007630:	f8d0 e000 	ldr.w	lr, [r0]
 8007634:	b293      	uxth	r3, r2
 8007636:	ebac 0303 	sub.w	r3, ip, r3
 800763a:	0c12      	lsrs	r2, r2, #16
 800763c:	fa13 f38e 	uxtah	r3, r3, lr
 8007640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007648:	b29b      	uxth	r3, r3
 800764a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800764e:	45c1      	cmp	r9, r8
 8007650:	f840 3b04 	str.w	r3, [r0], #4
 8007654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007658:	d2e8      	bcs.n	800762c <quorem+0xb0>
 800765a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007662:	b922      	cbnz	r2, 800766e <quorem+0xf2>
 8007664:	3b04      	subs	r3, #4
 8007666:	429d      	cmp	r5, r3
 8007668:	461a      	mov	r2, r3
 800766a:	d30a      	bcc.n	8007682 <quorem+0x106>
 800766c:	613c      	str	r4, [r7, #16]
 800766e:	4630      	mov	r0, r6
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	3b04      	subs	r3, #4
 800767a:	2a00      	cmp	r2, #0
 800767c:	d1cc      	bne.n	8007618 <quorem+0x9c>
 800767e:	3c01      	subs	r4, #1
 8007680:	e7c7      	b.n	8007612 <quorem+0x96>
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	3b04      	subs	r3, #4
 8007686:	2a00      	cmp	r2, #0
 8007688:	d1f0      	bne.n	800766c <quorem+0xf0>
 800768a:	3c01      	subs	r4, #1
 800768c:	e7eb      	b.n	8007666 <quorem+0xea>
 800768e:	2000      	movs	r0, #0
 8007690:	e7ee      	b.n	8007670 <quorem+0xf4>
 8007692:	0000      	movs	r0, r0
 8007694:	0000      	movs	r0, r0
	...

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ed2d 8b04 	vpush	{d8-d9}
 80076a0:	ec57 6b10 	vmov	r6, r7, d0
 80076a4:	b093      	sub	sp, #76	; 0x4c
 80076a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076ac:	9106      	str	r1, [sp, #24]
 80076ae:	ee10 aa10 	vmov	sl, s0
 80076b2:	4604      	mov	r4, r0
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	930c      	str	r3, [sp, #48]	; 0x30
 80076b8:	46bb      	mov	fp, r7
 80076ba:	b975      	cbnz	r5, 80076da <_dtoa_r+0x42>
 80076bc:	2010      	movs	r0, #16
 80076be:	f000 fddd 	bl	800827c <malloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6260      	str	r0, [r4, #36]	; 0x24
 80076c6:	b920      	cbnz	r0, 80076d2 <_dtoa_r+0x3a>
 80076c8:	4ba7      	ldr	r3, [pc, #668]	; (8007968 <_dtoa_r+0x2d0>)
 80076ca:	21ea      	movs	r1, #234	; 0xea
 80076cc:	48a7      	ldr	r0, [pc, #668]	; (800796c <_dtoa_r+0x2d4>)
 80076ce:	f001 fbd1 	bl	8008e74 <__assert_func>
 80076d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076d6:	6005      	str	r5, [r0, #0]
 80076d8:	60c5      	str	r5, [r0, #12]
 80076da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	b151      	cbz	r1, 80076f6 <_dtoa_r+0x5e>
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	604a      	str	r2, [r1, #4]
 80076e4:	2301      	movs	r3, #1
 80076e6:	4093      	lsls	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fe1c 	bl	8008328 <_Bfree>
 80076f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	1e3b      	subs	r3, r7, #0
 80076f8:	bfaa      	itet	ge
 80076fa:	2300      	movge	r3, #0
 80076fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007700:	f8c8 3000 	strge.w	r3, [r8]
 8007704:	4b9a      	ldr	r3, [pc, #616]	; (8007970 <_dtoa_r+0x2d8>)
 8007706:	bfbc      	itt	lt
 8007708:	2201      	movlt	r2, #1
 800770a:	f8c8 2000 	strlt.w	r2, [r8]
 800770e:	ea33 030b 	bics.w	r3, r3, fp
 8007712:	d11b      	bne.n	800774c <_dtoa_r+0xb4>
 8007714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007716:	f242 730f 	movw	r3, #9999	; 0x270f
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007720:	4333      	orrs	r3, r6
 8007722:	f000 8592 	beq.w	800824a <_dtoa_r+0xbb2>
 8007726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007728:	b963      	cbnz	r3, 8007744 <_dtoa_r+0xac>
 800772a:	4b92      	ldr	r3, [pc, #584]	; (8007974 <_dtoa_r+0x2dc>)
 800772c:	e022      	b.n	8007774 <_dtoa_r+0xdc>
 800772e:	4b92      	ldr	r3, [pc, #584]	; (8007978 <_dtoa_r+0x2e0>)
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	3308      	adds	r3, #8
 8007734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	9801      	ldr	r0, [sp, #4]
 800773a:	b013      	add	sp, #76	; 0x4c
 800773c:	ecbd 8b04 	vpop	{d8-d9}
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	4b8b      	ldr	r3, [pc, #556]	; (8007974 <_dtoa_r+0x2dc>)
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	3303      	adds	r3, #3
 800774a:	e7f3      	b.n	8007734 <_dtoa_r+0x9c>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4650      	mov	r0, sl
 8007752:	4659      	mov	r1, fp
 8007754:	f7f9 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007758:	ec4b ab19 	vmov	d9, sl, fp
 800775c:	4680      	mov	r8, r0
 800775e:	b158      	cbz	r0, 8007778 <_dtoa_r+0xe0>
 8007760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007762:	2301      	movs	r3, #1
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 856b 	beq.w	8008244 <_dtoa_r+0xbac>
 800776e:	4883      	ldr	r0, [pc, #524]	; (800797c <_dtoa_r+0x2e4>)
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	1e43      	subs	r3, r0, #1
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	e7df      	b.n	8007738 <_dtoa_r+0xa0>
 8007778:	ec4b ab10 	vmov	d0, sl, fp
 800777c:	aa10      	add	r2, sp, #64	; 0x40
 800777e:	a911      	add	r1, sp, #68	; 0x44
 8007780:	4620      	mov	r0, r4
 8007782:	f001 f8b9 	bl	80088f8 <__d2b>
 8007786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800778a:	ee08 0a10 	vmov	s16, r0
 800778e:	2d00      	cmp	r5, #0
 8007790:	f000 8084 	beq.w	800789c <_dtoa_r+0x204>
 8007794:	ee19 3a90 	vmov	r3, s19
 8007798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077a0:	4656      	mov	r6, sl
 80077a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077ae:	4b74      	ldr	r3, [pc, #464]	; (8007980 <_dtoa_r+0x2e8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f8 fd6f 	bl	8000298 <__aeabi_dsub>
 80077ba:	a365      	add	r3, pc, #404	; (adr r3, 8007950 <_dtoa_r+0x2b8>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 ff22 	bl	8000608 <__aeabi_dmul>
 80077c4:	a364      	add	r3, pc, #400	; (adr r3, 8007958 <_dtoa_r+0x2c0>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f7f8 fd67 	bl	800029c <__adddf3>
 80077ce:	4606      	mov	r6, r0
 80077d0:	4628      	mov	r0, r5
 80077d2:	460f      	mov	r7, r1
 80077d4:	f7f8 feae 	bl	8000534 <__aeabi_i2d>
 80077d8:	a361      	add	r3, pc, #388	; (adr r3, 8007960 <_dtoa_r+0x2c8>)
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 ff13 	bl	8000608 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f8 fd57 	bl	800029c <__adddf3>
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	f7f9 f9b9 	bl	8000b68 <__aeabi_d2iz>
 80077f6:	2200      	movs	r2, #0
 80077f8:	9000      	str	r0, [sp, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f974 	bl	8000aec <__aeabi_dcmplt>
 8007804:	b150      	cbz	r0, 800781c <_dtoa_r+0x184>
 8007806:	9800      	ldr	r0, [sp, #0]
 8007808:	f7f8 fe94 	bl	8000534 <__aeabi_i2d>
 800780c:	4632      	mov	r2, r6
 800780e:	463b      	mov	r3, r7
 8007810:	f7f9 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8007814:	b910      	cbnz	r0, 800781c <_dtoa_r+0x184>
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	2b16      	cmp	r3, #22
 8007820:	d85a      	bhi.n	80078d8 <_dtoa_r+0x240>
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	4b57      	ldr	r3, [pc, #348]	; (8007984 <_dtoa_r+0x2ec>)
 8007826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	ec51 0b19 	vmov	r0, r1, d9
 8007832:	f7f9 f95b 	bl	8000aec <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d050      	beq.n	80078dc <_dtoa_r+0x244>
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	3b01      	subs	r3, #1
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2300      	movs	r3, #0
 8007842:	930b      	str	r3, [sp, #44]	; 0x2c
 8007844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007846:	1b5d      	subs	r5, r3, r5
 8007848:	1e6b      	subs	r3, r5, #1
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	bf45      	ittet	mi
 800784e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007852:	9304      	strmi	r3, [sp, #16]
 8007854:	2300      	movpl	r3, #0
 8007856:	2300      	movmi	r3, #0
 8007858:	bf4c      	ite	mi
 800785a:	9305      	strmi	r3, [sp, #20]
 800785c:	9304      	strpl	r3, [sp, #16]
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	db3d      	blt.n	80078e0 <_dtoa_r+0x248>
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	9a00      	ldr	r2, [sp, #0]
 8007868:	920a      	str	r2, [sp, #40]	; 0x28
 800786a:	4413      	add	r3, r2
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	2300      	movs	r3, #0
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	2b09      	cmp	r3, #9
 8007876:	f200 8089 	bhi.w	800798c <_dtoa_r+0x2f4>
 800787a:	2b05      	cmp	r3, #5
 800787c:	bfc4      	itt	gt
 800787e:	3b04      	subgt	r3, #4
 8007880:	9306      	strgt	r3, [sp, #24]
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	f1a3 0302 	sub.w	r3, r3, #2
 8007888:	bfcc      	ite	gt
 800788a:	2500      	movgt	r5, #0
 800788c:	2501      	movle	r5, #1
 800788e:	2b03      	cmp	r3, #3
 8007890:	f200 8087 	bhi.w	80079a2 <_dtoa_r+0x30a>
 8007894:	e8df f003 	tbb	[pc, r3]
 8007898:	59383a2d 	.word	0x59383a2d
 800789c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078a0:	441d      	add	r5, r3
 80078a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	bfc1      	itttt	gt
 80078aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ba:	bfda      	itte	le
 80078bc:	f1c3 0320 	rsble	r3, r3, #32
 80078c0:	fa06 f003 	lslle.w	r0, r6, r3
 80078c4:	4318      	orrgt	r0, r3
 80078c6:	f7f8 fe25 	bl	8000514 <__aeabi_ui2d>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4606      	mov	r6, r0
 80078ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078d2:	3d01      	subs	r5, #1
 80078d4:	930e      	str	r3, [sp, #56]	; 0x38
 80078d6:	e76a      	b.n	80077ae <_dtoa_r+0x116>
 80078d8:	2301      	movs	r3, #1
 80078da:	e7b2      	b.n	8007842 <_dtoa_r+0x1aa>
 80078dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80078de:	e7b1      	b.n	8007844 <_dtoa_r+0x1ac>
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	9a00      	ldr	r2, [sp, #0]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	4253      	negs	r3, r2
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	2300      	movs	r3, #0
 80078ee:	930a      	str	r3, [sp, #40]	; 0x28
 80078f0:	e7bf      	b.n	8007872 <_dtoa_r+0x1da>
 80078f2:	2300      	movs	r3, #0
 80078f4:	9308      	str	r3, [sp, #32]
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc55      	bgt.n	80079a8 <_dtoa_r+0x310>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007902:	461a      	mov	r2, r3
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	e00c      	b.n	8007922 <_dtoa_r+0x28a>
 8007908:	2301      	movs	r3, #1
 800790a:	e7f3      	b.n	80078f4 <_dtoa_r+0x25c>
 800790c:	2300      	movs	r3, #0
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	4413      	add	r3, r2
 8007916:	9302      	str	r3, [sp, #8]
 8007918:	3301      	adds	r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	bfb8      	it	lt
 8007920:	2301      	movlt	r3, #1
 8007922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007924:	2200      	movs	r2, #0
 8007926:	6042      	str	r2, [r0, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	f102 0614 	add.w	r6, r2, #20
 800792e:	429e      	cmp	r6, r3
 8007930:	6841      	ldr	r1, [r0, #4]
 8007932:	d93d      	bls.n	80079b0 <_dtoa_r+0x318>
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fcb7 	bl	80082a8 <_Balloc>
 800793a:	9001      	str	r0, [sp, #4]
 800793c:	2800      	cmp	r0, #0
 800793e:	d13b      	bne.n	80079b8 <_dtoa_r+0x320>
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <_dtoa_r+0x2f0>)
 8007942:	4602      	mov	r2, r0
 8007944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007948:	e6c0      	b.n	80076cc <_dtoa_r+0x34>
 800794a:	2301      	movs	r3, #1
 800794c:	e7df      	b.n	800790e <_dtoa_r+0x276>
 800794e:	bf00      	nop
 8007950:	636f4361 	.word	0x636f4361
 8007954:	3fd287a7 	.word	0x3fd287a7
 8007958:	8b60c8b3 	.word	0x8b60c8b3
 800795c:	3fc68a28 	.word	0x3fc68a28
 8007960:	509f79fb 	.word	0x509f79fb
 8007964:	3fd34413 	.word	0x3fd34413
 8007968:	08009ca5 	.word	0x08009ca5
 800796c:	08009cbc 	.word	0x08009cbc
 8007970:	7ff00000 	.word	0x7ff00000
 8007974:	08009ca1 	.word	0x08009ca1
 8007978:	08009c98 	.word	0x08009c98
 800797c:	08009c75 	.word	0x08009c75
 8007980:	3ff80000 	.word	0x3ff80000
 8007984:	08009db0 	.word	0x08009db0
 8007988:	08009d17 	.word	0x08009d17
 800798c:	2501      	movs	r5, #1
 800798e:	2300      	movs	r3, #0
 8007990:	9306      	str	r3, [sp, #24]
 8007992:	9508      	str	r5, [sp, #32]
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	2312      	movs	r3, #18
 80079a0:	e7b0      	b.n	8007904 <_dtoa_r+0x26c>
 80079a2:	2301      	movs	r3, #1
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	e7f5      	b.n	8007994 <_dtoa_r+0x2fc>
 80079a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ae:	e7b8      	b.n	8007922 <_dtoa_r+0x28a>
 80079b0:	3101      	adds	r1, #1
 80079b2:	6041      	str	r1, [r0, #4]
 80079b4:	0052      	lsls	r2, r2, #1
 80079b6:	e7b8      	b.n	800792a <_dtoa_r+0x292>
 80079b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ba:	9a01      	ldr	r2, [sp, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	2b0e      	cmp	r3, #14
 80079c2:	f200 809d 	bhi.w	8007b00 <_dtoa_r+0x468>
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	f000 809a 	beq.w	8007b00 <_dtoa_r+0x468>
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd32      	ble.n	8007a38 <_dtoa_r+0x3a0>
 80079d2:	4ab7      	ldr	r2, [pc, #732]	; (8007cb0 <_dtoa_r+0x618>)
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	05d8      	lsls	r0, r3, #23
 80079e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079e8:	d516      	bpl.n	8007a18 <_dtoa_r+0x380>
 80079ea:	4bb2      	ldr	r3, [pc, #712]	; (8007cb4 <_dtoa_r+0x61c>)
 80079ec:	ec51 0b19 	vmov	r0, r1, d9
 80079f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f4:	f7f8 ff32 	bl	800085c <__aeabi_ddiv>
 80079f8:	f007 070f 	and.w	r7, r7, #15
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	2503      	movs	r5, #3
 8007a02:	4eac      	ldr	r6, [pc, #688]	; (8007cb4 <_dtoa_r+0x61c>)
 8007a04:	b957      	cbnz	r7, 8007a1c <_dtoa_r+0x384>
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	f7f8 ff25 	bl	800085c <__aeabi_ddiv>
 8007a12:	4682      	mov	sl, r0
 8007a14:	468b      	mov	fp, r1
 8007a16:	e028      	b.n	8007a6a <_dtoa_r+0x3d2>
 8007a18:	2502      	movs	r5, #2
 8007a1a:	e7f2      	b.n	8007a02 <_dtoa_r+0x36a>
 8007a1c:	07f9      	lsls	r1, r7, #31
 8007a1e:	d508      	bpl.n	8007a32 <_dtoa_r+0x39a>
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	4680      	mov	r8, r0
 8007a30:	4689      	mov	r9, r1
 8007a32:	107f      	asrs	r7, r7, #1
 8007a34:	3608      	adds	r6, #8
 8007a36:	e7e5      	b.n	8007a04 <_dtoa_r+0x36c>
 8007a38:	f000 809b 	beq.w	8007b72 <_dtoa_r+0x4da>
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	4f9d      	ldr	r7, [pc, #628]	; (8007cb4 <_dtoa_r+0x61c>)
 8007a40:	425e      	negs	r6, r3
 8007a42:	4b9b      	ldr	r3, [pc, #620]	; (8007cb0 <_dtoa_r+0x618>)
 8007a44:	f006 020f 	and.w	r2, r6, #15
 8007a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	ec51 0b19 	vmov	r0, r1, d9
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	1136      	asrs	r6, r6, #4
 8007a5a:	4682      	mov	sl, r0
 8007a5c:	468b      	mov	fp, r1
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2502      	movs	r5, #2
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	d17a      	bne.n	8007b5c <_dtoa_r+0x4c4>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1d3      	bne.n	8007a12 <_dtoa_r+0x37a>
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8082 	beq.w	8007b76 <_dtoa_r+0x4de>
 8007a72:	4b91      	ldr	r3, [pc, #580]	; (8007cb8 <_dtoa_r+0x620>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4650      	mov	r0, sl
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f7f9 f837 	bl	8000aec <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d079      	beq.n	8007b76 <_dtoa_r+0x4de>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d076      	beq.n	8007b76 <_dtoa_r+0x4de>
 8007a88:	9b02      	ldr	r3, [sp, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd36      	ble.n	8007afc <_dtoa_r+0x464>
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	4650      	mov	r0, sl
 8007a92:	4659      	mov	r1, fp
 8007a94:	1e5f      	subs	r7, r3, #1
 8007a96:	2200      	movs	r2, #0
 8007a98:	4b88      	ldr	r3, [pc, #544]	; (8007cbc <_dtoa_r+0x624>)
 8007a9a:	f7f8 fdb5 	bl	8000608 <__aeabi_dmul>
 8007a9e:	9e02      	ldr	r6, [sp, #8]
 8007aa0:	4682      	mov	sl, r0
 8007aa2:	468b      	mov	fp, r1
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f7f8 fd44 	bl	8000534 <__aeabi_i2d>
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <_dtoa_r+0x628>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f7f8 fbf0 	bl	800029c <__adddf3>
 8007abc:	46d0      	mov	r8, sl
 8007abe:	46d9      	mov	r9, fp
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d158      	bne.n	8007b7c <_dtoa_r+0x4e4>
 8007aca:	4b7e      	ldr	r3, [pc, #504]	; (8007cc4 <_dtoa_r+0x62c>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 fbe1 	bl	8000298 <__aeabi_dsub>
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	465b      	mov	r3, fp
 8007ada:	4680      	mov	r8, r0
 8007adc:	4689      	mov	r9, r1
 8007ade:	f7f9 f823 	bl	8000b28 <__aeabi_dcmpgt>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f040 8295 	bne.w	8008012 <_dtoa_r+0x97a>
 8007ae8:	4652      	mov	r2, sl
 8007aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fffb 	bl	8000aec <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f040 8289 	bne.w	800800e <_dtoa_r+0x976>
 8007afc:	ec5b ab19 	vmov	sl, fp, d9
 8007b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f2c0 8148 	blt.w	8007d98 <_dtoa_r+0x700>
 8007b08:	9a00      	ldr	r2, [sp, #0]
 8007b0a:	2a0e      	cmp	r2, #14
 8007b0c:	f300 8144 	bgt.w	8007d98 <_dtoa_r+0x700>
 8007b10:	4b67      	ldr	r3, [pc, #412]	; (8007cb0 <_dtoa_r+0x618>)
 8007b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f280 80d5 	bge.w	8007ccc <_dtoa_r+0x634>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f300 80d1 	bgt.w	8007ccc <_dtoa_r+0x634>
 8007b2a:	f040 826f 	bne.w	800800c <_dtoa_r+0x974>
 8007b2e:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <_dtoa_r+0x62c>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	4640      	mov	r0, r8
 8007b34:	4649      	mov	r1, r9
 8007b36:	f7f8 fd67 	bl	8000608 <__aeabi_dmul>
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	f7f8 ffe9 	bl	8000b14 <__aeabi_dcmpge>
 8007b42:	9e03      	ldr	r6, [sp, #12]
 8007b44:	4637      	mov	r7, r6
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f040 8245 	bne.w	8007fd6 <_dtoa_r+0x93e>
 8007b4c:	9d01      	ldr	r5, [sp, #4]
 8007b4e:	2331      	movs	r3, #49	; 0x31
 8007b50:	f805 3b01 	strb.w	r3, [r5], #1
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	e240      	b.n	8007fde <_dtoa_r+0x946>
 8007b5c:	07f2      	lsls	r2, r6, #31
 8007b5e:	d505      	bpl.n	8007b6c <_dtoa_r+0x4d4>
 8007b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b64:	f7f8 fd50 	bl	8000608 <__aeabi_dmul>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	1076      	asrs	r6, r6, #1
 8007b6e:	3708      	adds	r7, #8
 8007b70:	e777      	b.n	8007a62 <_dtoa_r+0x3ca>
 8007b72:	2502      	movs	r5, #2
 8007b74:	e779      	b.n	8007a6a <_dtoa_r+0x3d2>
 8007b76:	9f00      	ldr	r7, [sp, #0]
 8007b78:	9e03      	ldr	r6, [sp, #12]
 8007b7a:	e794      	b.n	8007aa6 <_dtoa_r+0x40e>
 8007b7c:	9901      	ldr	r1, [sp, #4]
 8007b7e:	4b4c      	ldr	r3, [pc, #304]	; (8007cb0 <_dtoa_r+0x618>)
 8007b80:	4431      	add	r1, r6
 8007b82:	910d      	str	r1, [sp, #52]	; 0x34
 8007b84:	9908      	ldr	r1, [sp, #32]
 8007b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	d043      	beq.n	8007c1a <_dtoa_r+0x582>
 8007b92:	494d      	ldr	r1, [pc, #308]	; (8007cc8 <_dtoa_r+0x630>)
 8007b94:	2000      	movs	r0, #0
 8007b96:	f7f8 fe61 	bl	800085c <__aeabi_ddiv>
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f7f8 fb7b 	bl	8000298 <__aeabi_dsub>
 8007ba2:	9d01      	ldr	r5, [sp, #4]
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7f8 ffdc 	bl	8000b68 <__aeabi_d2iz>
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	f7f8 fcbf 	bl	8000534 <__aeabi_i2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb6b 	bl	8000298 <__aeabi_dsub>
 8007bc2:	3630      	adds	r6, #48	; 0x30
 8007bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	465b      	mov	r3, fp
 8007bcc:	4680      	mov	r8, r0
 8007bce:	4689      	mov	r9, r1
 8007bd0:	f7f8 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d163      	bne.n	8007ca0 <_dtoa_r+0x608>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	4936      	ldr	r1, [pc, #216]	; (8007cb8 <_dtoa_r+0x620>)
 8007bde:	2000      	movs	r0, #0
 8007be0:	f7f8 fb5a 	bl	8000298 <__aeabi_dsub>
 8007be4:	4652      	mov	r2, sl
 8007be6:	465b      	mov	r3, fp
 8007be8:	f7f8 ff80 	bl	8000aec <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 80b5 	bne.w	8007d5c <_dtoa_r+0x6c4>
 8007bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	d081      	beq.n	8007afc <_dtoa_r+0x464>
 8007bf8:	4b30      	ldr	r3, [pc, #192]	; (8007cbc <_dtoa_r+0x624>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	4659      	mov	r1, fp
 8007c00:	f7f8 fd02 	bl	8000608 <__aeabi_dmul>
 8007c04:	4b2d      	ldr	r3, [pc, #180]	; (8007cbc <_dtoa_r+0x624>)
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7f8 fcfa 	bl	8000608 <__aeabi_dmul>
 8007c14:	4680      	mov	r8, r0
 8007c16:	4689      	mov	r9, r1
 8007c18:	e7c6      	b.n	8007ba8 <_dtoa_r+0x510>
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fcf3 	bl	8000608 <__aeabi_dmul>
 8007c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c24:	9d01      	ldr	r5, [sp, #4]
 8007c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c28:	4682      	mov	sl, r0
 8007c2a:	468b      	mov	fp, r1
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7f8 ff9a 	bl	8000b68 <__aeabi_d2iz>
 8007c34:	4606      	mov	r6, r0
 8007c36:	f7f8 fc7d 	bl	8000534 <__aeabi_i2d>
 8007c3a:	3630      	adds	r6, #48	; 0x30
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4640      	mov	r0, r8
 8007c42:	4649      	mov	r1, r9
 8007c44:	f7f8 fb28 	bl	8000298 <__aeabi_dsub>
 8007c48:	f805 6b01 	strb.w	r6, [r5], #1
 8007c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	4680      	mov	r8, r0
 8007c52:	4689      	mov	r9, r1
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	d124      	bne.n	8007ca4 <_dtoa_r+0x60c>
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <_dtoa_r+0x630>)
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fb1c 	bl	800029c <__adddf3>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff5c 	bl	8000b28 <__aeabi_dcmpgt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d173      	bne.n	8007d5c <_dtoa_r+0x6c4>
 8007c74:	4652      	mov	r2, sl
 8007c76:	465b      	mov	r3, fp
 8007c78:	4913      	ldr	r1, [pc, #76]	; (8007cc8 <_dtoa_r+0x630>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fb0c 	bl	8000298 <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7f8 ff30 	bl	8000aec <__aeabi_dcmplt>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f43f af35 	beq.w	8007afc <_dtoa_r+0x464>
 8007c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c94:	1e6b      	subs	r3, r5, #1
 8007c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c9c:	2b30      	cmp	r3, #48	; 0x30
 8007c9e:	d0f8      	beq.n	8007c92 <_dtoa_r+0x5fa>
 8007ca0:	9700      	str	r7, [sp, #0]
 8007ca2:	e049      	b.n	8007d38 <_dtoa_r+0x6a0>
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_dtoa_r+0x624>)
 8007ca6:	f7f8 fcaf 	bl	8000608 <__aeabi_dmul>
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	e7bd      	b.n	8007c2c <_dtoa_r+0x594>
 8007cb0:	08009db0 	.word	0x08009db0
 8007cb4:	08009d88 	.word	0x08009d88
 8007cb8:	3ff00000 	.word	0x3ff00000
 8007cbc:	40240000 	.word	0x40240000
 8007cc0:	401c0000 	.word	0x401c0000
 8007cc4:	40140000 	.word	0x40140000
 8007cc8:	3fe00000 	.word	0x3fe00000
 8007ccc:	9d01      	ldr	r5, [sp, #4]
 8007cce:	4656      	mov	r6, sl
 8007cd0:	465f      	mov	r7, fp
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fdbf 	bl	800085c <__aeabi_ddiv>
 8007cde:	f7f8 ff43 	bl	8000b68 <__aeabi_d2iz>
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	f7f8 fc26 	bl	8000534 <__aeabi_i2d>
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	f7f8 fc8c 	bl	8000608 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007cfc:	f7f8 facc 	bl	8000298 <__aeabi_dsub>
 8007d00:	f805 6b01 	strb.w	r6, [r5], #1
 8007d04:	9e01      	ldr	r6, [sp, #4]
 8007d06:	9f03      	ldr	r7, [sp, #12]
 8007d08:	1bae      	subs	r6, r5, r6
 8007d0a:	42b7      	cmp	r7, r6
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	d135      	bne.n	8007d7e <_dtoa_r+0x6e6>
 8007d12:	f7f8 fac3 	bl	800029c <__adddf3>
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	f7f8 ff03 	bl	8000b28 <__aeabi_dcmpgt>
 8007d22:	b9d0      	cbnz	r0, 8007d5a <_dtoa_r+0x6c2>
 8007d24:	4642      	mov	r2, r8
 8007d26:	464b      	mov	r3, r9
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d30:	b110      	cbz	r0, 8007d38 <_dtoa_r+0x6a0>
 8007d32:	f01a 0f01 	tst.w	sl, #1
 8007d36:	d110      	bne.n	8007d5a <_dtoa_r+0x6c2>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	f000 faf3 	bl	8008328 <_Bfree>
 8007d42:	2300      	movs	r3, #0
 8007d44:	9800      	ldr	r0, [sp, #0]
 8007d46:	702b      	strb	r3, [r5, #0]
 8007d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	6018      	str	r0, [r3, #0]
 8007d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f43f acf1 	beq.w	8007738 <_dtoa_r+0xa0>
 8007d56:	601d      	str	r5, [r3, #0]
 8007d58:	e4ee      	b.n	8007738 <_dtoa_r+0xa0>
 8007d5a:	9f00      	ldr	r7, [sp, #0]
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	461d      	mov	r5, r3
 8007d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d64:	2a39      	cmp	r2, #57	; 0x39
 8007d66:	d106      	bne.n	8007d76 <_dtoa_r+0x6de>
 8007d68:	9a01      	ldr	r2, [sp, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1f7      	bne.n	8007d5e <_dtoa_r+0x6c6>
 8007d6e:	9901      	ldr	r1, [sp, #4]
 8007d70:	2230      	movs	r2, #48	; 0x30
 8007d72:	3701      	adds	r7, #1
 8007d74:	700a      	strb	r2, [r1, #0]
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	3201      	adds	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e790      	b.n	8007ca0 <_dtoa_r+0x608>
 8007d7e:	4ba6      	ldr	r3, [pc, #664]	; (8008018 <_dtoa_r+0x980>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7f8 fc41 	bl	8000608 <__aeabi_dmul>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	f7f8 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d09d      	beq.n	8007cd2 <_dtoa_r+0x63a>
 8007d96:	e7cf      	b.n	8007d38 <_dtoa_r+0x6a0>
 8007d98:	9a08      	ldr	r2, [sp, #32]
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	f000 80d7 	beq.w	8007f4e <_dtoa_r+0x8b6>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	2a01      	cmp	r2, #1
 8007da4:	f300 80ba 	bgt.w	8007f1c <_dtoa_r+0x884>
 8007da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	f000 80b2 	beq.w	8007f14 <_dtoa_r+0x87c>
 8007db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007db4:	9e07      	ldr	r6, [sp, #28]
 8007db6:	9d04      	ldr	r5, [sp, #16]
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	441a      	add	r2, r3
 8007dbc:	9204      	str	r2, [sp, #16]
 8007dbe:	9a05      	ldr	r2, [sp, #20]
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	441a      	add	r2, r3
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	9205      	str	r2, [sp, #20]
 8007dc8:	f000 fb66 	bl	8008498 <__i2b>
 8007dcc:	4607      	mov	r7, r0
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	dd0c      	ble.n	8007dec <_dtoa_r+0x754>
 8007dd2:	9b05      	ldr	r3, [sp, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd09      	ble.n	8007dec <_dtoa_r+0x754>
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	9a04      	ldr	r2, [sp, #16]
 8007ddc:	bfa8      	it	ge
 8007dde:	462b      	movge	r3, r5
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	9204      	str	r2, [sp, #16]
 8007de4:	9a05      	ldr	r2, [sp, #20]
 8007de6:	1aed      	subs	r5, r5, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	9305      	str	r3, [sp, #20]
 8007dec:	9b07      	ldr	r3, [sp, #28]
 8007dee:	b31b      	cbz	r3, 8007e38 <_dtoa_r+0x7a0>
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80af 	beq.w	8007f56 <_dtoa_r+0x8be>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	dd13      	ble.n	8007e24 <_dtoa_r+0x78c>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fc09 	bl	8008618 <__pow5mult>
 8007e06:	ee18 2a10 	vmov	r2, s16
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fb58 	bl	80084c4 <__multiply>
 8007e14:	ee18 1a10 	vmov	r1, s16
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 fa84 	bl	8008328 <_Bfree>
 8007e20:	ee08 8a10 	vmov	s16, r8
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	1b9a      	subs	r2, r3, r6
 8007e28:	d006      	beq.n	8007e38 <_dtoa_r+0x7a0>
 8007e2a:	ee18 1a10 	vmov	r1, s16
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fbf2 	bl	8008618 <__pow5mult>
 8007e34:	ee08 0a10 	vmov	s16, r0
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fb2c 	bl	8008498 <__i2b>
 8007e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	4606      	mov	r6, r0
 8007e46:	f340 8088 	ble.w	8007f5a <_dtoa_r+0x8c2>
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fbe2 	bl	8008618 <__pow5mult>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	4606      	mov	r6, r0
 8007e5a:	f340 8081 	ble.w	8007f60 <_dtoa_r+0x8c8>
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	6933      	ldr	r3, [r6, #16]
 8007e64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e68:	6918      	ldr	r0, [r3, #16]
 8007e6a:	f000 fac5 	bl	80083f8 <__hi0bits>
 8007e6e:	f1c0 0020 	rsb	r0, r0, #32
 8007e72:	9b05      	ldr	r3, [sp, #20]
 8007e74:	4418      	add	r0, r3
 8007e76:	f010 001f 	ands.w	r0, r0, #31
 8007e7a:	f000 8092 	beq.w	8007fa2 <_dtoa_r+0x90a>
 8007e7e:	f1c0 0320 	rsb	r3, r0, #32
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	f340 808a 	ble.w	8007f9c <_dtoa_r+0x904>
 8007e88:	f1c0 001c 	rsb	r0, r0, #28
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4403      	add	r3, r0
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	4403      	add	r3, r0
 8007e96:	4405      	add	r5, r0
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd07      	ble.n	8007eb0 <_dtoa_r+0x818>
 8007ea0:	ee18 1a10 	vmov	r1, s16
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 fc10 	bl	80086cc <__lshift>
 8007eac:	ee08 0a10 	vmov	s16, r0
 8007eb0:	9b05      	ldr	r3, [sp, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	dd05      	ble.n	8007ec2 <_dtoa_r+0x82a>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fc06 	bl	80086cc <__lshift>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d06e      	beq.n	8007fa6 <_dtoa_r+0x90e>
 8007ec8:	ee18 0a10 	vmov	r0, s16
 8007ecc:	4631      	mov	r1, r6
 8007ece:	f000 fc6d 	bl	80087ac <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	da67      	bge.n	8007fa6 <_dtoa_r+0x90e>
 8007ed6:	9b00      	ldr	r3, [sp, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fa41 	bl	800836c <__multadd>
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	ee08 0a10 	vmov	s16, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 81b1 	beq.w	8008258 <_dtoa_r+0xbc0>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4639      	mov	r1, r7
 8007efa:	220a      	movs	r2, #10
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 fa35 	bl	800836c <__multadd>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	4607      	mov	r7, r0
 8007f08:	f300 808e 	bgt.w	8008028 <_dtoa_r+0x990>
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	dc51      	bgt.n	8007fb6 <_dtoa_r+0x91e>
 8007f12:	e089      	b.n	8008028 <_dtoa_r+0x990>
 8007f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f1a:	e74b      	b.n	8007db4 <_dtoa_r+0x71c>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	1e5e      	subs	r6, r3, #1
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	42b3      	cmp	r3, r6
 8007f24:	bfbf      	itttt	lt
 8007f26:	9b07      	ldrlt	r3, [sp, #28]
 8007f28:	9607      	strlt	r6, [sp, #28]
 8007f2a:	1af2      	sublt	r2, r6, r3
 8007f2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f2e:	bfb6      	itet	lt
 8007f30:	189b      	addlt	r3, r3, r2
 8007f32:	1b9e      	subge	r6, r3, r6
 8007f34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	bfb8      	it	lt
 8007f3a:	2600      	movlt	r6, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfb7      	itett	lt
 8007f40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f48:	1a9d      	sublt	r5, r3, r2
 8007f4a:	2300      	movlt	r3, #0
 8007f4c:	e734      	b.n	8007db8 <_dtoa_r+0x720>
 8007f4e:	9e07      	ldr	r6, [sp, #28]
 8007f50:	9d04      	ldr	r5, [sp, #16]
 8007f52:	9f08      	ldr	r7, [sp, #32]
 8007f54:	e73b      	b.n	8007dce <_dtoa_r+0x736>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	e767      	b.n	8007e2a <_dtoa_r+0x792>
 8007f5a:	9b06      	ldr	r3, [sp, #24]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	dc18      	bgt.n	8007f92 <_dtoa_r+0x8fa>
 8007f60:	f1ba 0f00 	cmp.w	sl, #0
 8007f64:	d115      	bne.n	8007f92 <_dtoa_r+0x8fa>
 8007f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f6a:	b993      	cbnz	r3, 8007f92 <_dtoa_r+0x8fa>
 8007f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f70:	0d1b      	lsrs	r3, r3, #20
 8007f72:	051b      	lsls	r3, r3, #20
 8007f74:	b183      	cbz	r3, 8007f98 <_dtoa_r+0x900>
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9b05      	ldr	r3, [sp, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	f04f 0801 	mov.w	r8, #1
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f47f af6a 	bne.w	8007e62 <_dtoa_r+0x7ca>
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e76f      	b.n	8007e72 <_dtoa_r+0x7da>
 8007f92:	f04f 0800 	mov.w	r8, #0
 8007f96:	e7f6      	b.n	8007f86 <_dtoa_r+0x8ee>
 8007f98:	4698      	mov	r8, r3
 8007f9a:	e7f4      	b.n	8007f86 <_dtoa_r+0x8ee>
 8007f9c:	f43f af7d 	beq.w	8007e9a <_dtoa_r+0x802>
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	301c      	adds	r0, #28
 8007fa4:	e772      	b.n	8007e8c <_dtoa_r+0x7f4>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc37      	bgt.n	800801c <_dtoa_r+0x984>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dd34      	ble.n	800801c <_dtoa_r+0x984>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	9302      	str	r3, [sp, #8]
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	b96b      	cbnz	r3, 8007fd6 <_dtoa_r+0x93e>
 8007fba:	4631      	mov	r1, r6
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f9d4 	bl	800836c <__multadd>
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	ee18 0a10 	vmov	r0, s16
 8007fcc:	f000 fbee 	bl	80087ac <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f73f adbb 	bgt.w	8007b4c <_dtoa_r+0x4b4>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	9d01      	ldr	r5, [sp, #4]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 f99f 	bl	8008328 <_Bfree>
 8007fea:	2f00      	cmp	r7, #0
 8007fec:	f43f aea4 	beq.w	8007d38 <_dtoa_r+0x6a0>
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	d005      	beq.n	8008002 <_dtoa_r+0x96a>
 8007ff6:	45b8      	cmp	r8, r7
 8007ff8:	d003      	beq.n	8008002 <_dtoa_r+0x96a>
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 f993 	bl	8008328 <_Bfree>
 8008002:	4639      	mov	r1, r7
 8008004:	4620      	mov	r0, r4
 8008006:	f000 f98f 	bl	8008328 <_Bfree>
 800800a:	e695      	b.n	8007d38 <_dtoa_r+0x6a0>
 800800c:	2600      	movs	r6, #0
 800800e:	4637      	mov	r7, r6
 8008010:	e7e1      	b.n	8007fd6 <_dtoa_r+0x93e>
 8008012:	9700      	str	r7, [sp, #0]
 8008014:	4637      	mov	r7, r6
 8008016:	e599      	b.n	8007b4c <_dtoa_r+0x4b4>
 8008018:	40240000 	.word	0x40240000
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80ca 	beq.w	80081b8 <_dtoa_r+0xb20>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	2d00      	cmp	r5, #0
 800802a:	dd05      	ble.n	8008038 <_dtoa_r+0x9a0>
 800802c:	4639      	mov	r1, r7
 800802e:	462a      	mov	r2, r5
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fb4b 	bl	80086cc <__lshift>
 8008036:	4607      	mov	r7, r0
 8008038:	f1b8 0f00 	cmp.w	r8, #0
 800803c:	d05b      	beq.n	80080f6 <_dtoa_r+0xa5e>
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f931 	bl	80082a8 <_Balloc>
 8008046:	4605      	mov	r5, r0
 8008048:	b928      	cbnz	r0, 8008056 <_dtoa_r+0x9be>
 800804a:	4b87      	ldr	r3, [pc, #540]	; (8008268 <_dtoa_r+0xbd0>)
 800804c:	4602      	mov	r2, r0
 800804e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008052:	f7ff bb3b 	b.w	80076cc <_dtoa_r+0x34>
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	3202      	adds	r2, #2
 800805a:	0092      	lsls	r2, r2, #2
 800805c:	f107 010c 	add.w	r1, r7, #12
 8008060:	300c      	adds	r0, #12
 8008062:	f000 f913 	bl	800828c <memcpy>
 8008066:	2201      	movs	r2, #1
 8008068:	4629      	mov	r1, r5
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fb2e 	bl	80086cc <__lshift>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	f103 0901 	add.w	r9, r3, #1
 8008076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800807a:	4413      	add	r3, r2
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	f00a 0301 	and.w	r3, sl, #1
 8008082:	46b8      	mov	r8, r7
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	4607      	mov	r7, r0
 8008088:	4631      	mov	r1, r6
 800808a:	ee18 0a10 	vmov	r0, s16
 800808e:	f7ff fa75 	bl	800757c <quorem>
 8008092:	4641      	mov	r1, r8
 8008094:	9002      	str	r0, [sp, #8]
 8008096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800809a:	ee18 0a10 	vmov	r0, s16
 800809e:	f000 fb85 	bl	80087ac <__mcmp>
 80080a2:	463a      	mov	r2, r7
 80080a4:	9003      	str	r0, [sp, #12]
 80080a6:	4631      	mov	r1, r6
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 fb9b 	bl	80087e4 <__mdiff>
 80080ae:	68c2      	ldr	r2, [r0, #12]
 80080b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080b4:	4605      	mov	r5, r0
 80080b6:	bb02      	cbnz	r2, 80080fa <_dtoa_r+0xa62>
 80080b8:	4601      	mov	r1, r0
 80080ba:	ee18 0a10 	vmov	r0, s16
 80080be:	f000 fb75 	bl	80087ac <__mcmp>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4629      	mov	r1, r5
 80080c6:	4620      	mov	r0, r4
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	f000 f92d 	bl	8008328 <_Bfree>
 80080ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080d2:	ea43 0102 	orr.w	r1, r3, r2
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	430b      	orrs	r3, r1
 80080da:	464d      	mov	r5, r9
 80080dc:	d10f      	bne.n	80080fe <_dtoa_r+0xa66>
 80080de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080e2:	d02a      	beq.n	800813a <_dtoa_r+0xaa2>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dd02      	ble.n	80080f0 <_dtoa_r+0xa58>
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80080f0:	f88b a000 	strb.w	sl, [fp]
 80080f4:	e775      	b.n	8007fe2 <_dtoa_r+0x94a>
 80080f6:	4638      	mov	r0, r7
 80080f8:	e7ba      	b.n	8008070 <_dtoa_r+0x9d8>
 80080fa:	2201      	movs	r2, #1
 80080fc:	e7e2      	b.n	80080c4 <_dtoa_r+0xa2c>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db04      	blt.n	800810e <_dtoa_r+0xa76>
 8008104:	9906      	ldr	r1, [sp, #24]
 8008106:	430b      	orrs	r3, r1
 8008108:	9904      	ldr	r1, [sp, #16]
 800810a:	430b      	orrs	r3, r1
 800810c:	d122      	bne.n	8008154 <_dtoa_r+0xabc>
 800810e:	2a00      	cmp	r2, #0
 8008110:	ddee      	ble.n	80080f0 <_dtoa_r+0xa58>
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	2201      	movs	r2, #1
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fad7 	bl	80086cc <__lshift>
 800811e:	4631      	mov	r1, r6
 8008120:	ee08 0a10 	vmov	s16, r0
 8008124:	f000 fb42 	bl	80087ac <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	dc03      	bgt.n	8008134 <_dtoa_r+0xa9c>
 800812c:	d1e0      	bne.n	80080f0 <_dtoa_r+0xa58>
 800812e:	f01a 0f01 	tst.w	sl, #1
 8008132:	d0dd      	beq.n	80080f0 <_dtoa_r+0xa58>
 8008134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008138:	d1d7      	bne.n	80080ea <_dtoa_r+0xa52>
 800813a:	2339      	movs	r3, #57	; 0x39
 800813c:	f88b 3000 	strb.w	r3, [fp]
 8008140:	462b      	mov	r3, r5
 8008142:	461d      	mov	r5, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800814a:	2a39      	cmp	r2, #57	; 0x39
 800814c:	d071      	beq.n	8008232 <_dtoa_r+0xb9a>
 800814e:	3201      	adds	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e746      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008154:	2a00      	cmp	r2, #0
 8008156:	dd07      	ble.n	8008168 <_dtoa_r+0xad0>
 8008158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800815c:	d0ed      	beq.n	800813a <_dtoa_r+0xaa2>
 800815e:	f10a 0301 	add.w	r3, sl, #1
 8008162:	f88b 3000 	strb.w	r3, [fp]
 8008166:	e73c      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800816e:	4599      	cmp	r9, r3
 8008170:	d047      	beq.n	8008202 <_dtoa_r+0xb6a>
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f8f6 	bl	800836c <__multadd>
 8008180:	45b8      	cmp	r8, r7
 8008182:	ee08 0a10 	vmov	s16, r0
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	f04f 020a 	mov.w	r2, #10
 800818e:	4641      	mov	r1, r8
 8008190:	4620      	mov	r0, r4
 8008192:	d106      	bne.n	80081a2 <_dtoa_r+0xb0a>
 8008194:	f000 f8ea 	bl	800836c <__multadd>
 8008198:	4680      	mov	r8, r0
 800819a:	4607      	mov	r7, r0
 800819c:	f109 0901 	add.w	r9, r9, #1
 80081a0:	e772      	b.n	8008088 <_dtoa_r+0x9f0>
 80081a2:	f000 f8e3 	bl	800836c <__multadd>
 80081a6:	4639      	mov	r1, r7
 80081a8:	4680      	mov	r8, r0
 80081aa:	2300      	movs	r3, #0
 80081ac:	220a      	movs	r2, #10
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f8dc 	bl	800836c <__multadd>
 80081b4:	4607      	mov	r7, r0
 80081b6:	e7f1      	b.n	800819c <_dtoa_r+0xb04>
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	9d01      	ldr	r5, [sp, #4]
 80081be:	ee18 0a10 	vmov	r0, s16
 80081c2:	4631      	mov	r1, r6
 80081c4:	f7ff f9da 	bl	800757c <quorem>
 80081c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	f805 ab01 	strb.w	sl, [r5], #1
 80081d2:	1aea      	subs	r2, r5, r3
 80081d4:	9b02      	ldr	r3, [sp, #8]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	dd09      	ble.n	80081ee <_dtoa_r+0xb56>
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f8c2 	bl	800836c <__multadd>
 80081e8:	ee08 0a10 	vmov	s16, r0
 80081ec:	e7e7      	b.n	80081be <_dtoa_r+0xb26>
 80081ee:	9b02      	ldr	r3, [sp, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfc8      	it	gt
 80081f4:	461d      	movgt	r5, r3
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	bfd8      	it	le
 80081fa:	2501      	movle	r5, #1
 80081fc:	441d      	add	r5, r3
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	ee18 1a10 	vmov	r1, s16
 8008206:	2201      	movs	r2, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fa5f 	bl	80086cc <__lshift>
 800820e:	4631      	mov	r1, r6
 8008210:	ee08 0a10 	vmov	s16, r0
 8008214:	f000 faca 	bl	80087ac <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	dc91      	bgt.n	8008140 <_dtoa_r+0xaa8>
 800821c:	d102      	bne.n	8008224 <_dtoa_r+0xb8c>
 800821e:	f01a 0f01 	tst.w	sl, #1
 8008222:	d18d      	bne.n	8008140 <_dtoa_r+0xaa8>
 8008224:	462b      	mov	r3, r5
 8008226:	461d      	mov	r5, r3
 8008228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800822c:	2a30      	cmp	r2, #48	; 0x30
 800822e:	d0fa      	beq.n	8008226 <_dtoa_r+0xb8e>
 8008230:	e6d7      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d184      	bne.n	8008142 <_dtoa_r+0xaaa>
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	2331      	movs	r3, #49	; 0x31
 8008240:	7013      	strb	r3, [r2, #0]
 8008242:	e6ce      	b.n	8007fe2 <_dtoa_r+0x94a>
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <_dtoa_r+0xbd4>)
 8008246:	f7ff ba95 	b.w	8007774 <_dtoa_r+0xdc>
 800824a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800824c:	2b00      	cmp	r3, #0
 800824e:	f47f aa6e 	bne.w	800772e <_dtoa_r+0x96>
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <_dtoa_r+0xbd8>)
 8008254:	f7ff ba8e 	b.w	8007774 <_dtoa_r+0xdc>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dcae      	bgt.n	80081bc <_dtoa_r+0xb24>
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	2b02      	cmp	r3, #2
 8008262:	f73f aea8 	bgt.w	8007fb6 <_dtoa_r+0x91e>
 8008266:	e7a9      	b.n	80081bc <_dtoa_r+0xb24>
 8008268:	08009d17 	.word	0x08009d17
 800826c:	08009c74 	.word	0x08009c74
 8008270:	08009c98 	.word	0x08009c98

08008274 <_localeconv_r>:
 8008274:	4800      	ldr	r0, [pc, #0]	; (8008278 <_localeconv_r+0x4>)
 8008276:	4770      	bx	lr
 8008278:	20000164 	.word	0x20000164

0800827c <malloc>:
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <malloc+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 bc17 	b.w	8008ab4 <_malloc_r>
 8008286:	bf00      	nop
 8008288:	20000010 	.word	0x20000010

0800828c <memcpy>:
 800828c:	440a      	add	r2, r1
 800828e:	4291      	cmp	r1, r2
 8008290:	f100 33ff 	add.w	r3, r0, #4294967295
 8008294:	d100      	bne.n	8008298 <memcpy+0xc>
 8008296:	4770      	bx	lr
 8008298:	b510      	push	{r4, lr}
 800829a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a2:	4291      	cmp	r1, r2
 80082a4:	d1f9      	bne.n	800829a <memcpy+0xe>
 80082a6:	bd10      	pop	{r4, pc}

080082a8 <_Balloc>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	b976      	cbnz	r6, 80082d0 <_Balloc+0x28>
 80082b2:	2010      	movs	r0, #16
 80082b4:	f7ff ffe2 	bl	800827c <malloc>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6260      	str	r0, [r4, #36]	; 0x24
 80082bc:	b920      	cbnz	r0, 80082c8 <_Balloc+0x20>
 80082be:	4b18      	ldr	r3, [pc, #96]	; (8008320 <_Balloc+0x78>)
 80082c0:	4818      	ldr	r0, [pc, #96]	; (8008324 <_Balloc+0x7c>)
 80082c2:	2166      	movs	r1, #102	; 0x66
 80082c4:	f000 fdd6 	bl	8008e74 <__assert_func>
 80082c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082cc:	6006      	str	r6, [r0, #0]
 80082ce:	60c6      	str	r6, [r0, #12]
 80082d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082d2:	68f3      	ldr	r3, [r6, #12]
 80082d4:	b183      	cbz	r3, 80082f8 <_Balloc+0x50>
 80082d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082de:	b9b8      	cbnz	r0, 8008310 <_Balloc+0x68>
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f605 	lsl.w	r6, r1, r5
 80082e6:	1d72      	adds	r2, r6, #5
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fb60 	bl	80089b0 <_calloc_r>
 80082f0:	b160      	cbz	r0, 800830c <_Balloc+0x64>
 80082f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082f6:	e00e      	b.n	8008316 <_Balloc+0x6e>
 80082f8:	2221      	movs	r2, #33	; 0x21
 80082fa:	2104      	movs	r1, #4
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb57 	bl	80089b0 <_calloc_r>
 8008302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008304:	60f0      	str	r0, [r6, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e4      	bne.n	80082d6 <_Balloc+0x2e>
 800830c:	2000      	movs	r0, #0
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	6802      	ldr	r2, [r0, #0]
 8008312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008316:	2300      	movs	r3, #0
 8008318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800831c:	e7f7      	b.n	800830e <_Balloc+0x66>
 800831e:	bf00      	nop
 8008320:	08009ca5 	.word	0x08009ca5
 8008324:	08009d28 	.word	0x08009d28

08008328 <_Bfree>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b976      	cbnz	r6, 8008350 <_Bfree+0x28>
 8008332:	2010      	movs	r0, #16
 8008334:	f7ff ffa2 	bl	800827c <malloc>
 8008338:	4602      	mov	r2, r0
 800833a:	6268      	str	r0, [r5, #36]	; 0x24
 800833c:	b920      	cbnz	r0, 8008348 <_Bfree+0x20>
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <_Bfree+0x3c>)
 8008340:	4809      	ldr	r0, [pc, #36]	; (8008368 <_Bfree+0x40>)
 8008342:	218a      	movs	r1, #138	; 0x8a
 8008344:	f000 fd96 	bl	8008e74 <__assert_func>
 8008348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800834c:	6006      	str	r6, [r0, #0]
 800834e:	60c6      	str	r6, [r0, #12]
 8008350:	b13c      	cbz	r4, 8008362 <_Bfree+0x3a>
 8008352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800835c:	6021      	str	r1, [r4, #0]
 800835e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	08009ca5 	.word	0x08009ca5
 8008368:	08009d28 	.word	0x08009d28

0800836c <__multadd>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	690d      	ldr	r5, [r1, #16]
 8008372:	4607      	mov	r7, r0
 8008374:	460c      	mov	r4, r1
 8008376:	461e      	mov	r6, r3
 8008378:	f101 0c14 	add.w	ip, r1, #20
 800837c:	2000      	movs	r0, #0
 800837e:	f8dc 3000 	ldr.w	r3, [ip]
 8008382:	b299      	uxth	r1, r3
 8008384:	fb02 6101 	mla	r1, r2, r1, r6
 8008388:	0c1e      	lsrs	r6, r3, #16
 800838a:	0c0b      	lsrs	r3, r1, #16
 800838c:	fb02 3306 	mla	r3, r2, r6, r3
 8008390:	b289      	uxth	r1, r1
 8008392:	3001      	adds	r0, #1
 8008394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008398:	4285      	cmp	r5, r0
 800839a:	f84c 1b04 	str.w	r1, [ip], #4
 800839e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083a2:	dcec      	bgt.n	800837e <__multadd+0x12>
 80083a4:	b30e      	cbz	r6, 80083ea <__multadd+0x7e>
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dc19      	bgt.n	80083e0 <__multadd+0x74>
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4638      	mov	r0, r7
 80083b0:	3101      	adds	r1, #1
 80083b2:	f7ff ff79 	bl	80082a8 <_Balloc>
 80083b6:	4680      	mov	r8, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__multadd+0x5a>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <__multadd+0x84>)
 80083be:	480d      	ldr	r0, [pc, #52]	; (80083f4 <__multadd+0x88>)
 80083c0:	21b5      	movs	r1, #181	; 0xb5
 80083c2:	f000 fd57 	bl	8008e74 <__assert_func>
 80083c6:	6922      	ldr	r2, [r4, #16]
 80083c8:	3202      	adds	r2, #2
 80083ca:	f104 010c 	add.w	r1, r4, #12
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	300c      	adds	r0, #12
 80083d2:	f7ff ff5b 	bl	800828c <memcpy>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff ffa5 	bl	8008328 <_Bfree>
 80083de:	4644      	mov	r4, r8
 80083e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e4:	3501      	adds	r5, #1
 80083e6:	615e      	str	r6, [r3, #20]
 80083e8:	6125      	str	r5, [r4, #16]
 80083ea:	4620      	mov	r0, r4
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	08009d17 	.word	0x08009d17
 80083f4:	08009d28 	.word	0x08009d28

080083f8 <__hi0bits>:
 80083f8:	0c03      	lsrs	r3, r0, #16
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	b9d3      	cbnz	r3, 8008434 <__hi0bits+0x3c>
 80083fe:	0400      	lsls	r0, r0, #16
 8008400:	2310      	movs	r3, #16
 8008402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008406:	bf04      	itt	eq
 8008408:	0200      	lsleq	r0, r0, #8
 800840a:	3308      	addeq	r3, #8
 800840c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008410:	bf04      	itt	eq
 8008412:	0100      	lsleq	r0, r0, #4
 8008414:	3304      	addeq	r3, #4
 8008416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800841a:	bf04      	itt	eq
 800841c:	0080      	lsleq	r0, r0, #2
 800841e:	3302      	addeq	r3, #2
 8008420:	2800      	cmp	r0, #0
 8008422:	db05      	blt.n	8008430 <__hi0bits+0x38>
 8008424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008428:	f103 0301 	add.w	r3, r3, #1
 800842c:	bf08      	it	eq
 800842e:	2320      	moveq	r3, #32
 8008430:	4618      	mov	r0, r3
 8008432:	4770      	bx	lr
 8008434:	2300      	movs	r3, #0
 8008436:	e7e4      	b.n	8008402 <__hi0bits+0xa>

08008438 <__lo0bits>:
 8008438:	6803      	ldr	r3, [r0, #0]
 800843a:	f013 0207 	ands.w	r2, r3, #7
 800843e:	4601      	mov	r1, r0
 8008440:	d00b      	beq.n	800845a <__lo0bits+0x22>
 8008442:	07da      	lsls	r2, r3, #31
 8008444:	d423      	bmi.n	800848e <__lo0bits+0x56>
 8008446:	0798      	lsls	r0, r3, #30
 8008448:	bf49      	itett	mi
 800844a:	085b      	lsrmi	r3, r3, #1
 800844c:	089b      	lsrpl	r3, r3, #2
 800844e:	2001      	movmi	r0, #1
 8008450:	600b      	strmi	r3, [r1, #0]
 8008452:	bf5c      	itt	pl
 8008454:	600b      	strpl	r3, [r1, #0]
 8008456:	2002      	movpl	r0, #2
 8008458:	4770      	bx	lr
 800845a:	b298      	uxth	r0, r3
 800845c:	b9a8      	cbnz	r0, 800848a <__lo0bits+0x52>
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	2010      	movs	r0, #16
 8008462:	b2da      	uxtb	r2, r3
 8008464:	b90a      	cbnz	r2, 800846a <__lo0bits+0x32>
 8008466:	3008      	adds	r0, #8
 8008468:	0a1b      	lsrs	r3, r3, #8
 800846a:	071a      	lsls	r2, r3, #28
 800846c:	bf04      	itt	eq
 800846e:	091b      	lsreq	r3, r3, #4
 8008470:	3004      	addeq	r0, #4
 8008472:	079a      	lsls	r2, r3, #30
 8008474:	bf04      	itt	eq
 8008476:	089b      	lsreq	r3, r3, #2
 8008478:	3002      	addeq	r0, #2
 800847a:	07da      	lsls	r2, r3, #31
 800847c:	d403      	bmi.n	8008486 <__lo0bits+0x4e>
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	f100 0001 	add.w	r0, r0, #1
 8008484:	d005      	beq.n	8008492 <__lo0bits+0x5a>
 8008486:	600b      	str	r3, [r1, #0]
 8008488:	4770      	bx	lr
 800848a:	4610      	mov	r0, r2
 800848c:	e7e9      	b.n	8008462 <__lo0bits+0x2a>
 800848e:	2000      	movs	r0, #0
 8008490:	4770      	bx	lr
 8008492:	2020      	movs	r0, #32
 8008494:	4770      	bx	lr
	...

08008498 <__i2b>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	2101      	movs	r1, #1
 800849e:	f7ff ff03 	bl	80082a8 <_Balloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	b928      	cbnz	r0, 80084b2 <__i2b+0x1a>
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <__i2b+0x24>)
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <__i2b+0x28>)
 80084aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084ae:	f000 fce1 	bl	8008e74 <__assert_func>
 80084b2:	2301      	movs	r3, #1
 80084b4:	6144      	str	r4, [r0, #20]
 80084b6:	6103      	str	r3, [r0, #16]
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	08009d17 	.word	0x08009d17
 80084c0:	08009d28 	.word	0x08009d28

080084c4 <__multiply>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	4691      	mov	r9, r2
 80084ca:	690a      	ldr	r2, [r1, #16]
 80084cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bfb8      	it	lt
 80084d4:	460b      	movlt	r3, r1
 80084d6:	460c      	mov	r4, r1
 80084d8:	bfbc      	itt	lt
 80084da:	464c      	movlt	r4, r9
 80084dc:	4699      	movlt	r9, r3
 80084de:	6927      	ldr	r7, [r4, #16]
 80084e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084e4:	68a3      	ldr	r3, [r4, #8]
 80084e6:	6861      	ldr	r1, [r4, #4]
 80084e8:	eb07 060a 	add.w	r6, r7, sl
 80084ec:	42b3      	cmp	r3, r6
 80084ee:	b085      	sub	sp, #20
 80084f0:	bfb8      	it	lt
 80084f2:	3101      	addlt	r1, #1
 80084f4:	f7ff fed8 	bl	80082a8 <_Balloc>
 80084f8:	b930      	cbnz	r0, 8008508 <__multiply+0x44>
 80084fa:	4602      	mov	r2, r0
 80084fc:	4b44      	ldr	r3, [pc, #272]	; (8008610 <__multiply+0x14c>)
 80084fe:	4845      	ldr	r0, [pc, #276]	; (8008614 <__multiply+0x150>)
 8008500:	f240 115d 	movw	r1, #349	; 0x15d
 8008504:	f000 fcb6 	bl	8008e74 <__assert_func>
 8008508:	f100 0514 	add.w	r5, r0, #20
 800850c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008510:	462b      	mov	r3, r5
 8008512:	2200      	movs	r2, #0
 8008514:	4543      	cmp	r3, r8
 8008516:	d321      	bcc.n	800855c <__multiply+0x98>
 8008518:	f104 0314 	add.w	r3, r4, #20
 800851c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008520:	f109 0314 	add.w	r3, r9, #20
 8008524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008528:	9202      	str	r2, [sp, #8]
 800852a:	1b3a      	subs	r2, r7, r4
 800852c:	3a15      	subs	r2, #21
 800852e:	f022 0203 	bic.w	r2, r2, #3
 8008532:	3204      	adds	r2, #4
 8008534:	f104 0115 	add.w	r1, r4, #21
 8008538:	428f      	cmp	r7, r1
 800853a:	bf38      	it	cc
 800853c:	2204      	movcc	r2, #4
 800853e:	9201      	str	r2, [sp, #4]
 8008540:	9a02      	ldr	r2, [sp, #8]
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d80c      	bhi.n	8008562 <__multiply+0x9e>
 8008548:	2e00      	cmp	r6, #0
 800854a:	dd03      	ble.n	8008554 <__multiply+0x90>
 800854c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05a      	beq.n	800860a <__multiply+0x146>
 8008554:	6106      	str	r6, [r0, #16]
 8008556:	b005      	add	sp, #20
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	f843 2b04 	str.w	r2, [r3], #4
 8008560:	e7d8      	b.n	8008514 <__multiply+0x50>
 8008562:	f8b3 a000 	ldrh.w	sl, [r3]
 8008566:	f1ba 0f00 	cmp.w	sl, #0
 800856a:	d024      	beq.n	80085b6 <__multiply+0xf2>
 800856c:	f104 0e14 	add.w	lr, r4, #20
 8008570:	46a9      	mov	r9, r5
 8008572:	f04f 0c00 	mov.w	ip, #0
 8008576:	f85e 2b04 	ldr.w	r2, [lr], #4
 800857a:	f8d9 1000 	ldr.w	r1, [r9]
 800857e:	fa1f fb82 	uxth.w	fp, r2
 8008582:	b289      	uxth	r1, r1
 8008584:	fb0a 110b 	mla	r1, sl, fp, r1
 8008588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800858c:	f8d9 2000 	ldr.w	r2, [r9]
 8008590:	4461      	add	r1, ip
 8008592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008596:	fb0a c20b 	mla	r2, sl, fp, ip
 800859a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800859e:	b289      	uxth	r1, r1
 80085a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085a4:	4577      	cmp	r7, lr
 80085a6:	f849 1b04 	str.w	r1, [r9], #4
 80085aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085ae:	d8e2      	bhi.n	8008576 <__multiply+0xb2>
 80085b0:	9a01      	ldr	r2, [sp, #4]
 80085b2:	f845 c002 	str.w	ip, [r5, r2]
 80085b6:	9a03      	ldr	r2, [sp, #12]
 80085b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085bc:	3304      	adds	r3, #4
 80085be:	f1b9 0f00 	cmp.w	r9, #0
 80085c2:	d020      	beq.n	8008606 <__multiply+0x142>
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	f104 0c14 	add.w	ip, r4, #20
 80085ca:	46ae      	mov	lr, r5
 80085cc:	f04f 0a00 	mov.w	sl, #0
 80085d0:	f8bc b000 	ldrh.w	fp, [ip]
 80085d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085d8:	fb09 220b 	mla	r2, r9, fp, r2
 80085dc:	4492      	add	sl, r2
 80085de:	b289      	uxth	r1, r1
 80085e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085e4:	f84e 1b04 	str.w	r1, [lr], #4
 80085e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085ec:	f8be 1000 	ldrh.w	r1, [lr]
 80085f0:	0c12      	lsrs	r2, r2, #16
 80085f2:	fb09 1102 	mla	r1, r9, r2, r1
 80085f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085fa:	4567      	cmp	r7, ip
 80085fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008600:	d8e6      	bhi.n	80085d0 <__multiply+0x10c>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	50a9      	str	r1, [r5, r2]
 8008606:	3504      	adds	r5, #4
 8008608:	e79a      	b.n	8008540 <__multiply+0x7c>
 800860a:	3e01      	subs	r6, #1
 800860c:	e79c      	b.n	8008548 <__multiply+0x84>
 800860e:	bf00      	nop
 8008610:	08009d17 	.word	0x08009d17
 8008614:	08009d28 	.word	0x08009d28

08008618 <__pow5mult>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	4615      	mov	r5, r2
 800861e:	f012 0203 	ands.w	r2, r2, #3
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	d007      	beq.n	8008638 <__pow5mult+0x20>
 8008628:	4c25      	ldr	r4, [pc, #148]	; (80086c0 <__pow5mult+0xa8>)
 800862a:	3a01      	subs	r2, #1
 800862c:	2300      	movs	r3, #0
 800862e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008632:	f7ff fe9b 	bl	800836c <__multadd>
 8008636:	4607      	mov	r7, r0
 8008638:	10ad      	asrs	r5, r5, #2
 800863a:	d03d      	beq.n	80086b8 <__pow5mult+0xa0>
 800863c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800863e:	b97c      	cbnz	r4, 8008660 <__pow5mult+0x48>
 8008640:	2010      	movs	r0, #16
 8008642:	f7ff fe1b 	bl	800827c <malloc>
 8008646:	4602      	mov	r2, r0
 8008648:	6270      	str	r0, [r6, #36]	; 0x24
 800864a:	b928      	cbnz	r0, 8008658 <__pow5mult+0x40>
 800864c:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <__pow5mult+0xac>)
 800864e:	481e      	ldr	r0, [pc, #120]	; (80086c8 <__pow5mult+0xb0>)
 8008650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008654:	f000 fc0e 	bl	8008e74 <__assert_func>
 8008658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800865c:	6004      	str	r4, [r0, #0]
 800865e:	60c4      	str	r4, [r0, #12]
 8008660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008668:	b94c      	cbnz	r4, 800867e <__pow5mult+0x66>
 800866a:	f240 2171 	movw	r1, #625	; 0x271
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff ff12 	bl	8008498 <__i2b>
 8008674:	2300      	movs	r3, #0
 8008676:	f8c8 0008 	str.w	r0, [r8, #8]
 800867a:	4604      	mov	r4, r0
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	07eb      	lsls	r3, r5, #31
 8008684:	d50a      	bpl.n	800869c <__pow5mult+0x84>
 8008686:	4639      	mov	r1, r7
 8008688:	4622      	mov	r2, r4
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ff1a 	bl	80084c4 <__multiply>
 8008690:	4639      	mov	r1, r7
 8008692:	4680      	mov	r8, r0
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fe47 	bl	8008328 <_Bfree>
 800869a:	4647      	mov	r7, r8
 800869c:	106d      	asrs	r5, r5, #1
 800869e:	d00b      	beq.n	80086b8 <__pow5mult+0xa0>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	b938      	cbnz	r0, 80086b4 <__pow5mult+0x9c>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4621      	mov	r1, r4
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ff0b 	bl	80084c4 <__multiply>
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	f8c0 9000 	str.w	r9, [r0]
 80086b4:	4604      	mov	r4, r0
 80086b6:	e7e4      	b.n	8008682 <__pow5mult+0x6a>
 80086b8:	4638      	mov	r0, r7
 80086ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086be:	bf00      	nop
 80086c0:	08009e78 	.word	0x08009e78
 80086c4:	08009ca5 	.word	0x08009ca5
 80086c8:	08009d28 	.word	0x08009d28

080086cc <__lshift>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	6849      	ldr	r1, [r1, #4]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	4607      	mov	r7, r0
 80086de:	4691      	mov	r9, r2
 80086e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e4:	f108 0601 	add.w	r6, r8, #1
 80086e8:	42b3      	cmp	r3, r6
 80086ea:	db0b      	blt.n	8008704 <__lshift+0x38>
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff fddb 	bl	80082a8 <_Balloc>
 80086f2:	4605      	mov	r5, r0
 80086f4:	b948      	cbnz	r0, 800870a <__lshift+0x3e>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <__lshift+0xd8>)
 80086fa:	482b      	ldr	r0, [pc, #172]	; (80087a8 <__lshift+0xdc>)
 80086fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008700:	f000 fbb8 	bl	8008e74 <__assert_func>
 8008704:	3101      	adds	r1, #1
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	e7ee      	b.n	80086e8 <__lshift+0x1c>
 800870a:	2300      	movs	r3, #0
 800870c:	f100 0114 	add.w	r1, r0, #20
 8008710:	f100 0210 	add.w	r2, r0, #16
 8008714:	4618      	mov	r0, r3
 8008716:	4553      	cmp	r3, sl
 8008718:	db37      	blt.n	800878a <__lshift+0xbe>
 800871a:	6920      	ldr	r0, [r4, #16]
 800871c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008720:	f104 0314 	add.w	r3, r4, #20
 8008724:	f019 091f 	ands.w	r9, r9, #31
 8008728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800872c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008730:	d02f      	beq.n	8008792 <__lshift+0xc6>
 8008732:	f1c9 0e20 	rsb	lr, r9, #32
 8008736:	468a      	mov	sl, r1
 8008738:	f04f 0c00 	mov.w	ip, #0
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	fa02 f209 	lsl.w	r2, r2, r9
 8008742:	ea42 020c 	orr.w	r2, r2, ip
 8008746:	f84a 2b04 	str.w	r2, [sl], #4
 800874a:	f853 2b04 	ldr.w	r2, [r3], #4
 800874e:	4298      	cmp	r0, r3
 8008750:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008754:	d8f2      	bhi.n	800873c <__lshift+0x70>
 8008756:	1b03      	subs	r3, r0, r4
 8008758:	3b15      	subs	r3, #21
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	3304      	adds	r3, #4
 8008760:	f104 0215 	add.w	r2, r4, #21
 8008764:	4290      	cmp	r0, r2
 8008766:	bf38      	it	cc
 8008768:	2304      	movcc	r3, #4
 800876a:	f841 c003 	str.w	ip, [r1, r3]
 800876e:	f1bc 0f00 	cmp.w	ip, #0
 8008772:	d001      	beq.n	8008778 <__lshift+0xac>
 8008774:	f108 0602 	add.w	r6, r8, #2
 8008778:	3e01      	subs	r6, #1
 800877a:	4638      	mov	r0, r7
 800877c:	612e      	str	r6, [r5, #16]
 800877e:	4621      	mov	r1, r4
 8008780:	f7ff fdd2 	bl	8008328 <_Bfree>
 8008784:	4628      	mov	r0, r5
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	f842 0f04 	str.w	r0, [r2, #4]!
 800878e:	3301      	adds	r3, #1
 8008790:	e7c1      	b.n	8008716 <__lshift+0x4a>
 8008792:	3904      	subs	r1, #4
 8008794:	f853 2b04 	ldr.w	r2, [r3], #4
 8008798:	f841 2f04 	str.w	r2, [r1, #4]!
 800879c:	4298      	cmp	r0, r3
 800879e:	d8f9      	bhi.n	8008794 <__lshift+0xc8>
 80087a0:	e7ea      	b.n	8008778 <__lshift+0xac>
 80087a2:	bf00      	nop
 80087a4:	08009d17 	.word	0x08009d17
 80087a8:	08009d28 	.word	0x08009d28

080087ac <__mcmp>:
 80087ac:	b530      	push	{r4, r5, lr}
 80087ae:	6902      	ldr	r2, [r0, #16]
 80087b0:	690c      	ldr	r4, [r1, #16]
 80087b2:	1b12      	subs	r2, r2, r4
 80087b4:	d10e      	bne.n	80087d4 <__mcmp+0x28>
 80087b6:	f100 0314 	add.w	r3, r0, #20
 80087ba:	3114      	adds	r1, #20
 80087bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087cc:	42a5      	cmp	r5, r4
 80087ce:	d003      	beq.n	80087d8 <__mcmp+0x2c>
 80087d0:	d305      	bcc.n	80087de <__mcmp+0x32>
 80087d2:	2201      	movs	r2, #1
 80087d4:	4610      	mov	r0, r2
 80087d6:	bd30      	pop	{r4, r5, pc}
 80087d8:	4283      	cmp	r3, r0
 80087da:	d3f3      	bcc.n	80087c4 <__mcmp+0x18>
 80087dc:	e7fa      	b.n	80087d4 <__mcmp+0x28>
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	e7f7      	b.n	80087d4 <__mcmp+0x28>

080087e4 <__mdiff>:
 80087e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	4606      	mov	r6, r0
 80087ec:	4611      	mov	r1, r2
 80087ee:	4620      	mov	r0, r4
 80087f0:	4690      	mov	r8, r2
 80087f2:	f7ff ffdb 	bl	80087ac <__mcmp>
 80087f6:	1e05      	subs	r5, r0, #0
 80087f8:	d110      	bne.n	800881c <__mdiff+0x38>
 80087fa:	4629      	mov	r1, r5
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff fd53 	bl	80082a8 <_Balloc>
 8008802:	b930      	cbnz	r0, 8008812 <__mdiff+0x2e>
 8008804:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <__mdiff+0x10c>)
 8008806:	4602      	mov	r2, r0
 8008808:	f240 2132 	movw	r1, #562	; 0x232
 800880c:	4839      	ldr	r0, [pc, #228]	; (80088f4 <__mdiff+0x110>)
 800880e:	f000 fb31 	bl	8008e74 <__assert_func>
 8008812:	2301      	movs	r3, #1
 8008814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	bfa4      	itt	ge
 800881e:	4643      	movge	r3, r8
 8008820:	46a0      	movge	r8, r4
 8008822:	4630      	mov	r0, r6
 8008824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008828:	bfa6      	itte	ge
 800882a:	461c      	movge	r4, r3
 800882c:	2500      	movge	r5, #0
 800882e:	2501      	movlt	r5, #1
 8008830:	f7ff fd3a 	bl	80082a8 <_Balloc>
 8008834:	b920      	cbnz	r0, 8008840 <__mdiff+0x5c>
 8008836:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <__mdiff+0x10c>)
 8008838:	4602      	mov	r2, r0
 800883a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800883e:	e7e5      	b.n	800880c <__mdiff+0x28>
 8008840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008844:	6926      	ldr	r6, [r4, #16]
 8008846:	60c5      	str	r5, [r0, #12]
 8008848:	f104 0914 	add.w	r9, r4, #20
 800884c:	f108 0514 	add.w	r5, r8, #20
 8008850:	f100 0e14 	add.w	lr, r0, #20
 8008854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800885c:	f108 0210 	add.w	r2, r8, #16
 8008860:	46f2      	mov	sl, lr
 8008862:	2100      	movs	r1, #0
 8008864:	f859 3b04 	ldr.w	r3, [r9], #4
 8008868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800886c:	fa1f f883 	uxth.w	r8, r3
 8008870:	fa11 f18b 	uxtah	r1, r1, fp
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	eba1 0808 	sub.w	r8, r1, r8
 800887a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800887e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008882:	fa1f f888 	uxth.w	r8, r8
 8008886:	1419      	asrs	r1, r3, #16
 8008888:	454e      	cmp	r6, r9
 800888a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800888e:	f84a 3b04 	str.w	r3, [sl], #4
 8008892:	d8e7      	bhi.n	8008864 <__mdiff+0x80>
 8008894:	1b33      	subs	r3, r6, r4
 8008896:	3b15      	subs	r3, #21
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	3304      	adds	r3, #4
 800889e:	3415      	adds	r4, #21
 80088a0:	42a6      	cmp	r6, r4
 80088a2:	bf38      	it	cc
 80088a4:	2304      	movcc	r3, #4
 80088a6:	441d      	add	r5, r3
 80088a8:	4473      	add	r3, lr
 80088aa:	469e      	mov	lr, r3
 80088ac:	462e      	mov	r6, r5
 80088ae:	4566      	cmp	r6, ip
 80088b0:	d30e      	bcc.n	80088d0 <__mdiff+0xec>
 80088b2:	f10c 0203 	add.w	r2, ip, #3
 80088b6:	1b52      	subs	r2, r2, r5
 80088b8:	f022 0203 	bic.w	r2, r2, #3
 80088bc:	3d03      	subs	r5, #3
 80088be:	45ac      	cmp	ip, r5
 80088c0:	bf38      	it	cc
 80088c2:	2200      	movcc	r2, #0
 80088c4:	441a      	add	r2, r3
 80088c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088ca:	b17b      	cbz	r3, 80088ec <__mdiff+0x108>
 80088cc:	6107      	str	r7, [r0, #16]
 80088ce:	e7a3      	b.n	8008818 <__mdiff+0x34>
 80088d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80088d4:	fa11 f288 	uxtah	r2, r1, r8
 80088d8:	1414      	asrs	r4, r2, #16
 80088da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088de:	b292      	uxth	r2, r2
 80088e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088e4:	f84e 2b04 	str.w	r2, [lr], #4
 80088e8:	1421      	asrs	r1, r4, #16
 80088ea:	e7e0      	b.n	80088ae <__mdiff+0xca>
 80088ec:	3f01      	subs	r7, #1
 80088ee:	e7ea      	b.n	80088c6 <__mdiff+0xe2>
 80088f0:	08009d17 	.word	0x08009d17
 80088f4:	08009d28 	.word	0x08009d28

080088f8 <__d2b>:
 80088f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4689      	mov	r9, r1
 80088fe:	2101      	movs	r1, #1
 8008900:	ec57 6b10 	vmov	r6, r7, d0
 8008904:	4690      	mov	r8, r2
 8008906:	f7ff fccf 	bl	80082a8 <_Balloc>
 800890a:	4604      	mov	r4, r0
 800890c:	b930      	cbnz	r0, 800891c <__d2b+0x24>
 800890e:	4602      	mov	r2, r0
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <__d2b+0xb0>)
 8008912:	4826      	ldr	r0, [pc, #152]	; (80089ac <__d2b+0xb4>)
 8008914:	f240 310a 	movw	r1, #778	; 0x30a
 8008918:	f000 faac 	bl	8008e74 <__assert_func>
 800891c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008924:	bb35      	cbnz	r5, 8008974 <__d2b+0x7c>
 8008926:	2e00      	cmp	r6, #0
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	d028      	beq.n	800897e <__d2b+0x86>
 800892c:	4668      	mov	r0, sp
 800892e:	9600      	str	r6, [sp, #0]
 8008930:	f7ff fd82 	bl	8008438 <__lo0bits>
 8008934:	9900      	ldr	r1, [sp, #0]
 8008936:	b300      	cbz	r0, 800897a <__d2b+0x82>
 8008938:	9a01      	ldr	r2, [sp, #4]
 800893a:	f1c0 0320 	rsb	r3, r0, #32
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	430b      	orrs	r3, r1
 8008944:	40c2      	lsrs	r2, r0
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	9201      	str	r2, [sp, #4]
 800894a:	9b01      	ldr	r3, [sp, #4]
 800894c:	61a3      	str	r3, [r4, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2202      	movne	r2, #2
 8008954:	2201      	moveq	r2, #1
 8008956:	6122      	str	r2, [r4, #16]
 8008958:	b1d5      	cbz	r5, 8008990 <__d2b+0x98>
 800895a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800895e:	4405      	add	r5, r0
 8008960:	f8c9 5000 	str.w	r5, [r9]
 8008964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008968:	f8c8 0000 	str.w	r0, [r8]
 800896c:	4620      	mov	r0, r4
 800896e:	b003      	add	sp, #12
 8008970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008978:	e7d5      	b.n	8008926 <__d2b+0x2e>
 800897a:	6161      	str	r1, [r4, #20]
 800897c:	e7e5      	b.n	800894a <__d2b+0x52>
 800897e:	a801      	add	r0, sp, #4
 8008980:	f7ff fd5a 	bl	8008438 <__lo0bits>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	2201      	movs	r2, #1
 800898a:	6122      	str	r2, [r4, #16]
 800898c:	3020      	adds	r0, #32
 800898e:	e7e3      	b.n	8008958 <__d2b+0x60>
 8008990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008998:	f8c9 0000 	str.w	r0, [r9]
 800899c:	6918      	ldr	r0, [r3, #16]
 800899e:	f7ff fd2b 	bl	80083f8 <__hi0bits>
 80089a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089a6:	e7df      	b.n	8008968 <__d2b+0x70>
 80089a8:	08009d17 	.word	0x08009d17
 80089ac:	08009d28 	.word	0x08009d28

080089b0 <_calloc_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	fba1 2402 	umull	r2, r4, r1, r2
 80089b6:	b94c      	cbnz	r4, 80089cc <_calloc_r+0x1c>
 80089b8:	4611      	mov	r1, r2
 80089ba:	9201      	str	r2, [sp, #4]
 80089bc:	f000 f87a 	bl	8008ab4 <_malloc_r>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	4605      	mov	r5, r0
 80089c4:	b930      	cbnz	r0, 80089d4 <_calloc_r+0x24>
 80089c6:	4628      	mov	r0, r5
 80089c8:	b003      	add	sp, #12
 80089ca:	bd30      	pop	{r4, r5, pc}
 80089cc:	220c      	movs	r2, #12
 80089ce:	6002      	str	r2, [r0, #0]
 80089d0:	2500      	movs	r5, #0
 80089d2:	e7f8      	b.n	80089c6 <_calloc_r+0x16>
 80089d4:	4621      	mov	r1, r4
 80089d6:	f7fe f93f 	bl	8006c58 <memset>
 80089da:	e7f4      	b.n	80089c6 <_calloc_r+0x16>

080089dc <_free_r>:
 80089dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089de:	2900      	cmp	r1, #0
 80089e0:	d044      	beq.n	8008a6c <_free_r+0x90>
 80089e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e6:	9001      	str	r0, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f1a1 0404 	sub.w	r4, r1, #4
 80089ee:	bfb8      	it	lt
 80089f0:	18e4      	addlt	r4, r4, r3
 80089f2:	f000 fa9b 	bl	8008f2c <__malloc_lock>
 80089f6:	4a1e      	ldr	r2, [pc, #120]	; (8008a70 <_free_r+0x94>)
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	b933      	cbnz	r3, 8008a0c <_free_r+0x30>
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	6014      	str	r4, [r2, #0]
 8008a02:	b003      	add	sp, #12
 8008a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a08:	f000 ba96 	b.w	8008f38 <__malloc_unlock>
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d908      	bls.n	8008a22 <_free_r+0x46>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf01      	itttt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	1949      	addeq	r1, r1, r5
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	e7ed      	b.n	80089fe <_free_r+0x22>
 8008a22:	461a      	mov	r2, r3
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	b10b      	cbz	r3, 8008a2c <_free_r+0x50>
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d9fa      	bls.n	8008a22 <_free_r+0x46>
 8008a2c:	6811      	ldr	r1, [r2, #0]
 8008a2e:	1855      	adds	r5, r2, r1
 8008a30:	42a5      	cmp	r5, r4
 8008a32:	d10b      	bne.n	8008a4c <_free_r+0x70>
 8008a34:	6824      	ldr	r4, [r4, #0]
 8008a36:	4421      	add	r1, r4
 8008a38:	1854      	adds	r4, r2, r1
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	d1e0      	bne.n	8008a02 <_free_r+0x26>
 8008a40:	681c      	ldr	r4, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	6053      	str	r3, [r2, #4]
 8008a46:	4421      	add	r1, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	e7da      	b.n	8008a02 <_free_r+0x26>
 8008a4c:	d902      	bls.n	8008a54 <_free_r+0x78>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	e7d6      	b.n	8008a02 <_free_r+0x26>
 8008a54:	6825      	ldr	r5, [r4, #0]
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf04      	itt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	bf04      	itt	eq
 8008a64:	1949      	addeq	r1, r1, r5
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	6054      	str	r4, [r2, #4]
 8008a6a:	e7ca      	b.n	8008a02 <_free_r+0x26>
 8008a6c:	b003      	add	sp, #12
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	20000758 	.word	0x20000758

08008a74 <sbrk_aligned>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4e0e      	ldr	r6, [pc, #56]	; (8008ab0 <sbrk_aligned+0x3c>)
 8008a78:	460c      	mov	r4, r1
 8008a7a:	6831      	ldr	r1, [r6, #0]
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b911      	cbnz	r1, 8008a86 <sbrk_aligned+0x12>
 8008a80:	f000 f9e8 	bl	8008e54 <_sbrk_r>
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f9e3 	bl	8008e54 <_sbrk_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d00a      	beq.n	8008aa8 <sbrk_aligned+0x34>
 8008a92:	1cc4      	adds	r4, r0, #3
 8008a94:	f024 0403 	bic.w	r4, r4, #3
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d007      	beq.n	8008aac <sbrk_aligned+0x38>
 8008a9c:	1a21      	subs	r1, r4, r0
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 f9d8 	bl	8008e54 <_sbrk_r>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d101      	bne.n	8008aac <sbrk_aligned+0x38>
 8008aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	2000075c 	.word	0x2000075c

08008ab4 <_malloc_r>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	1ccd      	adds	r5, r1, #3
 8008aba:	f025 0503 	bic.w	r5, r5, #3
 8008abe:	3508      	adds	r5, #8
 8008ac0:	2d0c      	cmp	r5, #12
 8008ac2:	bf38      	it	cc
 8008ac4:	250c      	movcc	r5, #12
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	4607      	mov	r7, r0
 8008aca:	db01      	blt.n	8008ad0 <_malloc_r+0x1c>
 8008acc:	42a9      	cmp	r1, r5
 8008ace:	d905      	bls.n	8008adc <_malloc_r+0x28>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	4e2e      	ldr	r6, [pc, #184]	; (8008b98 <_malloc_r+0xe4>)
 8008ade:	f000 fa25 	bl	8008f2c <__malloc_lock>
 8008ae2:	6833      	ldr	r3, [r6, #0]
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	bb34      	cbnz	r4, 8008b36 <_malloc_r+0x82>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4638      	mov	r0, r7
 8008aec:	f7ff ffc2 	bl	8008a74 <sbrk_aligned>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	4604      	mov	r4, r0
 8008af4:	d14d      	bne.n	8008b92 <_malloc_r+0xde>
 8008af6:	6834      	ldr	r4, [r6, #0]
 8008af8:	4626      	mov	r6, r4
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d140      	bne.n	8008b80 <_malloc_r+0xcc>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4638      	mov	r0, r7
 8008b04:	eb04 0803 	add.w	r8, r4, r3
 8008b08:	f000 f9a4 	bl	8008e54 <_sbrk_r>
 8008b0c:	4580      	cmp	r8, r0
 8008b0e:	d13a      	bne.n	8008b86 <_malloc_r+0xd2>
 8008b10:	6821      	ldr	r1, [r4, #0]
 8008b12:	3503      	adds	r5, #3
 8008b14:	1a6d      	subs	r5, r5, r1
 8008b16:	f025 0503 	bic.w	r5, r5, #3
 8008b1a:	3508      	adds	r5, #8
 8008b1c:	2d0c      	cmp	r5, #12
 8008b1e:	bf38      	it	cc
 8008b20:	250c      	movcc	r5, #12
 8008b22:	4629      	mov	r1, r5
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff ffa5 	bl	8008a74 <sbrk_aligned>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d02b      	beq.n	8008b86 <_malloc_r+0xd2>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	442b      	add	r3, r5
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	e00e      	b.n	8008b54 <_malloc_r+0xa0>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	1b52      	subs	r2, r2, r5
 8008b3a:	d41e      	bmi.n	8008b7a <_malloc_r+0xc6>
 8008b3c:	2a0b      	cmp	r2, #11
 8008b3e:	d916      	bls.n	8008b6e <_malloc_r+0xba>
 8008b40:	1961      	adds	r1, r4, r5
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	bf18      	it	ne
 8008b48:	6059      	strne	r1, [r3, #4]
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	bf08      	it	eq
 8008b4e:	6031      	streq	r1, [r6, #0]
 8008b50:	5162      	str	r2, [r4, r5]
 8008b52:	604b      	str	r3, [r1, #4]
 8008b54:	4638      	mov	r0, r7
 8008b56:	f104 060b 	add.w	r6, r4, #11
 8008b5a:	f000 f9ed 	bl	8008f38 <__malloc_unlock>
 8008b5e:	f026 0607 	bic.w	r6, r6, #7
 8008b62:	1d23      	adds	r3, r4, #4
 8008b64:	1af2      	subs	r2, r6, r3
 8008b66:	d0b6      	beq.n	8008ad6 <_malloc_r+0x22>
 8008b68:	1b9b      	subs	r3, r3, r6
 8008b6a:	50a3      	str	r3, [r4, r2]
 8008b6c:	e7b3      	b.n	8008ad6 <_malloc_r+0x22>
 8008b6e:	6862      	ldr	r2, [r4, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	bf0c      	ite	eq
 8008b74:	6032      	streq	r2, [r6, #0]
 8008b76:	605a      	strne	r2, [r3, #4]
 8008b78:	e7ec      	b.n	8008b54 <_malloc_r+0xa0>
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	6864      	ldr	r4, [r4, #4]
 8008b7e:	e7b2      	b.n	8008ae6 <_malloc_r+0x32>
 8008b80:	4634      	mov	r4, r6
 8008b82:	6876      	ldr	r6, [r6, #4]
 8008b84:	e7b9      	b.n	8008afa <_malloc_r+0x46>
 8008b86:	230c      	movs	r3, #12
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f000 f9d4 	bl	8008f38 <__malloc_unlock>
 8008b90:	e7a1      	b.n	8008ad6 <_malloc_r+0x22>
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	e7de      	b.n	8008b54 <_malloc_r+0xa0>
 8008b96:	bf00      	nop
 8008b98:	20000758 	.word	0x20000758

08008b9c <__ssputs_r>:
 8008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	688e      	ldr	r6, [r1, #8]
 8008ba2:	429e      	cmp	r6, r3
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	4690      	mov	r8, r2
 8008baa:	461f      	mov	r7, r3
 8008bac:	d838      	bhi.n	8008c20 <__ssputs_r+0x84>
 8008bae:	898a      	ldrh	r2, [r1, #12]
 8008bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb4:	d032      	beq.n	8008c1c <__ssputs_r+0x80>
 8008bb6:	6825      	ldr	r5, [r4, #0]
 8008bb8:	6909      	ldr	r1, [r1, #16]
 8008bba:	eba5 0901 	sub.w	r9, r5, r1
 8008bbe:	6965      	ldr	r5, [r4, #20]
 8008bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc8:	3301      	adds	r3, #1
 8008bca:	444b      	add	r3, r9
 8008bcc:	106d      	asrs	r5, r5, #1
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	bf38      	it	cc
 8008bd2:	461d      	movcc	r5, r3
 8008bd4:	0553      	lsls	r3, r2, #21
 8008bd6:	d531      	bpl.n	8008c3c <__ssputs_r+0xa0>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7ff ff6b 	bl	8008ab4 <_malloc_r>
 8008bde:	4606      	mov	r6, r0
 8008be0:	b950      	cbnz	r0, 8008bf8 <__ssputs_r+0x5c>
 8008be2:	230c      	movs	r3, #12
 8008be4:	f8ca 3000 	str.w	r3, [sl]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf8:	6921      	ldr	r1, [r4, #16]
 8008bfa:	464a      	mov	r2, r9
 8008bfc:	f7ff fb46 	bl	800828c <memcpy>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	6126      	str	r6, [r4, #16]
 8008c0e:	6165      	str	r5, [r4, #20]
 8008c10:	444e      	add	r6, r9
 8008c12:	eba5 0509 	sub.w	r5, r5, r9
 8008c16:	6026      	str	r6, [r4, #0]
 8008c18:	60a5      	str	r5, [r4, #8]
 8008c1a:	463e      	mov	r6, r7
 8008c1c:	42be      	cmp	r6, r7
 8008c1e:	d900      	bls.n	8008c22 <__ssputs_r+0x86>
 8008c20:	463e      	mov	r6, r7
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	4632      	mov	r2, r6
 8008c26:	4641      	mov	r1, r8
 8008c28:	f000 f966 	bl	8008ef8 <memmove>
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	1b9b      	subs	r3, r3, r6
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	4433      	add	r3, r6
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e7db      	b.n	8008bf4 <__ssputs_r+0x58>
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	f000 f981 	bl	8008f44 <_realloc_r>
 8008c42:	4606      	mov	r6, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1e1      	bne.n	8008c0c <__ssputs_r+0x70>
 8008c48:	6921      	ldr	r1, [r4, #16]
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7ff fec6 	bl	80089dc <_free_r>
 8008c50:	e7c7      	b.n	8008be2 <__ssputs_r+0x46>
	...

08008c54 <_svfiprintf_r>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	4698      	mov	r8, r3
 8008c5a:	898b      	ldrh	r3, [r1, #12]
 8008c5c:	061b      	lsls	r3, r3, #24
 8008c5e:	b09d      	sub	sp, #116	; 0x74
 8008c60:	4607      	mov	r7, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	4614      	mov	r4, r2
 8008c66:	d50e      	bpl.n	8008c86 <_svfiprintf_r+0x32>
 8008c68:	690b      	ldr	r3, [r1, #16]
 8008c6a:	b963      	cbnz	r3, 8008c86 <_svfiprintf_r+0x32>
 8008c6c:	2140      	movs	r1, #64	; 0x40
 8008c6e:	f7ff ff21 	bl	8008ab4 <_malloc_r>
 8008c72:	6028      	str	r0, [r5, #0]
 8008c74:	6128      	str	r0, [r5, #16]
 8008c76:	b920      	cbnz	r0, 8008c82 <_svfiprintf_r+0x2e>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e0d1      	b.n	8008e26 <_svfiprintf_r+0x1d2>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	616b      	str	r3, [r5, #20]
 8008c86:	2300      	movs	r3, #0
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	2320      	movs	r3, #32
 8008c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c94:	2330      	movs	r3, #48	; 0x30
 8008c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e40 <_svfiprintf_r+0x1ec>
 8008c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c9e:	f04f 0901 	mov.w	r9, #1
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	469a      	mov	sl, r3
 8008ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008caa:	b10a      	cbz	r2, 8008cb0 <_svfiprintf_r+0x5c>
 8008cac:	2a25      	cmp	r2, #37	; 0x25
 8008cae:	d1f9      	bne.n	8008ca4 <_svfiprintf_r+0x50>
 8008cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb4:	d00b      	beq.n	8008cce <_svfiprintf_r+0x7a>
 8008cb6:	465b      	mov	r3, fp
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff ff6d 	bl	8008b9c <__ssputs_r>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f000 80aa 	beq.w	8008e1c <_svfiprintf_r+0x1c8>
 8008cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cca:	445a      	add	r2, fp
 8008ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cce:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a2 	beq.w	8008e1c <_svfiprintf_r+0x1c8>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce2:	f10a 0a01 	add.w	sl, sl, #1
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	9307      	str	r3, [sp, #28]
 8008cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cee:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf0:	4654      	mov	r4, sl
 8008cf2:	2205      	movs	r2, #5
 8008cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf8:	4851      	ldr	r0, [pc, #324]	; (8008e40 <_svfiprintf_r+0x1ec>)
 8008cfa:	f7f7 fa79 	bl	80001f0 <memchr>
 8008cfe:	9a04      	ldr	r2, [sp, #16]
 8008d00:	b9d8      	cbnz	r0, 8008d3a <_svfiprintf_r+0xe6>
 8008d02:	06d0      	lsls	r0, r2, #27
 8008d04:	bf44      	itt	mi
 8008d06:	2320      	movmi	r3, #32
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0c:	0711      	lsls	r1, r2, #28
 8008d0e:	bf44      	itt	mi
 8008d10:	232b      	movmi	r3, #43	; 0x2b
 8008d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d16:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1c:	d015      	beq.n	8008d4a <_svfiprintf_r+0xf6>
 8008d1e:	9a07      	ldr	r2, [sp, #28]
 8008d20:	4654      	mov	r4, sl
 8008d22:	2000      	movs	r0, #0
 8008d24:	f04f 0c0a 	mov.w	ip, #10
 8008d28:	4621      	mov	r1, r4
 8008d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d2e:	3b30      	subs	r3, #48	; 0x30
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	d94e      	bls.n	8008dd2 <_svfiprintf_r+0x17e>
 8008d34:	b1b0      	cbz	r0, 8008d64 <_svfiprintf_r+0x110>
 8008d36:	9207      	str	r2, [sp, #28]
 8008d38:	e014      	b.n	8008d64 <_svfiprintf_r+0x110>
 8008d3a:	eba0 0308 	sub.w	r3, r0, r8
 8008d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	46a2      	mov	sl, r4
 8008d48:	e7d2      	b.n	8008cf0 <_svfiprintf_r+0x9c>
 8008d4a:	9b03      	ldr	r3, [sp, #12]
 8008d4c:	1d19      	adds	r1, r3, #4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	9103      	str	r1, [sp, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bfbb      	ittet	lt
 8008d56:	425b      	neglt	r3, r3
 8008d58:	f042 0202 	orrlt.w	r2, r2, #2
 8008d5c:	9307      	strge	r3, [sp, #28]
 8008d5e:	9307      	strlt	r3, [sp, #28]
 8008d60:	bfb8      	it	lt
 8008d62:	9204      	strlt	r2, [sp, #16]
 8008d64:	7823      	ldrb	r3, [r4, #0]
 8008d66:	2b2e      	cmp	r3, #46	; 0x2e
 8008d68:	d10c      	bne.n	8008d84 <_svfiprintf_r+0x130>
 8008d6a:	7863      	ldrb	r3, [r4, #1]
 8008d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d6e:	d135      	bne.n	8008ddc <_svfiprintf_r+0x188>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d1a      	adds	r2, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9203      	str	r2, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfb8      	it	lt
 8008d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d80:	3402      	adds	r4, #2
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e50 <_svfiprintf_r+0x1fc>
 8008d88:	7821      	ldrb	r1, [r4, #0]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f7f7 fa2f 	bl	80001f0 <memchr>
 8008d92:	b140      	cbz	r0, 8008da6 <_svfiprintf_r+0x152>
 8008d94:	2340      	movs	r3, #64	; 0x40
 8008d96:	eba0 000a 	sub.w	r0, r0, sl
 8008d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	4303      	orrs	r3, r0
 8008da2:	3401      	adds	r4, #1
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008daa:	4826      	ldr	r0, [pc, #152]	; (8008e44 <_svfiprintf_r+0x1f0>)
 8008dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db0:	2206      	movs	r2, #6
 8008db2:	f7f7 fa1d 	bl	80001f0 <memchr>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d038      	beq.n	8008e2c <_svfiprintf_r+0x1d8>
 8008dba:	4b23      	ldr	r3, [pc, #140]	; (8008e48 <_svfiprintf_r+0x1f4>)
 8008dbc:	bb1b      	cbnz	r3, 8008e06 <_svfiprintf_r+0x1b2>
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	3307      	adds	r3, #7
 8008dc2:	f023 0307 	bic.w	r3, r3, #7
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	9303      	str	r3, [sp, #12]
 8008dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dcc:	4433      	add	r3, r6
 8008dce:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd0:	e767      	b.n	8008ca2 <_svfiprintf_r+0x4e>
 8008dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2001      	movs	r0, #1
 8008dda:	e7a5      	b.n	8008d28 <_svfiprintf_r+0xd4>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	3401      	adds	r4, #1
 8008de0:	9305      	str	r3, [sp, #20]
 8008de2:	4619      	mov	r1, r3
 8008de4:	f04f 0c0a 	mov.w	ip, #10
 8008de8:	4620      	mov	r0, r4
 8008dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dee:	3a30      	subs	r2, #48	; 0x30
 8008df0:	2a09      	cmp	r2, #9
 8008df2:	d903      	bls.n	8008dfc <_svfiprintf_r+0x1a8>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0c5      	beq.n	8008d84 <_svfiprintf_r+0x130>
 8008df8:	9105      	str	r1, [sp, #20]
 8008dfa:	e7c3      	b.n	8008d84 <_svfiprintf_r+0x130>
 8008dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e00:	4604      	mov	r4, r0
 8008e02:	2301      	movs	r3, #1
 8008e04:	e7f0      	b.n	8008de8 <_svfiprintf_r+0x194>
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <_svfiprintf_r+0x1f8>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7fd ffc9 	bl	8006da8 <_printf_float>
 8008e16:	1c42      	adds	r2, r0, #1
 8008e18:	4606      	mov	r6, r0
 8008e1a:	d1d6      	bne.n	8008dca <_svfiprintf_r+0x176>
 8008e1c:	89ab      	ldrh	r3, [r5, #12]
 8008e1e:	065b      	lsls	r3, r3, #25
 8008e20:	f53f af2c 	bmi.w	8008c7c <_svfiprintf_r+0x28>
 8008e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e26:	b01d      	add	sp, #116	; 0x74
 8008e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2c:	ab03      	add	r3, sp, #12
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <_svfiprintf_r+0x1f8>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	4638      	mov	r0, r7
 8008e38:	f7fe fa5a 	bl	80072f0 <_printf_i>
 8008e3c:	e7eb      	b.n	8008e16 <_svfiprintf_r+0x1c2>
 8008e3e:	bf00      	nop
 8008e40:	08009e84 	.word	0x08009e84
 8008e44:	08009e8e 	.word	0x08009e8e
 8008e48:	08006da9 	.word	0x08006da9
 8008e4c:	08008b9d 	.word	0x08008b9d
 8008e50:	08009e8a 	.word	0x08009e8a

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f9 f9ca 	bl	80021f8 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20000760 	.word	0x20000760

08008e74 <__assert_func>:
 8008e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e76:	4614      	mov	r4, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <__assert_func+0x2c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4605      	mov	r5, r0
 8008e80:	68d8      	ldr	r0, [r3, #12]
 8008e82:	b14c      	cbz	r4, 8008e98 <__assert_func+0x24>
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <__assert_func+0x30>)
 8008e86:	9100      	str	r1, [sp, #0]
 8008e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e8c:	4906      	ldr	r1, [pc, #24]	; (8008ea8 <__assert_func+0x34>)
 8008e8e:	462b      	mov	r3, r5
 8008e90:	f000 f80e 	bl	8008eb0 <fiprintf>
 8008e94:	f000 faac 	bl	80093f0 <abort>
 8008e98:	4b04      	ldr	r3, [pc, #16]	; (8008eac <__assert_func+0x38>)
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	e7f3      	b.n	8008e86 <__assert_func+0x12>
 8008e9e:	bf00      	nop
 8008ea0:	20000010 	.word	0x20000010
 8008ea4:	08009e95 	.word	0x08009e95
 8008ea8:	08009ea2 	.word	0x08009ea2
 8008eac:	08009ed0 	.word	0x08009ed0

08008eb0 <fiprintf>:
 8008eb0:	b40e      	push	{r1, r2, r3}
 8008eb2:	b503      	push	{r0, r1, lr}
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <fiprintf+0x20>)
 8008eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebe:	6800      	ldr	r0, [r0, #0]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	f000 f897 	bl	8008ff4 <_vfiprintf_r>
 8008ec6:	b002      	add	sp, #8
 8008ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ecc:	b003      	add	sp, #12
 8008ece:	4770      	bx	lr
 8008ed0:	20000010 	.word	0x20000010

08008ed4 <__ascii_mbtowc>:
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	b901      	cbnz	r1, 8008eda <__ascii_mbtowc+0x6>
 8008ed8:	a901      	add	r1, sp, #4
 8008eda:	b142      	cbz	r2, 8008eee <__ascii_mbtowc+0x1a>
 8008edc:	b14b      	cbz	r3, 8008ef2 <__ascii_mbtowc+0x1e>
 8008ede:	7813      	ldrb	r3, [r2, #0]
 8008ee0:	600b      	str	r3, [r1, #0]
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	1e10      	subs	r0, r2, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2001      	movne	r0, #1
 8008eea:	b002      	add	sp, #8
 8008eec:	4770      	bx	lr
 8008eee:	4610      	mov	r0, r2
 8008ef0:	e7fb      	b.n	8008eea <__ascii_mbtowc+0x16>
 8008ef2:	f06f 0001 	mvn.w	r0, #1
 8008ef6:	e7f8      	b.n	8008eea <__ascii_mbtowc+0x16>

08008ef8 <memmove>:
 8008ef8:	4288      	cmp	r0, r1
 8008efa:	b510      	push	{r4, lr}
 8008efc:	eb01 0402 	add.w	r4, r1, r2
 8008f00:	d902      	bls.n	8008f08 <memmove+0x10>
 8008f02:	4284      	cmp	r4, r0
 8008f04:	4623      	mov	r3, r4
 8008f06:	d807      	bhi.n	8008f18 <memmove+0x20>
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	42a1      	cmp	r1, r4
 8008f0c:	d008      	beq.n	8008f20 <memmove+0x28>
 8008f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f16:	e7f8      	b.n	8008f0a <memmove+0x12>
 8008f18:	4402      	add	r2, r0
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	428a      	cmp	r2, r1
 8008f1e:	d100      	bne.n	8008f22 <memmove+0x2a>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f2a:	e7f7      	b.n	8008f1c <memmove+0x24>

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f000 bc1f 	b.w	8009770 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000764 	.word	0x20000764

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f000 bc1a 	b.w	8009772 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000764 	.word	0x20000764

08008f44 <_realloc_r>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	460e      	mov	r6, r1
 8008f4e:	b921      	cbnz	r1, 8008f5a <_realloc_r+0x16>
 8008f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f54:	4611      	mov	r1, r2
 8008f56:	f7ff bdad 	b.w	8008ab4 <_malloc_r>
 8008f5a:	b92a      	cbnz	r2, 8008f68 <_realloc_r+0x24>
 8008f5c:	f7ff fd3e 	bl	80089dc <_free_r>
 8008f60:	4625      	mov	r5, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	f000 fc6a 	bl	8009840 <_malloc_usable_size_r>
 8008f6c:	4284      	cmp	r4, r0
 8008f6e:	4607      	mov	r7, r0
 8008f70:	d802      	bhi.n	8008f78 <_realloc_r+0x34>
 8008f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f76:	d812      	bhi.n	8008f9e <_realloc_r+0x5a>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f7ff fd9a 	bl	8008ab4 <_malloc_r>
 8008f80:	4605      	mov	r5, r0
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d0ed      	beq.n	8008f62 <_realloc_r+0x1e>
 8008f86:	42bc      	cmp	r4, r7
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	bf28      	it	cs
 8008f8e:	463a      	movcs	r2, r7
 8008f90:	f7ff f97c 	bl	800828c <memcpy>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4640      	mov	r0, r8
 8008f98:	f7ff fd20 	bl	80089dc <_free_r>
 8008f9c:	e7e1      	b.n	8008f62 <_realloc_r+0x1e>
 8008f9e:	4635      	mov	r5, r6
 8008fa0:	e7df      	b.n	8008f62 <_realloc_r+0x1e>

08008fa2 <__sfputc_r>:
 8008fa2:	6893      	ldr	r3, [r2, #8]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	b410      	push	{r4}
 8008faa:	6093      	str	r3, [r2, #8]
 8008fac:	da08      	bge.n	8008fc0 <__sfputc_r+0x1e>
 8008fae:	6994      	ldr	r4, [r2, #24]
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	db01      	blt.n	8008fb8 <__sfputc_r+0x16>
 8008fb4:	290a      	cmp	r1, #10
 8008fb6:	d103      	bne.n	8008fc0 <__sfputc_r+0x1e>
 8008fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbc:	f000 b94a 	b.w	8009254 <__swbuf_r>
 8008fc0:	6813      	ldr	r3, [r2, #0]
 8008fc2:	1c58      	adds	r0, r3, #1
 8008fc4:	6010      	str	r0, [r2, #0]
 8008fc6:	7019      	strb	r1, [r3, #0]
 8008fc8:	4608      	mov	r0, r1
 8008fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <__sfputs_r>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	18d5      	adds	r5, r2, r3
 8008fda:	42ac      	cmp	r4, r5
 8008fdc:	d101      	bne.n	8008fe2 <__sfputs_r+0x12>
 8008fde:	2000      	movs	r0, #0
 8008fe0:	e007      	b.n	8008ff2 <__sfputs_r+0x22>
 8008fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff ffda 	bl	8008fa2 <__sfputc_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d1f3      	bne.n	8008fda <__sfputs_r+0xa>
 8008ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ff4 <_vfiprintf_r>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	b09d      	sub	sp, #116	; 0x74
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	4698      	mov	r8, r3
 8009000:	4606      	mov	r6, r0
 8009002:	b118      	cbz	r0, 800900c <_vfiprintf_r+0x18>
 8009004:	6983      	ldr	r3, [r0, #24]
 8009006:	b90b      	cbnz	r3, 800900c <_vfiprintf_r+0x18>
 8009008:	f000 fb14 	bl	8009634 <__sinit>
 800900c:	4b89      	ldr	r3, [pc, #548]	; (8009234 <_vfiprintf_r+0x240>)
 800900e:	429d      	cmp	r5, r3
 8009010:	d11b      	bne.n	800904a <_vfiprintf_r+0x56>
 8009012:	6875      	ldr	r5, [r6, #4]
 8009014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009016:	07d9      	lsls	r1, r3, #31
 8009018:	d405      	bmi.n	8009026 <_vfiprintf_r+0x32>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d402      	bmi.n	8009026 <_vfiprintf_r+0x32>
 8009020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009022:	f000 fba5 	bl	8009770 <__retarget_lock_acquire_recursive>
 8009026:	89ab      	ldrh	r3, [r5, #12]
 8009028:	071b      	lsls	r3, r3, #28
 800902a:	d501      	bpl.n	8009030 <_vfiprintf_r+0x3c>
 800902c:	692b      	ldr	r3, [r5, #16]
 800902e:	b9eb      	cbnz	r3, 800906c <_vfiprintf_r+0x78>
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f000 f96e 	bl	8009314 <__swsetup_r>
 8009038:	b1c0      	cbz	r0, 800906c <_vfiprintf_r+0x78>
 800903a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800903c:	07dc      	lsls	r4, r3, #31
 800903e:	d50e      	bpl.n	800905e <_vfiprintf_r+0x6a>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	b01d      	add	sp, #116	; 0x74
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	4b7b      	ldr	r3, [pc, #492]	; (8009238 <_vfiprintf_r+0x244>)
 800904c:	429d      	cmp	r5, r3
 800904e:	d101      	bne.n	8009054 <_vfiprintf_r+0x60>
 8009050:	68b5      	ldr	r5, [r6, #8]
 8009052:	e7df      	b.n	8009014 <_vfiprintf_r+0x20>
 8009054:	4b79      	ldr	r3, [pc, #484]	; (800923c <_vfiprintf_r+0x248>)
 8009056:	429d      	cmp	r5, r3
 8009058:	bf08      	it	eq
 800905a:	68f5      	ldreq	r5, [r6, #12]
 800905c:	e7da      	b.n	8009014 <_vfiprintf_r+0x20>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	0598      	lsls	r0, r3, #22
 8009062:	d4ed      	bmi.n	8009040 <_vfiprintf_r+0x4c>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f000 fb84 	bl	8009772 <__retarget_lock_release_recursive>
 800906a:	e7e9      	b.n	8009040 <_vfiprintf_r+0x4c>
 800906c:	2300      	movs	r3, #0
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	2320      	movs	r3, #32
 8009072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009076:	f8cd 800c 	str.w	r8, [sp, #12]
 800907a:	2330      	movs	r3, #48	; 0x30
 800907c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009240 <_vfiprintf_r+0x24c>
 8009080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009084:	f04f 0901 	mov.w	r9, #1
 8009088:	4623      	mov	r3, r4
 800908a:	469a      	mov	sl, r3
 800908c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009090:	b10a      	cbz	r2, 8009096 <_vfiprintf_r+0xa2>
 8009092:	2a25      	cmp	r2, #37	; 0x25
 8009094:	d1f9      	bne.n	800908a <_vfiprintf_r+0x96>
 8009096:	ebba 0b04 	subs.w	fp, sl, r4
 800909a:	d00b      	beq.n	80090b4 <_vfiprintf_r+0xc0>
 800909c:	465b      	mov	r3, fp
 800909e:	4622      	mov	r2, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff94 	bl	8008fd0 <__sfputs_r>
 80090a8:	3001      	adds	r0, #1
 80090aa:	f000 80aa 	beq.w	8009202 <_vfiprintf_r+0x20e>
 80090ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b0:	445a      	add	r2, fp
 80090b2:	9209      	str	r2, [sp, #36]	; 0x24
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80a2 	beq.w	8009202 <_vfiprintf_r+0x20e>
 80090be:	2300      	movs	r3, #0
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c8:	f10a 0a01 	add.w	sl, sl, #1
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d4:	931a      	str	r3, [sp, #104]	; 0x68
 80090d6:	4654      	mov	r4, sl
 80090d8:	2205      	movs	r2, #5
 80090da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090de:	4858      	ldr	r0, [pc, #352]	; (8009240 <_vfiprintf_r+0x24c>)
 80090e0:	f7f7 f886 	bl	80001f0 <memchr>
 80090e4:	9a04      	ldr	r2, [sp, #16]
 80090e6:	b9d8      	cbnz	r0, 8009120 <_vfiprintf_r+0x12c>
 80090e8:	06d1      	lsls	r1, r2, #27
 80090ea:	bf44      	itt	mi
 80090ec:	2320      	movmi	r3, #32
 80090ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f2:	0713      	lsls	r3, r2, #28
 80090f4:	bf44      	itt	mi
 80090f6:	232b      	movmi	r3, #43	; 0x2b
 80090f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009100:	2b2a      	cmp	r3, #42	; 0x2a
 8009102:	d015      	beq.n	8009130 <_vfiprintf_r+0x13c>
 8009104:	9a07      	ldr	r2, [sp, #28]
 8009106:	4654      	mov	r4, sl
 8009108:	2000      	movs	r0, #0
 800910a:	f04f 0c0a 	mov.w	ip, #10
 800910e:	4621      	mov	r1, r4
 8009110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009114:	3b30      	subs	r3, #48	; 0x30
 8009116:	2b09      	cmp	r3, #9
 8009118:	d94e      	bls.n	80091b8 <_vfiprintf_r+0x1c4>
 800911a:	b1b0      	cbz	r0, 800914a <_vfiprintf_r+0x156>
 800911c:	9207      	str	r2, [sp, #28]
 800911e:	e014      	b.n	800914a <_vfiprintf_r+0x156>
 8009120:	eba0 0308 	sub.w	r3, r0, r8
 8009124:	fa09 f303 	lsl.w	r3, r9, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	9304      	str	r3, [sp, #16]
 800912c:	46a2      	mov	sl, r4
 800912e:	e7d2      	b.n	80090d6 <_vfiprintf_r+0xe2>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	1d19      	adds	r1, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	9103      	str	r1, [sp, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	bfbb      	ittet	lt
 800913c:	425b      	neglt	r3, r3
 800913e:	f042 0202 	orrlt.w	r2, r2, #2
 8009142:	9307      	strge	r3, [sp, #28]
 8009144:	9307      	strlt	r3, [sp, #28]
 8009146:	bfb8      	it	lt
 8009148:	9204      	strlt	r2, [sp, #16]
 800914a:	7823      	ldrb	r3, [r4, #0]
 800914c:	2b2e      	cmp	r3, #46	; 0x2e
 800914e:	d10c      	bne.n	800916a <_vfiprintf_r+0x176>
 8009150:	7863      	ldrb	r3, [r4, #1]
 8009152:	2b2a      	cmp	r3, #42	; 0x2a
 8009154:	d135      	bne.n	80091c2 <_vfiprintf_r+0x1ce>
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	1d1a      	adds	r2, r3, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	9203      	str	r2, [sp, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfb8      	it	lt
 8009162:	f04f 33ff 	movlt.w	r3, #4294967295
 8009166:	3402      	adds	r4, #2
 8009168:	9305      	str	r3, [sp, #20]
 800916a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009250 <_vfiprintf_r+0x25c>
 800916e:	7821      	ldrb	r1, [r4, #0]
 8009170:	2203      	movs	r2, #3
 8009172:	4650      	mov	r0, sl
 8009174:	f7f7 f83c 	bl	80001f0 <memchr>
 8009178:	b140      	cbz	r0, 800918c <_vfiprintf_r+0x198>
 800917a:	2340      	movs	r3, #64	; 0x40
 800917c:	eba0 000a 	sub.w	r0, r0, sl
 8009180:	fa03 f000 	lsl.w	r0, r3, r0
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	4303      	orrs	r3, r0
 8009188:	3401      	adds	r4, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009190:	482c      	ldr	r0, [pc, #176]	; (8009244 <_vfiprintf_r+0x250>)
 8009192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009196:	2206      	movs	r2, #6
 8009198:	f7f7 f82a 	bl	80001f0 <memchr>
 800919c:	2800      	cmp	r0, #0
 800919e:	d03f      	beq.n	8009220 <_vfiprintf_r+0x22c>
 80091a0:	4b29      	ldr	r3, [pc, #164]	; (8009248 <_vfiprintf_r+0x254>)
 80091a2:	bb1b      	cbnz	r3, 80091ec <_vfiprintf_r+0x1f8>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	3307      	adds	r3, #7
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	3308      	adds	r3, #8
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b2:	443b      	add	r3, r7
 80091b4:	9309      	str	r3, [sp, #36]	; 0x24
 80091b6:	e767      	b.n	8009088 <_vfiprintf_r+0x94>
 80091b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091bc:	460c      	mov	r4, r1
 80091be:	2001      	movs	r0, #1
 80091c0:	e7a5      	b.n	800910e <_vfiprintf_r+0x11a>
 80091c2:	2300      	movs	r3, #0
 80091c4:	3401      	adds	r4, #1
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4620      	mov	r0, r4
 80091d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d4:	3a30      	subs	r2, #48	; 0x30
 80091d6:	2a09      	cmp	r2, #9
 80091d8:	d903      	bls.n	80091e2 <_vfiprintf_r+0x1ee>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c5      	beq.n	800916a <_vfiprintf_r+0x176>
 80091de:	9105      	str	r1, [sp, #20]
 80091e0:	e7c3      	b.n	800916a <_vfiprintf_r+0x176>
 80091e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e6:	4604      	mov	r4, r0
 80091e8:	2301      	movs	r3, #1
 80091ea:	e7f0      	b.n	80091ce <_vfiprintf_r+0x1da>
 80091ec:	ab03      	add	r3, sp, #12
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	462a      	mov	r2, r5
 80091f2:	4b16      	ldr	r3, [pc, #88]	; (800924c <_vfiprintf_r+0x258>)
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	4630      	mov	r0, r6
 80091f8:	f7fd fdd6 	bl	8006da8 <_printf_float>
 80091fc:	4607      	mov	r7, r0
 80091fe:	1c78      	adds	r0, r7, #1
 8009200:	d1d6      	bne.n	80091b0 <_vfiprintf_r+0x1bc>
 8009202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009204:	07d9      	lsls	r1, r3, #31
 8009206:	d405      	bmi.n	8009214 <_vfiprintf_r+0x220>
 8009208:	89ab      	ldrh	r3, [r5, #12]
 800920a:	059a      	lsls	r2, r3, #22
 800920c:	d402      	bmi.n	8009214 <_vfiprintf_r+0x220>
 800920e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009210:	f000 faaf 	bl	8009772 <__retarget_lock_release_recursive>
 8009214:	89ab      	ldrh	r3, [r5, #12]
 8009216:	065b      	lsls	r3, r3, #25
 8009218:	f53f af12 	bmi.w	8009040 <_vfiprintf_r+0x4c>
 800921c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921e:	e711      	b.n	8009044 <_vfiprintf_r+0x50>
 8009220:	ab03      	add	r3, sp, #12
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	462a      	mov	r2, r5
 8009226:	4b09      	ldr	r3, [pc, #36]	; (800924c <_vfiprintf_r+0x258>)
 8009228:	a904      	add	r1, sp, #16
 800922a:	4630      	mov	r0, r6
 800922c:	f7fe f860 	bl	80072f0 <_printf_i>
 8009230:	e7e4      	b.n	80091fc <_vfiprintf_r+0x208>
 8009232:	bf00      	nop
 8009234:	08009ffc 	.word	0x08009ffc
 8009238:	0800a01c 	.word	0x0800a01c
 800923c:	08009fdc 	.word	0x08009fdc
 8009240:	08009e84 	.word	0x08009e84
 8009244:	08009e8e 	.word	0x08009e8e
 8009248:	08006da9 	.word	0x08006da9
 800924c:	08008fd1 	.word	0x08008fd1
 8009250:	08009e8a 	.word	0x08009e8a

08009254 <__swbuf_r>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	460e      	mov	r6, r1
 8009258:	4614      	mov	r4, r2
 800925a:	4605      	mov	r5, r0
 800925c:	b118      	cbz	r0, 8009266 <__swbuf_r+0x12>
 800925e:	6983      	ldr	r3, [r0, #24]
 8009260:	b90b      	cbnz	r3, 8009266 <__swbuf_r+0x12>
 8009262:	f000 f9e7 	bl	8009634 <__sinit>
 8009266:	4b21      	ldr	r3, [pc, #132]	; (80092ec <__swbuf_r+0x98>)
 8009268:	429c      	cmp	r4, r3
 800926a:	d12b      	bne.n	80092c4 <__swbuf_r+0x70>
 800926c:	686c      	ldr	r4, [r5, #4]
 800926e:	69a3      	ldr	r3, [r4, #24]
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	071a      	lsls	r2, r3, #28
 8009276:	d52f      	bpl.n	80092d8 <__swbuf_r+0x84>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	b36b      	cbz	r3, 80092d8 <__swbuf_r+0x84>
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	6820      	ldr	r0, [r4, #0]
 8009280:	1ac0      	subs	r0, r0, r3
 8009282:	6963      	ldr	r3, [r4, #20]
 8009284:	b2f6      	uxtb	r6, r6
 8009286:	4283      	cmp	r3, r0
 8009288:	4637      	mov	r7, r6
 800928a:	dc04      	bgt.n	8009296 <__swbuf_r+0x42>
 800928c:	4621      	mov	r1, r4
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f93c 	bl	800950c <_fflush_r>
 8009294:	bb30      	cbnz	r0, 80092e4 <__swbuf_r+0x90>
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	3b01      	subs	r3, #1
 800929a:	60a3      	str	r3, [r4, #8]
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	6022      	str	r2, [r4, #0]
 80092a2:	701e      	strb	r6, [r3, #0]
 80092a4:	6963      	ldr	r3, [r4, #20]
 80092a6:	3001      	adds	r0, #1
 80092a8:	4283      	cmp	r3, r0
 80092aa:	d004      	beq.n	80092b6 <__swbuf_r+0x62>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	07db      	lsls	r3, r3, #31
 80092b0:	d506      	bpl.n	80092c0 <__swbuf_r+0x6c>
 80092b2:	2e0a      	cmp	r6, #10
 80092b4:	d104      	bne.n	80092c0 <__swbuf_r+0x6c>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f927 	bl	800950c <_fflush_r>
 80092be:	b988      	cbnz	r0, 80092e4 <__swbuf_r+0x90>
 80092c0:	4638      	mov	r0, r7
 80092c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <__swbuf_r+0x9c>)
 80092c6:	429c      	cmp	r4, r3
 80092c8:	d101      	bne.n	80092ce <__swbuf_r+0x7a>
 80092ca:	68ac      	ldr	r4, [r5, #8]
 80092cc:	e7cf      	b.n	800926e <__swbuf_r+0x1a>
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <__swbuf_r+0xa0>)
 80092d0:	429c      	cmp	r4, r3
 80092d2:	bf08      	it	eq
 80092d4:	68ec      	ldreq	r4, [r5, #12]
 80092d6:	e7ca      	b.n	800926e <__swbuf_r+0x1a>
 80092d8:	4621      	mov	r1, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 f81a 	bl	8009314 <__swsetup_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d0cb      	beq.n	800927c <__swbuf_r+0x28>
 80092e4:	f04f 37ff 	mov.w	r7, #4294967295
 80092e8:	e7ea      	b.n	80092c0 <__swbuf_r+0x6c>
 80092ea:	bf00      	nop
 80092ec:	08009ffc 	.word	0x08009ffc
 80092f0:	0800a01c 	.word	0x0800a01c
 80092f4:	08009fdc 	.word	0x08009fdc

080092f8 <__ascii_wctomb>:
 80092f8:	b149      	cbz	r1, 800930e <__ascii_wctomb+0x16>
 80092fa:	2aff      	cmp	r2, #255	; 0xff
 80092fc:	bf85      	ittet	hi
 80092fe:	238a      	movhi	r3, #138	; 0x8a
 8009300:	6003      	strhi	r3, [r0, #0]
 8009302:	700a      	strbls	r2, [r1, #0]
 8009304:	f04f 30ff 	movhi.w	r0, #4294967295
 8009308:	bf98      	it	ls
 800930a:	2001      	movls	r0, #1
 800930c:	4770      	bx	lr
 800930e:	4608      	mov	r0, r1
 8009310:	4770      	bx	lr
	...

08009314 <__swsetup_r>:
 8009314:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <__swsetup_r+0xcc>)
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	4606      	mov	r6, r0
 800931c:	460c      	mov	r4, r1
 800931e:	b125      	cbz	r5, 800932a <__swsetup_r+0x16>
 8009320:	69ab      	ldr	r3, [r5, #24]
 8009322:	b913      	cbnz	r3, 800932a <__swsetup_r+0x16>
 8009324:	4628      	mov	r0, r5
 8009326:	f000 f985 	bl	8009634 <__sinit>
 800932a:	4b2e      	ldr	r3, [pc, #184]	; (80093e4 <__swsetup_r+0xd0>)
 800932c:	429c      	cmp	r4, r3
 800932e:	d10f      	bne.n	8009350 <__swsetup_r+0x3c>
 8009330:	686c      	ldr	r4, [r5, #4]
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009338:	0719      	lsls	r1, r3, #28
 800933a:	d42c      	bmi.n	8009396 <__swsetup_r+0x82>
 800933c:	06dd      	lsls	r5, r3, #27
 800933e:	d411      	bmi.n	8009364 <__swsetup_r+0x50>
 8009340:	2309      	movs	r3, #9
 8009342:	6033      	str	r3, [r6, #0]
 8009344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	e03e      	b.n	80093ce <__swsetup_r+0xba>
 8009350:	4b25      	ldr	r3, [pc, #148]	; (80093e8 <__swsetup_r+0xd4>)
 8009352:	429c      	cmp	r4, r3
 8009354:	d101      	bne.n	800935a <__swsetup_r+0x46>
 8009356:	68ac      	ldr	r4, [r5, #8]
 8009358:	e7eb      	b.n	8009332 <__swsetup_r+0x1e>
 800935a:	4b24      	ldr	r3, [pc, #144]	; (80093ec <__swsetup_r+0xd8>)
 800935c:	429c      	cmp	r4, r3
 800935e:	bf08      	it	eq
 8009360:	68ec      	ldreq	r4, [r5, #12]
 8009362:	e7e6      	b.n	8009332 <__swsetup_r+0x1e>
 8009364:	0758      	lsls	r0, r3, #29
 8009366:	d512      	bpl.n	800938e <__swsetup_r+0x7a>
 8009368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936a:	b141      	cbz	r1, 800937e <__swsetup_r+0x6a>
 800936c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009370:	4299      	cmp	r1, r3
 8009372:	d002      	beq.n	800937a <__swsetup_r+0x66>
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff fb31 	bl	80089dc <_free_r>
 800937a:	2300      	movs	r3, #0
 800937c:	6363      	str	r3, [r4, #52]	; 0x34
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	2300      	movs	r3, #0
 8009388:	6063      	str	r3, [r4, #4]
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f043 0308 	orr.w	r3, r3, #8
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	b94b      	cbnz	r3, 80093ae <__swsetup_r+0x9a>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a4:	d003      	beq.n	80093ae <__swsetup_r+0x9a>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 fa09 	bl	80097c0 <__smakebuf_r>
 80093ae:	89a0      	ldrh	r0, [r4, #12]
 80093b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b4:	f010 0301 	ands.w	r3, r0, #1
 80093b8:	d00a      	beq.n	80093d0 <__swsetup_r+0xbc>
 80093ba:	2300      	movs	r3, #0
 80093bc:	60a3      	str	r3, [r4, #8]
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	425b      	negs	r3, r3
 80093c2:	61a3      	str	r3, [r4, #24]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	b943      	cbnz	r3, 80093da <__swsetup_r+0xc6>
 80093c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093cc:	d1ba      	bne.n	8009344 <__swsetup_r+0x30>
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	0781      	lsls	r1, r0, #30
 80093d2:	bf58      	it	pl
 80093d4:	6963      	ldrpl	r3, [r4, #20]
 80093d6:	60a3      	str	r3, [r4, #8]
 80093d8:	e7f4      	b.n	80093c4 <__swsetup_r+0xb0>
 80093da:	2000      	movs	r0, #0
 80093dc:	e7f7      	b.n	80093ce <__swsetup_r+0xba>
 80093de:	bf00      	nop
 80093e0:	20000010 	.word	0x20000010
 80093e4:	08009ffc 	.word	0x08009ffc
 80093e8:	0800a01c 	.word	0x0800a01c
 80093ec:	08009fdc 	.word	0x08009fdc

080093f0 <abort>:
 80093f0:	b508      	push	{r3, lr}
 80093f2:	2006      	movs	r0, #6
 80093f4:	f000 fa54 	bl	80098a0 <raise>
 80093f8:	2001      	movs	r0, #1
 80093fa:	f7f8 fe85 	bl	8002108 <_exit>
	...

08009400 <__sflush_r>:
 8009400:	898a      	ldrh	r2, [r1, #12]
 8009402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009406:	4605      	mov	r5, r0
 8009408:	0710      	lsls	r0, r2, #28
 800940a:	460c      	mov	r4, r1
 800940c:	d458      	bmi.n	80094c0 <__sflush_r+0xc0>
 800940e:	684b      	ldr	r3, [r1, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	dc05      	bgt.n	8009420 <__sflush_r+0x20>
 8009414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	dc02      	bgt.n	8009420 <__sflush_r+0x20>
 800941a:	2000      	movs	r0, #0
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009422:	2e00      	cmp	r6, #0
 8009424:	d0f9      	beq.n	800941a <__sflush_r+0x1a>
 8009426:	2300      	movs	r3, #0
 8009428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800942c:	682f      	ldr	r7, [r5, #0]
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	d032      	beq.n	8009498 <__sflush_r+0x98>
 8009432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	075a      	lsls	r2, r3, #29
 8009438:	d505      	bpl.n	8009446 <__sflush_r+0x46>
 800943a:	6863      	ldr	r3, [r4, #4]
 800943c:	1ac0      	subs	r0, r0, r3
 800943e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009440:	b10b      	cbz	r3, 8009446 <__sflush_r+0x46>
 8009442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009444:	1ac0      	subs	r0, r0, r3
 8009446:	2300      	movs	r3, #0
 8009448:	4602      	mov	r2, r0
 800944a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800944c:	6a21      	ldr	r1, [r4, #32]
 800944e:	4628      	mov	r0, r5
 8009450:	47b0      	blx	r6
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	d106      	bne.n	8009466 <__sflush_r+0x66>
 8009458:	6829      	ldr	r1, [r5, #0]
 800945a:	291d      	cmp	r1, #29
 800945c:	d82c      	bhi.n	80094b8 <__sflush_r+0xb8>
 800945e:	4a2a      	ldr	r2, [pc, #168]	; (8009508 <__sflush_r+0x108>)
 8009460:	40ca      	lsrs	r2, r1
 8009462:	07d6      	lsls	r6, r2, #31
 8009464:	d528      	bpl.n	80094b8 <__sflush_r+0xb8>
 8009466:	2200      	movs	r2, #0
 8009468:	6062      	str	r2, [r4, #4]
 800946a:	04d9      	lsls	r1, r3, #19
 800946c:	6922      	ldr	r2, [r4, #16]
 800946e:	6022      	str	r2, [r4, #0]
 8009470:	d504      	bpl.n	800947c <__sflush_r+0x7c>
 8009472:	1c42      	adds	r2, r0, #1
 8009474:	d101      	bne.n	800947a <__sflush_r+0x7a>
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	b903      	cbnz	r3, 800947c <__sflush_r+0x7c>
 800947a:	6560      	str	r0, [r4, #84]	; 0x54
 800947c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800947e:	602f      	str	r7, [r5, #0]
 8009480:	2900      	cmp	r1, #0
 8009482:	d0ca      	beq.n	800941a <__sflush_r+0x1a>
 8009484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <__sflush_r+0x92>
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff faa5 	bl	80089dc <_free_r>
 8009492:	2000      	movs	r0, #0
 8009494:	6360      	str	r0, [r4, #52]	; 0x34
 8009496:	e7c1      	b.n	800941c <__sflush_r+0x1c>
 8009498:	6a21      	ldr	r1, [r4, #32]
 800949a:	2301      	movs	r3, #1
 800949c:	4628      	mov	r0, r5
 800949e:	47b0      	blx	r6
 80094a0:	1c41      	adds	r1, r0, #1
 80094a2:	d1c7      	bne.n	8009434 <__sflush_r+0x34>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0c4      	beq.n	8009434 <__sflush_r+0x34>
 80094aa:	2b1d      	cmp	r3, #29
 80094ac:	d001      	beq.n	80094b2 <__sflush_r+0xb2>
 80094ae:	2b16      	cmp	r3, #22
 80094b0:	d101      	bne.n	80094b6 <__sflush_r+0xb6>
 80094b2:	602f      	str	r7, [r5, #0]
 80094b4:	e7b1      	b.n	800941a <__sflush_r+0x1a>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e7ad      	b.n	800941c <__sflush_r+0x1c>
 80094c0:	690f      	ldr	r7, [r1, #16]
 80094c2:	2f00      	cmp	r7, #0
 80094c4:	d0a9      	beq.n	800941a <__sflush_r+0x1a>
 80094c6:	0793      	lsls	r3, r2, #30
 80094c8:	680e      	ldr	r6, [r1, #0]
 80094ca:	bf08      	it	eq
 80094cc:	694b      	ldreq	r3, [r1, #20]
 80094ce:	600f      	str	r7, [r1, #0]
 80094d0:	bf18      	it	ne
 80094d2:	2300      	movne	r3, #0
 80094d4:	eba6 0807 	sub.w	r8, r6, r7
 80094d8:	608b      	str	r3, [r1, #8]
 80094da:	f1b8 0f00 	cmp.w	r8, #0
 80094de:	dd9c      	ble.n	800941a <__sflush_r+0x1a>
 80094e0:	6a21      	ldr	r1, [r4, #32]
 80094e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094e4:	4643      	mov	r3, r8
 80094e6:	463a      	mov	r2, r7
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b0      	blx	r6
 80094ec:	2800      	cmp	r0, #0
 80094ee:	dc06      	bgt.n	80094fe <__sflush_r+0xfe>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e78e      	b.n	800941c <__sflush_r+0x1c>
 80094fe:	4407      	add	r7, r0
 8009500:	eba8 0800 	sub.w	r8, r8, r0
 8009504:	e7e9      	b.n	80094da <__sflush_r+0xda>
 8009506:	bf00      	nop
 8009508:	20400001 	.word	0x20400001

0800950c <_fflush_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	690b      	ldr	r3, [r1, #16]
 8009510:	4605      	mov	r5, r0
 8009512:	460c      	mov	r4, r1
 8009514:	b913      	cbnz	r3, 800951c <_fflush_r+0x10>
 8009516:	2500      	movs	r5, #0
 8009518:	4628      	mov	r0, r5
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	b118      	cbz	r0, 8009526 <_fflush_r+0x1a>
 800951e:	6983      	ldr	r3, [r0, #24]
 8009520:	b90b      	cbnz	r3, 8009526 <_fflush_r+0x1a>
 8009522:	f000 f887 	bl	8009634 <__sinit>
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <_fflush_r+0x6c>)
 8009528:	429c      	cmp	r4, r3
 800952a:	d11b      	bne.n	8009564 <_fflush_r+0x58>
 800952c:	686c      	ldr	r4, [r5, #4]
 800952e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0ef      	beq.n	8009516 <_fflush_r+0xa>
 8009536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009538:	07d0      	lsls	r0, r2, #31
 800953a:	d404      	bmi.n	8009546 <_fflush_r+0x3a>
 800953c:	0599      	lsls	r1, r3, #22
 800953e:	d402      	bmi.n	8009546 <_fflush_r+0x3a>
 8009540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009542:	f000 f915 	bl	8009770 <__retarget_lock_acquire_recursive>
 8009546:	4628      	mov	r0, r5
 8009548:	4621      	mov	r1, r4
 800954a:	f7ff ff59 	bl	8009400 <__sflush_r>
 800954e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009550:	07da      	lsls	r2, r3, #31
 8009552:	4605      	mov	r5, r0
 8009554:	d4e0      	bmi.n	8009518 <_fflush_r+0xc>
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	059b      	lsls	r3, r3, #22
 800955a:	d4dd      	bmi.n	8009518 <_fflush_r+0xc>
 800955c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955e:	f000 f908 	bl	8009772 <__retarget_lock_release_recursive>
 8009562:	e7d9      	b.n	8009518 <_fflush_r+0xc>
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <_fflush_r+0x70>)
 8009566:	429c      	cmp	r4, r3
 8009568:	d101      	bne.n	800956e <_fflush_r+0x62>
 800956a:	68ac      	ldr	r4, [r5, #8]
 800956c:	e7df      	b.n	800952e <_fflush_r+0x22>
 800956e:	4b04      	ldr	r3, [pc, #16]	; (8009580 <_fflush_r+0x74>)
 8009570:	429c      	cmp	r4, r3
 8009572:	bf08      	it	eq
 8009574:	68ec      	ldreq	r4, [r5, #12]
 8009576:	e7da      	b.n	800952e <_fflush_r+0x22>
 8009578:	08009ffc 	.word	0x08009ffc
 800957c:	0800a01c 	.word	0x0800a01c
 8009580:	08009fdc 	.word	0x08009fdc

08009584 <std>:
 8009584:	2300      	movs	r3, #0
 8009586:	b510      	push	{r4, lr}
 8009588:	4604      	mov	r4, r0
 800958a:	e9c0 3300 	strd	r3, r3, [r0]
 800958e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009592:	6083      	str	r3, [r0, #8]
 8009594:	8181      	strh	r1, [r0, #12]
 8009596:	6643      	str	r3, [r0, #100]	; 0x64
 8009598:	81c2      	strh	r2, [r0, #14]
 800959a:	6183      	str	r3, [r0, #24]
 800959c:	4619      	mov	r1, r3
 800959e:	2208      	movs	r2, #8
 80095a0:	305c      	adds	r0, #92	; 0x5c
 80095a2:	f7fd fb59 	bl	8006c58 <memset>
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <std+0x38>)
 80095a8:	6263      	str	r3, [r4, #36]	; 0x24
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x3c>)
 80095ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <std+0x40>)
 80095b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <std+0x44>)
 80095b4:	6224      	str	r4, [r4, #32]
 80095b6:	6323      	str	r3, [r4, #48]	; 0x30
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	080098d9 	.word	0x080098d9
 80095c0:	080098fb 	.word	0x080098fb
 80095c4:	08009933 	.word	0x08009933
 80095c8:	08009957 	.word	0x08009957

080095cc <_cleanup_r>:
 80095cc:	4901      	ldr	r1, [pc, #4]	; (80095d4 <_cleanup_r+0x8>)
 80095ce:	f000 b8af 	b.w	8009730 <_fwalk_reent>
 80095d2:	bf00      	nop
 80095d4:	0800950d 	.word	0x0800950d

080095d8 <__sfmoreglue>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	2268      	movs	r2, #104	; 0x68
 80095dc:	1e4d      	subs	r5, r1, #1
 80095de:	4355      	muls	r5, r2
 80095e0:	460e      	mov	r6, r1
 80095e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095e6:	f7ff fa65 	bl	8008ab4 <_malloc_r>
 80095ea:	4604      	mov	r4, r0
 80095ec:	b140      	cbz	r0, 8009600 <__sfmoreglue+0x28>
 80095ee:	2100      	movs	r1, #0
 80095f0:	e9c0 1600 	strd	r1, r6, [r0]
 80095f4:	300c      	adds	r0, #12
 80095f6:	60a0      	str	r0, [r4, #8]
 80095f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095fc:	f7fd fb2c 	bl	8006c58 <memset>
 8009600:	4620      	mov	r0, r4
 8009602:	bd70      	pop	{r4, r5, r6, pc}

08009604 <__sfp_lock_acquire>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__sfp_lock_acquire+0x8>)
 8009606:	f000 b8b3 	b.w	8009770 <__retarget_lock_acquire_recursive>
 800960a:	bf00      	nop
 800960c:	20000765 	.word	0x20000765

08009610 <__sfp_lock_release>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__sfp_lock_release+0x8>)
 8009612:	f000 b8ae 	b.w	8009772 <__retarget_lock_release_recursive>
 8009616:	bf00      	nop
 8009618:	20000765 	.word	0x20000765

0800961c <__sinit_lock_acquire>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__sinit_lock_acquire+0x8>)
 800961e:	f000 b8a7 	b.w	8009770 <__retarget_lock_acquire_recursive>
 8009622:	bf00      	nop
 8009624:	20000766 	.word	0x20000766

08009628 <__sinit_lock_release>:
 8009628:	4801      	ldr	r0, [pc, #4]	; (8009630 <__sinit_lock_release+0x8>)
 800962a:	f000 b8a2 	b.w	8009772 <__retarget_lock_release_recursive>
 800962e:	bf00      	nop
 8009630:	20000766 	.word	0x20000766

08009634 <__sinit>:
 8009634:	b510      	push	{r4, lr}
 8009636:	4604      	mov	r4, r0
 8009638:	f7ff fff0 	bl	800961c <__sinit_lock_acquire>
 800963c:	69a3      	ldr	r3, [r4, #24]
 800963e:	b11b      	cbz	r3, 8009648 <__sinit+0x14>
 8009640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009644:	f7ff bff0 	b.w	8009628 <__sinit_lock_release>
 8009648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800964c:	6523      	str	r3, [r4, #80]	; 0x50
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <__sinit+0x68>)
 8009650:	4a13      	ldr	r2, [pc, #76]	; (80096a0 <__sinit+0x6c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	62a2      	str	r2, [r4, #40]	; 0x28
 8009656:	42a3      	cmp	r3, r4
 8009658:	bf04      	itt	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	61a3      	streq	r3, [r4, #24]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f820 	bl	80096a4 <__sfp>
 8009664:	6060      	str	r0, [r4, #4]
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f81c 	bl	80096a4 <__sfp>
 800966c:	60a0      	str	r0, [r4, #8]
 800966e:	4620      	mov	r0, r4
 8009670:	f000 f818 	bl	80096a4 <__sfp>
 8009674:	2200      	movs	r2, #0
 8009676:	60e0      	str	r0, [r4, #12]
 8009678:	2104      	movs	r1, #4
 800967a:	6860      	ldr	r0, [r4, #4]
 800967c:	f7ff ff82 	bl	8009584 <std>
 8009680:	68a0      	ldr	r0, [r4, #8]
 8009682:	2201      	movs	r2, #1
 8009684:	2109      	movs	r1, #9
 8009686:	f7ff ff7d 	bl	8009584 <std>
 800968a:	68e0      	ldr	r0, [r4, #12]
 800968c:	2202      	movs	r2, #2
 800968e:	2112      	movs	r1, #18
 8009690:	f7ff ff78 	bl	8009584 <std>
 8009694:	2301      	movs	r3, #1
 8009696:	61a3      	str	r3, [r4, #24]
 8009698:	e7d2      	b.n	8009640 <__sinit+0xc>
 800969a:	bf00      	nop
 800969c:	08009c60 	.word	0x08009c60
 80096a0:	080095cd 	.word	0x080095cd

080096a4 <__sfp>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	4607      	mov	r7, r0
 80096a8:	f7ff ffac 	bl	8009604 <__sfp_lock_acquire>
 80096ac:	4b1e      	ldr	r3, [pc, #120]	; (8009728 <__sfp+0x84>)
 80096ae:	681e      	ldr	r6, [r3, #0]
 80096b0:	69b3      	ldr	r3, [r6, #24]
 80096b2:	b913      	cbnz	r3, 80096ba <__sfp+0x16>
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff ffbd 	bl	8009634 <__sinit>
 80096ba:	3648      	adds	r6, #72	; 0x48
 80096bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	d503      	bpl.n	80096cc <__sfp+0x28>
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	b30b      	cbz	r3, 800970c <__sfp+0x68>
 80096c8:	6836      	ldr	r6, [r6, #0]
 80096ca:	e7f7      	b.n	80096bc <__sfp+0x18>
 80096cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096d0:	b9d5      	cbnz	r5, 8009708 <__sfp+0x64>
 80096d2:	4b16      	ldr	r3, [pc, #88]	; (800972c <__sfp+0x88>)
 80096d4:	60e3      	str	r3, [r4, #12]
 80096d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096da:	6665      	str	r5, [r4, #100]	; 0x64
 80096dc:	f000 f847 	bl	800976e <__retarget_lock_init_recursive>
 80096e0:	f7ff ff96 	bl	8009610 <__sfp_lock_release>
 80096e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096ec:	6025      	str	r5, [r4, #0]
 80096ee:	61a5      	str	r5, [r4, #24]
 80096f0:	2208      	movs	r2, #8
 80096f2:	4629      	mov	r1, r5
 80096f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f8:	f7fd faae 	bl	8006c58 <memset>
 80096fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009704:	4620      	mov	r0, r4
 8009706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009708:	3468      	adds	r4, #104	; 0x68
 800970a:	e7d9      	b.n	80096c0 <__sfp+0x1c>
 800970c:	2104      	movs	r1, #4
 800970e:	4638      	mov	r0, r7
 8009710:	f7ff ff62 	bl	80095d8 <__sfmoreglue>
 8009714:	4604      	mov	r4, r0
 8009716:	6030      	str	r0, [r6, #0]
 8009718:	2800      	cmp	r0, #0
 800971a:	d1d5      	bne.n	80096c8 <__sfp+0x24>
 800971c:	f7ff ff78 	bl	8009610 <__sfp_lock_release>
 8009720:	230c      	movs	r3, #12
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	e7ee      	b.n	8009704 <__sfp+0x60>
 8009726:	bf00      	nop
 8009728:	08009c60 	.word	0x08009c60
 800972c:	ffff0001 	.word	0xffff0001

08009730 <_fwalk_reent>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	4606      	mov	r6, r0
 8009736:	4688      	mov	r8, r1
 8009738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800973c:	2700      	movs	r7, #0
 800973e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009742:	f1b9 0901 	subs.w	r9, r9, #1
 8009746:	d505      	bpl.n	8009754 <_fwalk_reent+0x24>
 8009748:	6824      	ldr	r4, [r4, #0]
 800974a:	2c00      	cmp	r4, #0
 800974c:	d1f7      	bne.n	800973e <_fwalk_reent+0xe>
 800974e:	4638      	mov	r0, r7
 8009750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009754:	89ab      	ldrh	r3, [r5, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d907      	bls.n	800976a <_fwalk_reent+0x3a>
 800975a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800975e:	3301      	adds	r3, #1
 8009760:	d003      	beq.n	800976a <_fwalk_reent+0x3a>
 8009762:	4629      	mov	r1, r5
 8009764:	4630      	mov	r0, r6
 8009766:	47c0      	blx	r8
 8009768:	4307      	orrs	r7, r0
 800976a:	3568      	adds	r5, #104	; 0x68
 800976c:	e7e9      	b.n	8009742 <_fwalk_reent+0x12>

0800976e <__retarget_lock_init_recursive>:
 800976e:	4770      	bx	lr

08009770 <__retarget_lock_acquire_recursive>:
 8009770:	4770      	bx	lr

08009772 <__retarget_lock_release_recursive>:
 8009772:	4770      	bx	lr

08009774 <__swhatbuf_r>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	460e      	mov	r6, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	2900      	cmp	r1, #0
 800977e:	b096      	sub	sp, #88	; 0x58
 8009780:	4614      	mov	r4, r2
 8009782:	461d      	mov	r5, r3
 8009784:	da08      	bge.n	8009798 <__swhatbuf_r+0x24>
 8009786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	061a      	lsls	r2, r3, #24
 8009790:	d410      	bmi.n	80097b4 <__swhatbuf_r+0x40>
 8009792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009796:	e00e      	b.n	80097b6 <__swhatbuf_r+0x42>
 8009798:	466a      	mov	r2, sp
 800979a:	f000 f903 	bl	80099a4 <_fstat_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	dbf1      	blt.n	8009786 <__swhatbuf_r+0x12>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097ac:	425a      	negs	r2, r3
 80097ae:	415a      	adcs	r2, r3
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	e7ee      	b.n	8009792 <__swhatbuf_r+0x1e>
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	2000      	movs	r0, #0
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	b016      	add	sp, #88	; 0x58
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080097c0 <__smakebuf_r>:
 80097c0:	898b      	ldrh	r3, [r1, #12]
 80097c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c4:	079d      	lsls	r5, r3, #30
 80097c6:	4606      	mov	r6, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	d507      	bpl.n	80097dc <__smakebuf_r+0x1c>
 80097cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	2301      	movs	r3, #1
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	b002      	add	sp, #8
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	ab01      	add	r3, sp, #4
 80097de:	466a      	mov	r2, sp
 80097e0:	f7ff ffc8 	bl	8009774 <__swhatbuf_r>
 80097e4:	9900      	ldr	r1, [sp, #0]
 80097e6:	4605      	mov	r5, r0
 80097e8:	4630      	mov	r0, r6
 80097ea:	f7ff f963 	bl	8008ab4 <_malloc_r>
 80097ee:	b948      	cbnz	r0, 8009804 <__smakebuf_r+0x44>
 80097f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f4:	059a      	lsls	r2, r3, #22
 80097f6:	d4ef      	bmi.n	80097d8 <__smakebuf_r+0x18>
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	e7e3      	b.n	80097cc <__smakebuf_r+0xc>
 8009804:	4b0d      	ldr	r3, [pc, #52]	; (800983c <__smakebuf_r+0x7c>)
 8009806:	62b3      	str	r3, [r6, #40]	; 0x28
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	9b00      	ldr	r3, [sp, #0]
 8009814:	6163      	str	r3, [r4, #20]
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	6120      	str	r0, [r4, #16]
 800981a:	b15b      	cbz	r3, 8009834 <__smakebuf_r+0x74>
 800981c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009820:	4630      	mov	r0, r6
 8009822:	f000 f8d1 	bl	80099c8 <_isatty_r>
 8009826:	b128      	cbz	r0, 8009834 <__smakebuf_r+0x74>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	89a0      	ldrh	r0, [r4, #12]
 8009836:	4305      	orrs	r5, r0
 8009838:	81a5      	strh	r5, [r4, #12]
 800983a:	e7cd      	b.n	80097d8 <__smakebuf_r+0x18>
 800983c:	080095cd 	.word	0x080095cd

08009840 <_malloc_usable_size_r>:
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f18      	subs	r0, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbc      	itt	lt
 800984a:	580b      	ldrlt	r3, [r1, r0]
 800984c:	18c0      	addlt	r0, r0, r3
 800984e:	4770      	bx	lr

08009850 <_raise_r>:
 8009850:	291f      	cmp	r1, #31
 8009852:	b538      	push	{r3, r4, r5, lr}
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	d904      	bls.n	8009864 <_raise_r+0x14>
 800985a:	2316      	movs	r3, #22
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	f04f 30ff 	mov.w	r0, #4294967295
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009866:	b112      	cbz	r2, 800986e <_raise_r+0x1e>
 8009868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800986c:	b94b      	cbnz	r3, 8009882 <_raise_r+0x32>
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f830 	bl	80098d4 <_getpid_r>
 8009874:	462a      	mov	r2, r5
 8009876:	4601      	mov	r1, r0
 8009878:	4620      	mov	r0, r4
 800987a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800987e:	f000 b817 	b.w	80098b0 <_kill_r>
 8009882:	2b01      	cmp	r3, #1
 8009884:	d00a      	beq.n	800989c <_raise_r+0x4c>
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	d103      	bne.n	8009892 <_raise_r+0x42>
 800988a:	2316      	movs	r3, #22
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	2001      	movs	r0, #1
 8009890:	e7e7      	b.n	8009862 <_raise_r+0x12>
 8009892:	2400      	movs	r4, #0
 8009894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009898:	4628      	mov	r0, r5
 800989a:	4798      	blx	r3
 800989c:	2000      	movs	r0, #0
 800989e:	e7e0      	b.n	8009862 <_raise_r+0x12>

080098a0 <raise>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	; (80098ac <raise+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f7ff bfd3 	b.w	8009850 <_raise_r>
 80098aa:	bf00      	nop
 80098ac:	20000010 	.word	0x20000010

080098b0 <_kill_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d07      	ldr	r5, [pc, #28]	; (80098d0 <_kill_r+0x20>)
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	4611      	mov	r1, r2
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	f7f8 fc13 	bl	80020e8 <_kill>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d102      	bne.n	80098cc <_kill_r+0x1c>
 80098c6:	682b      	ldr	r3, [r5, #0]
 80098c8:	b103      	cbz	r3, 80098cc <_kill_r+0x1c>
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	20000760 	.word	0x20000760

080098d4 <_getpid_r>:
 80098d4:	f7f8 bc00 	b.w	80020d8 <_getpid>

080098d8 <__sread>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 f894 	bl	8009a0c <_read_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	bfab      	itete	ge
 80098e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ea:	89a3      	ldrhlt	r3, [r4, #12]
 80098ec:	181b      	addge	r3, r3, r0
 80098ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098f2:	bfac      	ite	ge
 80098f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098f6:	81a3      	strhlt	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__swrite>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	461f      	mov	r7, r3
 8009900:	898b      	ldrh	r3, [r1, #12]
 8009902:	05db      	lsls	r3, r3, #23
 8009904:	4605      	mov	r5, r0
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	d505      	bpl.n	8009918 <__swrite+0x1e>
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	2302      	movs	r3, #2
 8009912:	2200      	movs	r2, #0
 8009914:	f000 f868 	bl	80099e8 <_lseek_r>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	4628      	mov	r0, r5
 800992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	f000 b817 	b.w	8009960 <_write_r>

08009932 <__sseek>:
 8009932:	b510      	push	{r4, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 f855 	bl	80099e8 <_lseek_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	bf15      	itete	ne
 8009944:	6560      	strne	r0, [r4, #84]	; 0x54
 8009946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800994a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800994e:	81a3      	strheq	r3, [r4, #12]
 8009950:	bf18      	it	ne
 8009952:	81a3      	strhne	r3, [r4, #12]
 8009954:	bd10      	pop	{r4, pc}

08009956 <__sclose>:
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 b813 	b.w	8009984 <_close_r>
	...

08009960 <_write_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	; (8009980 <_write_r+0x20>)
 8009964:	4604      	mov	r4, r0
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	2200      	movs	r2, #0
 800996c:	602a      	str	r2, [r5, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	f7f8 fbf1 	bl	8002156 <_write>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_write_r+0x1e>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_write_r+0x1e>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20000760 	.word	0x20000760

08009984 <_close_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d06      	ldr	r5, [pc, #24]	; (80099a0 <_close_r+0x1c>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f8 fbfd 	bl	800218e <_close>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_close_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_close_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20000760 	.word	0x20000760

080099a4 <_fstat_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_fstat_r+0x20>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	f7f8 fbf8 	bl	80021a6 <_fstat>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d102      	bne.n	80099c0 <_fstat_r+0x1c>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b103      	cbz	r3, 80099c0 <_fstat_r+0x1c>
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	20000760 	.word	0x20000760

080099c8 <_isatty_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d06      	ldr	r5, [pc, #24]	; (80099e4 <_isatty_r+0x1c>)
 80099cc:	2300      	movs	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f7f8 fbf7 	bl	80021c6 <_isatty>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_isatty_r+0x1a>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_isatty_r+0x1a>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20000760 	.word	0x20000760

080099e8 <_lseek_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d07      	ldr	r5, [pc, #28]	; (8009a08 <_lseek_r+0x20>)
 80099ec:	4604      	mov	r4, r0
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	602a      	str	r2, [r5, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f7f8 fbf0 	bl	80021dc <_lseek>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_lseek_r+0x1e>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_lseek_r+0x1e>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	20000760 	.word	0x20000760

08009a0c <_read_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d07      	ldr	r5, [pc, #28]	; (8009a2c <_read_r+0x20>)
 8009a10:	4604      	mov	r4, r0
 8009a12:	4608      	mov	r0, r1
 8009a14:	4611      	mov	r1, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	602a      	str	r2, [r5, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f7f8 fb7e 	bl	800211c <_read>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_read_r+0x1e>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_read_r+0x1e>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20000760 	.word	0x20000760

08009a30 <_init>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr

08009a3c <_fini>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr
